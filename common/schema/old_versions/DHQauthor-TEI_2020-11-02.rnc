default namespace = "http://www.digitalhumanities.org/ns/dhq"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace local = ""
namespace mml = "http://www.w3.org/1998/Math/MathML"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace ns2 = "http://web.resource.org/cc/"
namespace rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2020-11-02T21:20:08Z. .
# TEI Edition: Version 4.1.0. Last updated on
#	19th August 2020, revision b414ba550
# TEI Edition Location: https://www.tei-c.org/Vault/P5/Version 4.1.0/
#  This schema supports basic journal features. 

#
div {
  div {
    div {
      cn = element mml:cn { cn.attributes, cn.content }
      semantics-ci =
        element mml:semantics {
          semantics.attributes,
          (ci | semantics-ci),
          (annotation | annotation-xml)*
        }
      semantics-contexp =
        element mml:semantics {
          semantics.attributes, ContExp, (annotation | annotation-xml)*
        }
      ci = element mml:ci { ci.attributes, ci.content }
      csymbol =
        element mml:csymbol { csymbol.attributes, csymbol.content }
      SymbolName = xsd:NCName
      BvarQ = bvar*
      apply = element mml:apply { CommonAtt, apply.content }
      bind = element mml:bind { CommonAtt, bind.content }
      share = element mml:share { CommonAtt, src, empty }
      cerror =
        element mml:cerror { cerror.attributes, csymbol, ContExp* }
      cerror.attributes = CommonAtt
      cbytes = element mml:cbytes { cbytes.attributes, base64 }
      base64 = xsd:base64Binary
      cs = element mml:cs { cs.attributes, text }
      MathExpression |= ContExp
    }
    cn.content = (text | mglyph | sep | PresentationExpression)*
    cn.attributes =
      CommonAtt,
      DefEncAtt,
      attribute type { text }?,
      base?
    ci.attributes = CommonAtt, DefEncAtt, ci.type?
    ci.type = attribute type { text }
    ci.content = (text | mglyph | PresentationExpression)*
    csymbol.attributes =
      CommonAtt,
      DefEncAtt,
      attribute type { text }?,
      cd?
    csymbol.content = (text | mglyph | PresentationExpression)*
    bvar =
      element mml:bvar {
        CommonAtt,
        ((ci | semantics-ci) & degree?)
      }
    cbytes.attributes = CommonAtt, DefEncAtt
    cs.attributes = CommonAtt, DefEncAtt
    apply.content = ContExp+ | (ContExp, BvarQ, Qualifier*, ContExp*)
    bind.content = apply.content
    base = attribute base { text }
    sep = element mml:sep { empty }
    PresentationExpression |= notAllowed
    DomainQ =
      (domainofapplication
       | condition
       | interval
       | (lowlimit, uplimit?))*
    domainofapplication = element mml:domainofapplication { ContExp }
    condition = element mml:condition { ContExp }
    uplimit = element mml:uplimit { ContExp }
    lowlimit = element mml:lowlimit { ContExp }
    Qualifier = DomainQ | degree | momentabout | logbase
    degree = element mml:degree { ContExp }
    momentabout = element mml:momentabout { ContExp }
    logbase = element mml:logbase { ContExp }
    type = attribute type { text }
    order = attribute order { "numeric" | "lexicographic" }
    closure = attribute closure { text }
    ContExp |= piecewise
    piecewise =
      element mml:piecewise {
        CommonAtt, DefEncAtt, (piece* & otherwise?)
      }
    piece = element mml:piece { CommonAtt, DefEncAtt, ContExp, ContExp }
    otherwise = element mml:otherwise { CommonAtt, DefEncAtt, ContExp }
    DeprecatedContExp = reln | fn | declare
    ContExp |= DeprecatedContExp
    reln = element mml:reln { ContExp* }
    fn = element mml:fn { ContExp }
    declare =
      element mml:declare {
        attribute type { xsd:string }?,
        attribute scope { xsd:string }?,
        attribute nargs { xsd:nonNegativeInteger }?,
        attribute occurrence { "prefix" | "infix" | "function-model" }?,
        DefEncAtt,
        ContExp+
      }
    interval.class = interval
    ContExp |= interval.class
    interval =
      element mml:interval {
        CommonAtt, DefEncAtt, closure?, ContExp, ContExp
      }
    unary-functional.class =
      inverse | ident | domain | codomain | image | ln | log | moment
    ContExp |= unary-functional.class
    inverse = element mml:inverse { CommonAtt, DefEncAtt, empty }
    ident = element mml:ident { CommonAtt, DefEncAtt, empty }
    domain = element mml:domain { CommonAtt, DefEncAtt, empty }
    codomain = element mml:codomain { CommonAtt, DefEncAtt, empty }
    image = element mml:image { CommonAtt, DefEncAtt, empty }
    ln = element mml:ln { CommonAtt, DefEncAtt, empty }
    log = element mml:log { CommonAtt, DefEncAtt, empty }
    moment = element mml:moment { CommonAtt, DefEncAtt, empty }
    lambda.class = lambda
    ContExp |= lambda.class
    lambda =
      element mml:lambda {
        CommonAtt, DefEncAtt, BvarQ, DomainQ, ContExp
      }
    nary-functional.class = compose
    ContExp |= nary-functional.class
    compose = element mml:compose { CommonAtt, DefEncAtt, empty }
    binary-arith.class = quotient | divide | minus | power | rem | root
    ContExp |= binary-arith.class
    quotient = element mml:quotient { CommonAtt, DefEncAtt, empty }
    divide = element mml:divide { CommonAtt, DefEncAtt, empty }
    minus = element mml:minus { CommonAtt, DefEncAtt, empty }
    power = element mml:power { CommonAtt, DefEncAtt, empty }
    rem = element mml:rem { CommonAtt, DefEncAtt, empty }
    root = element mml:root { CommonAtt, DefEncAtt, empty }
    unary-arith.class =
      factorial
      | minus
      | root
      | abs
      | conjugate
      | arg
      | real
      | imaginary
      | floor
      | ceiling
      | exp
    ContExp |= unary-arith.class
    factorial = element mml:factorial { CommonAtt, DefEncAtt, empty }
    abs = element mml:abs { CommonAtt, DefEncAtt, empty }
    conjugate = element mml:conjugate { CommonAtt, DefEncAtt, empty }
    arg = element mml:arg { CommonAtt, DefEncAtt, empty }
    real = element mml:real { CommonAtt, DefEncAtt, empty }
    imaginary = element mml:imaginary { CommonAtt, DefEncAtt, empty }
    floor = element mml:floor { CommonAtt, DefEncAtt, empty }
    ceiling = element mml:ceiling { CommonAtt, DefEncAtt, empty }
    exp = element mml:exp { CommonAtt, DefEncAtt, empty }
    nary-minmax.class = max | min
    ContExp |= nary-minmax.class
    max = element mml:max { CommonAtt, DefEncAtt, empty }
    min = element mml:min { CommonAtt, DefEncAtt, empty }
    nary-arith.class = plus | times | gcd | lcm
    ContExp |= nary-arith.class
    plus = element mml:plus { CommonAtt, DefEncAtt, empty }
    times = element mml:times { CommonAtt, DefEncAtt, empty }
    gcd = element mml:gcd { CommonAtt, DefEncAtt, empty }
    lcm = element mml:lcm { CommonAtt, DefEncAtt, empty }
    nary-logical.class = and | or | xor
    ContExp |= nary-logical.class
    and = element mml:and { CommonAtt, DefEncAtt, empty }
    or = element mml:or { CommonAtt, DefEncAtt, empty }
    xor = element mml:xor { CommonAtt, DefEncAtt, empty }
    unary-logical.class = not
    ContExp |= unary-logical.class
    not = element mml:not { CommonAtt, DefEncAtt, empty }
    binary-logical.class = implies | equivalent
    ContExp |= binary-logical.class
    implies = element mml:implies { CommonAtt, DefEncAtt, empty }
    equivalent = element mml:equivalent { CommonAtt, DefEncAtt, empty }
    quantifier.class = forall | exists
    ContExp |= quantifier.class
    forall = element mml:forall { CommonAtt, DefEncAtt, empty }
    exists = element mml:exists { CommonAtt, DefEncAtt, empty }
    nary-reln.class = eq | gt | lt | geq | leq
    ContExp |= nary-reln.class
    eq = element mml:eq { CommonAtt, DefEncAtt, empty }
    gt = element mml:gt { CommonAtt, DefEncAtt, empty }
    lt = element mml:lt { CommonAtt, DefEncAtt, empty }
    geq = element mml:geq { CommonAtt, DefEncAtt, empty }
    leq = element mml:leq { CommonAtt, DefEncAtt, empty }
    binary-reln.class = neq | approx | factorof | tendsto
    ContExp |= binary-reln.class
    neq = element mml:neq { CommonAtt, DefEncAtt, empty }
    approx = element mml:approx { CommonAtt, DefEncAtt, empty }
    factorof = element mml:factorof { CommonAtt, DefEncAtt, empty }
    tendsto = element mml:tendsto { CommonAtt, DefEncAtt, type?, empty }
    int.class = int
    ContExp |= int.class
    int = element mml:int { CommonAtt, DefEncAtt, empty }
    Differential-Operator.class = diff
    ContExp |= Differential-Operator.class
    diff = element mml:diff { CommonAtt, DefEncAtt, empty }
    partialdiff.class = partialdiff
    ContExp |= partialdiff.class
    partialdiff =
      element mml:partialdiff { CommonAtt, DefEncAtt, empty }
    unary-veccalc.class = divergence | grad | curl | laplacian
    ContExp |= unary-veccalc.class
    divergence = element mml:divergence { CommonAtt, DefEncAtt, empty }
    grad = element mml:grad { CommonAtt, DefEncAtt, empty }
    curl = element mml:curl { CommonAtt, DefEncAtt, empty }
    laplacian = element mml:laplacian { CommonAtt, DefEncAtt, empty }
    nary-setlist-constructor.class = set | \list
    ContExp |= nary-setlist-constructor.class
    set =
      element mml:set {
        CommonAtt, DefEncAtt, type?, BvarQ*, DomainQ*, ContExp*
      }
    \list =
      element mml:list {
        CommonAtt, DefEncAtt, order?, BvarQ*, DomainQ*, ContExp*
      }
    nary-set.class = union | intersect | cartesianproduct
    ContExp |= nary-set.class
    union = element mml:union { CommonAtt, DefEncAtt, empty }
    intersect = element mml:intersect { CommonAtt, DefEncAtt, empty }
    cartesianproduct =
      element mml:cartesianproduct { CommonAtt, DefEncAtt, empty }
    binary-set.class = in | notin | notsubset | notprsubset | setdiff
    ContExp |= binary-set.class
    in = element mml:in { CommonAtt, DefEncAtt, empty }
    notin = element mml:notin { CommonAtt, DefEncAtt, empty }
    notsubset = element mml:notsubset { CommonAtt, DefEncAtt, empty }
    notprsubset =
      element mml:notprsubset { CommonAtt, DefEncAtt, empty }
    setdiff = element mml:setdiff { CommonAtt, DefEncAtt, empty }
    nary-set-reln.class = subset | prsubset
    ContExp |= nary-set-reln.class
    subset = element mml:subset { CommonAtt, DefEncAtt, empty }
    prsubset = element mml:prsubset { CommonAtt, DefEncAtt, empty }
    unary-set.class = card
    ContExp |= unary-set.class
    card = element mml:card { CommonAtt, DefEncAtt, empty }
    sum.class = sum
    ContExp |= sum.class
    sum = element mml:sum { CommonAtt, DefEncAtt, empty }
    product.class = product
    ContExp |= product.class
    product = element mml:product { CommonAtt, DefEncAtt, empty }
    limit.class = limit
    ContExp |= limit.class
    limit = element mml:limit { CommonAtt, DefEncAtt, empty }
    unary-elementary.class =
      sin
      | cos
      | tan
      | sec
      | csc
      | cot
      | sinh
      | cosh
      | tanh
      | sech
      | csch
      | coth
      | arcsin
      | arccos
      | arctan
      | arccosh
      | arccot
      | arccoth
      | arccsc
      | arccsch
      | arcsec
      | arcsech
      | arcsinh
      | arctanh
    ContExp |= unary-elementary.class
    sin = element mml:sin { CommonAtt, DefEncAtt, empty }
    cos = element mml:cos { CommonAtt, DefEncAtt, empty }
    tan = element mml:tan { CommonAtt, DefEncAtt, empty }
    sec = element mml:sec { CommonAtt, DefEncAtt, empty }
    csc = element mml:csc { CommonAtt, DefEncAtt, empty }
    cot = element mml:cot { CommonAtt, DefEncAtt, empty }
    sinh = element mml:sinh { CommonAtt, DefEncAtt, empty }
    cosh = element mml:cosh { CommonAtt, DefEncAtt, empty }
    tanh = element mml:tanh { CommonAtt, DefEncAtt, empty }
    sech = element mml:sech { CommonAtt, DefEncAtt, empty }
    csch = element mml:csch { CommonAtt, DefEncAtt, empty }
    coth = element mml:coth { CommonAtt, DefEncAtt, empty }
    arcsin = element mml:arcsin { CommonAtt, DefEncAtt, empty }
    arccos = element mml:arccos { CommonAtt, DefEncAtt, empty }
    arctan = element mml:arctan { CommonAtt, DefEncAtt, empty }
    arccosh = element mml:arccosh { CommonAtt, DefEncAtt, empty }
    arccot = element mml:arccot { CommonAtt, DefEncAtt, empty }
    arccoth = element mml:arccoth { CommonAtt, DefEncAtt, empty }
    arccsc = element mml:arccsc { CommonAtt, DefEncAtt, empty }
    arccsch = element mml:arccsch { CommonAtt, DefEncAtt, empty }
    arcsec = element mml:arcsec { CommonAtt, DefEncAtt, empty }
    arcsech = element mml:arcsech { CommonAtt, DefEncAtt, empty }
    arcsinh = element mml:arcsinh { CommonAtt, DefEncAtt, empty }
    arctanh = element mml:arctanh { CommonAtt, DefEncAtt, empty }
    nary-stats.class = mean | sdev | variance | median | mode
    ContExp |= nary-stats.class
    mean = element mml:mean { CommonAtt, DefEncAtt, empty }
    sdev = element mml:sdev { CommonAtt, DefEncAtt, empty }
    variance = element mml:variance { CommonAtt, DefEncAtt, empty }
    median = element mml:median { CommonAtt, DefEncAtt, empty }
    mode = element mml:mode { CommonAtt, DefEncAtt, empty }
    nary-constructor.class = vector | matrix | matrixrow
    ContExp |= nary-constructor.class
    vector =
      element mml:vector {
        CommonAtt, DefEncAtt, BvarQ, DomainQ, ContExp*
      }
    matrix =
      element mml:matrix {
        CommonAtt, DefEncAtt, BvarQ, DomainQ, ContExp*
      }
    matrixrow =
      element mml:matrixrow {
        CommonAtt, DefEncAtt, BvarQ, DomainQ, ContExp*
      }
    unary-linalg.class = determinant | transpose
    ContExp |= unary-linalg.class
    determinant =
      element mml:determinant { CommonAtt, DefEncAtt, empty }
    transpose = element mml:transpose { CommonAtt, DefEncAtt, empty }
    nary-linalg.class = selector
    ContExp |= nary-linalg.class
    selector = element mml:selector { CommonAtt, DefEncAtt, empty }
    binary-linalg.class = vectorproduct | scalarproduct | outerproduct
    ContExp |= binary-linalg.class
    vectorproduct =
      element mml:vectorproduct { CommonAtt, DefEncAtt, empty }
    scalarproduct =
      element mml:scalarproduct { CommonAtt, DefEncAtt, empty }
    outerproduct =
      element mml:outerproduct { CommonAtt, DefEncAtt, empty }
    constant-set.class =
      integers
      | reals
      | rationals
      | naturalnumbers
      | complexes
      | primes
      | emptyset
    ContExp |= constant-set.class
    integers = element mml:integers { CommonAtt, DefEncAtt, empty }
    reals = element mml:reals { CommonAtt, DefEncAtt, empty }
    rationals = element mml:rationals { CommonAtt, DefEncAtt, empty }
    naturalnumbers =
      element mml:naturalnumbers { CommonAtt, DefEncAtt, empty }
    complexes = element mml:complexes { CommonAtt, DefEncAtt, empty }
    primes = element mml:primes { CommonAtt, DefEncAtt, empty }
    emptyset = element mml:emptyset { CommonAtt, DefEncAtt, empty }
    constant-arith.class =
      exponentiale
      | imaginaryi
      | notanumber
      | true
      | false
      | pi
      | eulergamma
      | infinity
    ContExp |= constant-arith.class
    exponentiale =
      element mml:exponentiale { CommonAtt, DefEncAtt, empty }
    imaginaryi = element mml:imaginaryi { CommonAtt, DefEncAtt, empty }
    notanumber = element mml:notanumber { CommonAtt, DefEncAtt, empty }
    true = element mml:true { CommonAtt, DefEncAtt, empty }
    false = element mml:false { CommonAtt, DefEncAtt, empty }
    pi = element mml:pi { CommonAtt, DefEncAtt, empty }
    eulergamma = element mml:eulergamma { CommonAtt, DefEncAtt, empty }
    infinity = element mml:infinity { CommonAtt, DefEncAtt, empty }
  }
  a:documentation [ "Content  MathML" ]
  div {
    MathExpression |= PresentationExpression
    ImpliedMrow = MathExpression*
    TableRowExpression = mtr | mlabeledtr
    TableCellExpression = mtd
    MstackExpression =
      MathExpression | mscarries | msline | msrow | msgroup
    MsrowExpression = MathExpression | none
    MultiScriptExpression =
      (MathExpression | none), (MathExpression | none)
    mpadded-length =
      xsd:string {
        pattern =
          "\s*([\+\-]?[0-9]*([0-9]\.?|\.[0-9])[0-9]*\s*((%?\s*(height|depth|width)?)|e[mx]|in|cm|mm|p[xtc]|((negative)?((very){0,2}thi(n|ck)|medium)mathspace))?)\s*"
      }
    linestyle = "none" | "solid" | "dashed"
    verticalalign = "top" | "bottom" | "center" | "baseline" | "axis"
    columnalignstyle = "left" | "center" | "right"
    idref = text
    unsigned-integer = xsd:unsignedLong
    integer = xsd:integer
    number = xsd:decimal
    character = xsd:string { pattern = "\s*\S\s*" }
    color =
      xsd:string {
        pattern =
          "\s*((#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?)|[aA][qQ][uU][aA]|[bB][lL][aA][cC][kK]|[bB][lL][uU][eE]|[fF][uU][cC][hH][sS][iI][aA]|[gG][rR][aA][yY]|[gG][rR][eE][eE][nN]|[lL][iI][mM][eE]|[mM][aA][rR][oO][oO][nN]|[nN][aA][vV][yY]|[oO][lL][iI][vV][eE]|[pP][uU][rR][pP][lL][eE]|[rR][eE][dD]|[sS][iI][lL][vV][eE][rR]|[tT][eE][aA][lL]|[wW][hH][iI][tT][eE]|[yY][eE][lL][lL][oO][wW])\s*"
      }
    group-alignment = "left" | "center" | "right" | "decimalpoint"
    group-alignment-list = list { group-alignment+ }
    group-alignment-list-list =
      xsd:string {
        pattern =
          "(\s*\{\s*(left|center|right|decimalpoint)(\s+(left|center|right|decimalpoint))*\})*\s*"
      }
    positive-integer = xsd:positiveInteger
    TokenExpression = mi | mn | mo | mtext | mspace | ms
    token.content = mglyph | malignmark | text
    mi = element mml:mi { mi.attributes, token.content* }
    mi.attributes = CommonAtt, CommonPresAtt, TokenAtt
    mn = element mml:mn { mn.attributes, token.content* }
    mn.attributes = CommonAtt, CommonPresAtt, TokenAtt
    mo = element mml:mo { mo.attributes, token.content* }
    mo.attributes =
      CommonAtt,
      CommonPresAtt,
      TokenAtt,
      attribute form { "prefix" | "infix" | "postfix" }?,
      attribute fence { "true" | "false" }?,
      attribute separator { "true" | "false" }?,
      attribute lspace { length }?,
      attribute rspace { length }?,
      attribute stretchy { "true" | "false" }?,
      attribute symmetric { "true" | "false" }?,
      attribute maxsize { length | "infinity" }?,
      attribute minsize { length }?,
      attribute largeop { "true" | "false" }?,
      attribute movablelimits { "true" | "false" }?,
      attribute accent { "true" | "false" }?,
      attribute linebreak {
        "auto" | "newline" | "nobreak" | "goodbreak" | "badbreak"
      }?,
      attribute lineleading { length }?,
      attribute linebreakstyle {
        "before" | "after" | "duplicate" | "infixlinebreakstyle"
      }?,
      attribute linebreakmultchar { text }?,
      attribute indentalign {
        "left" | "center" | "right" | "auto" | "id"
      }?,
      attribute indentshift { length }?,
      attribute indenttarget { idref }?,
      attribute indentalignfirst {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentshiftfirst { length | "indentshift" }?,
      attribute indentalignlast {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentshiftlast { length | "indentshift" }?
    mtext = element mml:mtext { mtext.attributes, token.content* }
    mtext.attributes = CommonAtt, CommonPresAtt, TokenAtt
    mspace = element mml:mspace { mspace.attributes, empty }
    mspace.attributes =
      CommonAtt,
      CommonPresAtt,
      TokenAtt,
      attribute width { length }?,
      attribute height { length }?,
      attribute depth { length }?,
      attribute linebreak {
        "auto"
        | "newline"
        | "nobreak"
        | "goodbreak"
        | "badbreak"
        | "indentingnewline"
      }?,
      attribute indentalign {
        "left" | "center" | "right" | "auto" | "id"
      }?,
      attribute indentshift { length }?,
      attribute indenttarget { idref }?,
      attribute indentalignfirst {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentshiftfirst { length | "indentshift" }?,
      attribute indentalignlast {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentshiftlast { length | "indentshift" }?
    ms = element mml:ms { ms.attributes, token.content* }
    ms.attributes =
      CommonAtt,
      CommonPresAtt,
      TokenAtt,
      attribute lquote { text }?,
      attribute rquote { text }?
    mglyph =
      element mml:mglyph {
        mglyph.attributes, mglyph.deprecatedattributes, empty
      }
    mglyph.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute src { xsd:anyURI }?,
      attribute width { length }?,
      attribute height { length }?,
      attribute valign { length }?,
      attribute alt { text }?
    mglyph.deprecatedattributes =
      attribute index { integer }?,
      attribute mathvariant {
        "normal"
        | "bold"
        | "italic"
        | "bold-italic"
        | "double-struck"
        | "bold-fraktur"
        | "script"
        | "bold-script"
        | "fraktur"
        | "sans-serif"
        | "bold-sans-serif"
        | "sans-serif-italic"
        | "sans-serif-bold-italic"
        | "monospace"
        | "initial"
        | "tailed"
        | "looped"
        | "stretched"
      }?,
      attribute mathsize { "small" | "normal" | "big" | length }?,
      DeprecatedTokenAtt
    msline = element mml:msline { msline.attributes, empty }
    msline.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute position { integer }?,
      attribute length { unsigned-integer }?,
      attribute leftoverhang { length }?,
      attribute rightoverhang { length }?,
      attribute mslinethickness {
        length | "thin" | "medium" | "thick"
      }?
    none = element mml:none { none.attributes, empty }
    none.attributes = CommonAtt, CommonPresAtt
    mprescripts =
      element mml:mprescripts { mprescripts.attributes, empty }
    mprescripts.attributes = CommonAtt, CommonPresAtt
    CommonPresAtt =
      attribute mathcolor { color }?,
      attribute mathbackground { color | "transparent" }?
    TokenAtt =
      attribute mathvariant {
        "normal"
        | "bold"
        | "italic"
        | "bold-italic"
        | "double-struck"
        | "bold-fraktur"
        | "script"
        | "bold-script"
        | "fraktur"
        | "sans-serif"
        | "bold-sans-serif"
        | "sans-serif-italic"
        | "sans-serif-bold-italic"
        | "monospace"
        | "initial"
        | "tailed"
        | "looped"
        | "stretched"
      }?,
      attribute mathsize { "small" | "normal" | "big" | length }?,
      attribute dir { "ltr" | "rtl" }?,
      DeprecatedTokenAtt
    DeprecatedTokenAtt =
      attribute fontfamily { text }?,
      attribute fontweight { "normal" | "bold" }?,
      attribute fontstyle { "normal" | "italic" }?,
      attribute fontsize { length }?,
      attribute color { color }?,
      attribute background { color | "transparent" }?
    MalignExpression = maligngroup | malignmark
    malignmark = element mml:malignmark { malignmark.attributes, empty }
    malignmark.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute edge { "left" | "right" }?
    maligngroup =
      element mml:maligngroup { maligngroup.attributes, empty }
    maligngroup.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute groupalign {
        "left" | "center" | "right" | "decimalpoint"
      }?
    mrow = element mml:mrow { mrow.attributes, MathExpression* }
    mrow.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute dir { "ltr" | "rtl" }?
    mfrac =
      element mml:mfrac {
        mfrac.attributes, MathExpression, MathExpression
      }
    mfrac.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute linethickness { length | "thin" | "medium" | "thick" }?,
      attribute numalign { "left" | "center" | "right" }?,
      attribute denomalign { "left" | "center" | "right" }?,
      attribute bevelled { "true" | "false" }?
    msqrt = element mml:msqrt { msqrt.attributes, ImpliedMrow }
    msqrt.attributes = CommonAtt, CommonPresAtt
    mroot =
      element mml:mroot {
        mroot.attributes, MathExpression, MathExpression
      }
    mroot.attributes = CommonAtt, CommonPresAtt
    mstyle = element mml:mstyle { mstyle.attributes, ImpliedMrow }
    mstyle.attributes =
      CommonAtt,
      CommonPresAtt,
      mstyle.specificattributes,
      mstyle.generalattributes,
      mstyle.deprecatedattributes
    mstyle.specificattributes =
      attribute scriptlevel { integer }?,
      attribute displaystyle { "true" | "false" }?,
      attribute scriptsizemultiplier { number }?,
      attribute scriptminsize { length }?,
      attribute infixlinebreakstyle {
        "before" | "after" | "duplicate"
      }?,
      attribute decimalpoint { character }?
    mstyle.generalattributes =
      attribute accent { "true" | "false" }?,
      attribute accentunder { "true" | "false" }?,
      attribute align { "left" | "right" | "center" }?,
      attribute alignmentscope {
        list { ("true" | "false")+ }
      }?,
      attribute bevelled { "true" | "false" }?,
      attribute charalign { "left" | "center" | "right" }?,
      attribute charspacing { length | "loose" | "medium" | "tight" }?,
      attribute close { text }?,
      attribute columnalign {
        list { columnalignstyle+ }
      }?,
      attribute columnlines {
        list { linestyle+ }
      }?,
      attribute columnspacing {
        list { length+ }
      }?,
      attribute columnspan { positive-integer }?,
      attribute columnwidth {
        list { ("auto" | length | "fit")+ }
      }?,
      attribute crossout {
        list {
          ("none"
           | "updiagonalstrike"
           | "downdiagonalstrike"
           | "verticalstrike"
           | "horizontalstrike")*
        }
      }?,
      attribute denomalign { "left" | "center" | "right" }?,
      attribute depth { length }?,
      attribute dir { "ltr" | "rtl" }?,
      attribute edge { "left" | "right" }?,
      attribute equalcolumns { "true" | "false" }?,
      attribute equalrows { "true" | "false" }?,
      attribute fence { "true" | "false" }?,
      attribute form { "prefix" | "infix" | "postfix" }?,
      attribute frame { linestyle }?,
      attribute framespacing {
        list { length, length }
      }?,
      attribute groupalign { group-alignment-list-list }?,
      attribute height { length }?,
      attribute indentalign {
        "left" | "center" | "right" | "auto" | "id"
      }?,
      attribute indentalignfirst {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentalignlast {
        "left" | "center" | "right" | "auto" | "id" | "indentalign"
      }?,
      attribute indentshift { length }?,
      attribute indentshiftfirst { length | "indentshift" }?,
      attribute indentshiftlast { length | "indentshift" }?,
      attribute indenttarget { idref }?,
      attribute largeop { "true" | "false" }?,
      attribute leftoverhang { length }?,
      attribute length { unsigned-integer }?,
      attribute linebreak {
        "auto" | "newline" | "nobreak" | "goodbreak" | "badbreak"
      }?,
      attribute linebreakmultchar { text }?,
      attribute linebreakstyle {
        "before" | "after" | "duplicate" | "infixlinebreakstyle"
      }?,
      attribute lineleading { length }?,
      attribute linethickness { length | "thin" | "medium" | "thick" }?,
      attribute location {
        "w" | "nw" | "n" | "ne" | "e" | "se" | "s" | "sw"
      }?,
      attribute longdivstyle {
        "lefttop"
        | "stackedrightright"
        | "mediumstackedrightright"
        | "shortstackedrightright"
        | "righttop"
        | "left/\right"
        | "left)(right"
        | ":right=right"
        | "stackedleftleft"
        | "stackedleftlinetop"
      }?,
      attribute lquote { text }?,
      attribute lspace { length }?,
      attribute mathsize { "small" | "normal" | "big" | length }?,
      attribute mathvariant {
        "normal"
        | "bold"
        | "italic"
        | "bold-italic"
        | "double-struck"
        | "bold-fraktur"
        | "script"
        | "bold-script"
        | "fraktur"
        | "sans-serif"
        | "bold-sans-serif"
        | "sans-serif-italic"
        | "sans-serif-bold-italic"
        | "monospace"
        | "initial"
        | "tailed"
        | "looped"
        | "stretched"
      }?,
      attribute maxsize { length | "infinity" }?,
      attribute minlabelspacing { length }?,
      attribute minsize { length }?,
      attribute movablelimits { "true" | "false" }?,
      attribute mslinethickness {
        length | "thin" | "medium" | "thick"
      }?,
      attribute notation { text }?,
      attribute numalign { "left" | "center" | "right" }?,
      attribute open { text }?,
      attribute position { integer }?,
      attribute rightoverhang { length }?,
      attribute rowalign {
        list { verticalalign+ }
      }?,
      attribute rowlines {
        list { linestyle+ }
      }?,
      attribute rowspacing {
        list { length+ }
      }?,
      attribute rowspan { positive-integer }?,
      attribute rquote { text }?,
      attribute rspace { length }?,
      attribute selection { positive-integer }?,
      attribute separator { "true" | "false" }?,
      attribute separators { text }?,
      attribute shift { integer }?,
      attribute side {
        "left" | "right" | "leftoverlap" | "rightoverlap"
      }?,
      attribute stackalign {
        "left" | "center" | "right" | "decimalpoint"
      }?,
      attribute stretchy { "true" | "false" }?,
      attribute subscriptshift { length }?,
      attribute superscriptshift { length }?,
      attribute symmetric { "true" | "false" }?,
      attribute valign { length }?,
      attribute width { length }?
    mstyle.deprecatedattributes =
      DeprecatedTokenAtt,
      attribute veryverythinmathspace { length }?,
      attribute verythinmathspace { length }?,
      attribute thinmathspace { length }?,
      attribute mediummathspace { length }?,
      attribute thickmathspace { length }?,
      attribute verythickmathspace { length }?,
      attribute veryverythickmathspace { length }?
    merror = element mml:merror { merror.attributes, ImpliedMrow }
    merror.attributes = CommonAtt, CommonPresAtt
    mpadded = element mml:mpadded { mpadded.attributes, ImpliedMrow }
    mpadded.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute height { mpadded-length }?,
      attribute depth { mpadded-length }?,
      attribute width { mpadded-length }?,
      attribute lspace { mpadded-length }?,
      attribute voffset { mpadded-length }?
    mphantom = element mml:mphantom { mphantom.attributes, ImpliedMrow }
    mphantom.attributes = CommonAtt, CommonPresAtt
    mfenced =
      element mml:mfenced { mfenced.attributes, MathExpression* }
    mfenced.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute open { text }?,
      attribute close { text }?,
      attribute separators { text }?
    menclose = element mml:menclose { menclose.attributes, ImpliedMrow }
    menclose.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute notation { text }?
    msub =
      element mml:msub {
        msub.attributes, MathExpression, MathExpression
      }
    msub.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute subscriptshift { length }?
    msup =
      element mml:msup {
        msup.attributes, MathExpression, MathExpression
      }
    msup.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute superscriptshift { length }?
    msubsup =
      element mml:msubsup {
        msubsup.attributes,
        MathExpression,
        MathExpression,
        MathExpression
      }
    msubsup.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute subscriptshift { length }?,
      attribute superscriptshift { length }?
    munder =
      element mml:munder {
        munder.attributes, MathExpression, MathExpression
      }
    munder.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute accentunder { "true" | "false" }?,
      attribute align { "left" | "right" | "center" }?
    mover =
      element mml:mover {
        mover.attributes, MathExpression, MathExpression
      }
    mover.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute accent { "true" | "false" }?,
      attribute align { "left" | "right" | "center" }?
    munderover =
      element mml:munderover {
        munderover.attributes,
        MathExpression,
        MathExpression,
        MathExpression
      }
    munderover.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute accent { "true" | "false" }?,
      attribute accentunder { "true" | "false" }?,
      attribute align { "left" | "right" | "center" }?
    mmultiscripts =
      element mml:mmultiscripts {
        mmultiscripts.attributes,
        MathExpression,
        MultiScriptExpression*,
        (mprescripts, MultiScriptExpression*)?
      }
    mmultiscripts.attributes = msubsup.attributes
    mtable =
      element mml:mtable { mtable.attributes, TableRowExpression* }
    mtable.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute align {
        xsd:string {
          pattern =
            "\s*(top|bottom|center|baseline|axis)(\s+-?[0-9]+)?\s*"
        }
      }?,
      attribute rowalign {
        list { verticalalign+ }
      }?,
      attribute columnalign {
        list { columnalignstyle+ }
      }?,
      attribute groupalign { group-alignment-list-list }?,
      attribute alignmentscope {
        list { ("true" | "false")+ }
      }?,
      attribute columnwidth {
        list { ("auto" | length | "fit")+ }
      }?,
      attribute width { "auto" | length }?,
      attribute rowspacing {
        list { length+ }
      }?,
      attribute columnspacing {
        list { length+ }
      }?,
      attribute rowlines {
        list { linestyle+ }
      }?,
      attribute columnlines {
        list { linestyle+ }
      }?,
      attribute frame { linestyle }?,
      attribute framespacing {
        list { length, length }
      }?,
      attribute equalrows { "true" | "false" }?,
      attribute equalcolumns { "true" | "false" }?,
      attribute displaystyle { "true" | "false" }?,
      attribute side {
        "left" | "right" | "leftoverlap" | "rightoverlap"
      }?,
      attribute minlabelspacing { length }?
    mlabeledtr =
      element mml:mlabeledtr {
        mlabeledtr.attributes, TableCellExpression+
      }
    mlabeledtr.attributes = mtr.attributes
    mtr = element mml:mtr { mtr.attributes, TableCellExpression* }
    mtr.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute rowalign {
        "top" | "bottom" | "center" | "baseline" | "axis"
      }?,
      attribute columnalign {
        list { columnalignstyle+ }
      }?,
      attribute groupalign { group-alignment-list-list }?
    mtd = element mml:mtd { mtd.attributes, ImpliedMrow }
    mtd.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute rowspan { positive-integer }?,
      attribute columnspan { positive-integer }?,
      attribute rowalign {
        "top" | "bottom" | "center" | "baseline" | "axis"
      }?,
      attribute columnalign { columnalignstyle }?,
      attribute groupalign { group-alignment-list }?
    mstack = element mml:mstack { mstack.attributes, MstackExpression* }
    mstack.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute align {
        xsd:string {
          pattern =
            "\s*(top|bottom|center|baseline|axis)(\s+-?[0-9]+)?\s*"
        }
      }?,
      attribute stackalign {
        "left" | "center" | "right" | "decimalpoint"
      }?,
      attribute charalign { "left" | "center" | "right" }?,
      attribute charspacing { length | "loose" | "medium" | "tight" }?
    mlongdiv =
      element mml:mlongdiv {
        mlongdiv.attributes,
        MstackExpression,
        MstackExpression,
        MstackExpression+
      }
    mlongdiv.attributes =
      msgroup.attributes,
      attribute longdivstyle {
        "lefttop"
        | "stackedrightright"
        | "mediumstackedrightright"
        | "shortstackedrightright"
        | "righttop"
        | "left/\right"
        | "left)(right"
        | ":right=right"
        | "stackedleftleft"
        | "stackedleftlinetop"
      }?
    msgroup =
      element mml:msgroup { msgroup.attributes, MstackExpression* }
    msgroup.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute position { integer }?,
      attribute shift { integer }?
    msrow = element mml:msrow { msrow.attributes, MsrowExpression* }
    msrow.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute position { integer }?
    mscarries =
      element mml:mscarries {
        mscarries.attributes, (MsrowExpression | mscarry)*
      }
    mscarries.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute position { integer }?,
      attribute location {
        "w" | "nw" | "n" | "ne" | "e" | "se" | "s" | "sw"
      }?,
      attribute crossout {
        list {
          ("none"
           | "updiagonalstrike"
           | "downdiagonalstrike"
           | "verticalstrike"
           | "horizontalstrike")*
        }
      }?,
      attribute scriptsizemultiplier { number }?
    mscarry =
      element mml:mscarry { mscarry.attributes, MsrowExpression* }
    mscarry.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute location {
        "w" | "nw" | "n" | "ne" | "e" | "se" | "s" | "sw"
      }?,
      attribute crossout {
        list {
          ("none"
           | "updiagonalstrike"
           | "downdiagonalstrike"
           | "verticalstrike"
           | "horizontalstrike")*
        }
      }?
    maction =
      element mml:maction { maction.attributes, MathExpression+ }
    maction.attributes =
      CommonAtt,
      CommonPresAtt,
      attribute actiontype { text },
      attribute selection { positive-integer }?
  }
  a:documentation [ "Presentation MathML" ]
  div {
    MathExpression = semantics
    NonMathMLAtt = attribute * - (local:* | mml:*) { xsd:string }
    CommonDeprecatedAtt = attribute other { text }?
    CommonAtt =
      attribute id { xsd:ID }?,
      attribute xref { text }?,
      attribute class { xsd:NMTOKENS }?,
      attribute style { xsd:string }?,
      attribute href { xsd:anyURI }?,
      CommonDeprecatedAtt,
      NonMathMLAtt*
    math.deprecatedattributes =
      attribute mode { xsd:string }?,
      attribute macros { xsd:string }?
    name = attribute name { xsd:NCName }
    cd = attribute cd { xsd:NCName }
    src = attribute src { xsd:anyURI }?
    annotation = element mml:annotation { annotation.attributes, text }
    annotation-xml.model = (MathExpression | anyElement)*
    anyElement =
      element * - mml:* {
        (attribute * { text }
         | text
         | anyElement)*
      }
    annotation-xml =
      element mml:annotation-xml {
        annotation.attributes, annotation-xml.model
      }
    annotation.attributes = CommonAtt, cd?, name?, DefEncAtt, src?
    DefEncAtt =
      attribute encoding { xsd:string }?,
      attribute definitionURL { xsd:anyURI }?
    semantics =
      element mml:semantics {
        semantics.attributes,
        MathExpression,
        (annotation | annotation-xml)*
      }
    semantics.attributes = CommonAtt, DefEncAtt, cd?, name?
    length =
      xsd:string {
        pattern =
          "\s*((-?[0-9]*([0-9]\.?|\.[0-9])[0-9]*(e[mx]|in|cm|mm|p[xtc]|%)?)|(negative)?((very){0,2}thi(n|ck)|medium)mathspace)\s*"
      }
  }
  a:documentation [
    "math and semantics common to both Content and Presentation"
  ]
}
dhq_macro.paraContent =
  (text
   | dhq_model.phrase
   | dhq_model.inter
   | dhq_model.global
   | dhq_lg
   | dhq_model.lLike)*
dhq_macro.limitedContent =
  (text | dhq_model.limitedPhrase | dhq_model.inter)*
dhq_macro.phraseSeq =
  (text | dhq_model.attributable | dhq_model.phrase | dhq_model.global)*
dhq_macro.phraseSeq.limited =
  (text | dhq_model.limitedPhrase | dhq_model.global)*
dhq_macro.specialPara =
  (text
   | dhq_model.phrase
   | dhq_model.inter
   | dhq_model.divPart
   | dhq_model.global)*
dhq_teidata.word = xsd:token { pattern = "[^\p{C}\p{Z}]+" }
anyElement-xenoData =
  element * - (tei:* | teix:egXML) {
    attribute * { text }*,
    (text | anyElement-xenoData)*
  }
anyElement-passThroughCode =
  element * - (tei:* | teix:egXML) {
    attribute * { text }*,
    (text | anyElement-passThroughCode)*
  }
anyElement-math =
  element * - (tei:* | teix:egXML) {
    attribute * { text }*,
    (text | anyElement-math)*
  }
dhq_att.ascribed.attributes = dhq_att.ascribed.attribute.who
dhq_att.ascribed.attribute.who =
  
  ## indicates the person, or group of people, to whom the element content is ascribed.
  attribute who {
    list { xsd:anyURI+ }
  }?
dhq_att.ascribed.directed.attributes =
  dhq_att.ascribed.attributes,
  dhq_att.ascribed.directed.attribute.toWhom
dhq_att.ascribed.directed.attribute.toWhom =
  
  ## indicates the person, or group of people, to whom a speech act or action is directed.
  attribute toWhom {
    list { xsd:anyURI+ }
  }?
dhq_att.canonical.attributes =
  dhq_att.canonical.attribute.key, dhq_att.canonical.attribute.ref
dhq_att.canonical.attribute.key =
  
  ## provides an externally-defined means of identifying the entity (or entities) being named, using a coded value of some kind.
  attribute key { xsd:string }?
dhq_att.canonical.attribute.ref =
  
  ## (reference) provides an explicit means of locating a full definition or identity for the entity being named by means of one or more URIs.
  attribute ref {
    list { xsd:anyURI+ }
  }?
dhq_att.written.attributes = dhq_att.written.attribute.hand
dhq_att.written.attribute.hand =
  [
    a:documentation [
      "points to a "
      ns1:code [ "<handNote>" ]
      " element describing the hand considered responsible for the content of the element concerned."
    ]
  ]
  attribute hand { xsd:anyURI }?
dhq_att.breaking.attributes = dhq_att.breaking.attribute.break
dhq_att.breaking.attribute.break =
  
  ## indicates whether or not the element bearing this attribute should be considered to mark the end of an orthographic token in the same way as whitespace.
  attribute break {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.fragmentable.attributes = dhq_att.fragmentable.attribute.part
dhq_att.fragmentable.attribute.part =
  
  ## specifies whether or not its parent element is fragmented in some way, typically by some other overlapping structure: for example a speech which is divided between two or more verse stanzas, a paragraph which is split across a page division, a verse line which is divided between two speakers.
  [ a:defaultValue = "N" ]
  attribute part {
    
    ## (yes) the element is fragmented in some (unspecified) respect
    "Y"
    | 
      ## (no) the element is not fragmented, or no claim is made as to its completeness
      "N"
    | 
      ## (initial) this is the initial part of a fragmented element
      "I"
    | 
      ## (medial) this is a medial part of a fragmented element
      "M"
    | 
      ## (final) this is the final part of a fragmented element
      "F"
  }?
dhq_att.docStatus.attributes = dhq_att.docStatus.attribute.status
dhq_att.docStatus.attribute.status =
  
  ## describes the status of a document either currently or, when associated with a dated element, at the time indicated.
  ## Sample values include: 1] approved; 2] candidate; 3] cleared; 4] deprecated; 5] draft; 6] embargoed; 7] expired; 8] frozen; 9] galley; 10] proposed; 11] published; 12] recommendation; 13] submitted; 14] unfinished; 15] withdrawn
  [ a:defaultValue = "draft" ]
  attribute status {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.global.rendition.attributes =
  dhq_att.global.rendition.attribute.style
dhq_att.global.rendition.attribute.style =
  
  ## contains an expression in some formal style definition language which defines the rendering or presentation used for this element in the source text
  attribute style { xsd:string }?
dhq_att.global.source.attributes =
  dhq_att.global.source.attribute.source
dhq_att.global.source.attribute.source =
  
  ## specifies the source from which some aspect of this element is drawn.
  attribute source {
    list { xsd:anyURI+ }
  }?
dhq_att.global.attributes =
  dhq_att.global.rendition.attributes, dhq_att.global.source.attributes
dhq_att.internetMedia.attributes =
  dhq_att.internetMedia.attribute.mimeType
dhq_att.internetMedia.attribute.mimeType =
  
  ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
  attribute mimeType {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
dhq_att.media.attribute.width =
  
  ## Where the media are displayed, indicates the display width
  attribute width {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
dhq_att.media.attribute.height =
  
  ## Where the media are displayed, indicates the display height
  attribute height {
    xsd:token {
      pattern =
        "[\-+]?\d+(\.\d+)?(%|cm|mm|in|pt|pc|px|em|ex|gd|rem|vw|vh|vm)"
    }
  }?
dhq_att.media.attribute.scale =
  
  ## Where the media are displayed, indicates a scale factor to be applied when generating the desired display size
  attribute scale {
    xsd:double
    | xsd:token { pattern = "(\-?[\d]+/\-?[\d]+)" }
    | xsd:decimal
  }?
dhq_att.resourced.attributes = dhq_att.resourced.attribute.url
dhq_att.resourced.attribute.url =
  
  ## (uniform resource locator) specifies the URL from which the media concerned may be obtained.
  attribute url { xsd:anyURI }
dhq_att.notated.attributes = dhq_att.notated.attribute.notation
dhq_att.notated.attribute.notation =
  
  ## names the notation used for the content of the element.
  attribute notation {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.sortable.attributes = dhq_att.sortable.attribute.sortKey
dhq_att.sortable.attribute.sortKey =
  
  ## supplies the sort key for this element in an index, list or group which contains it.
  attribute sortKey {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.edition.attributes =
  dhq_att.edition.attribute.ed, dhq_att.edition.attribute.edRef
dhq_att.edition.attribute.ed =
  
  ## (edition) supplies a sigil or other arbitrary identifier for the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute ed {
    list {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
    }
  }?
dhq_att.edition.attribute.edRef =
  
  ## (edition reference) provides a pointer to the source edition in which the associated feature (for example, a page, column, or line break) occurs at this point in the text.
  attribute edRef {
    list { xsd:anyURI+ }
  }?
dhq_att.citing.attributes =
  dhq_att.citing.attribute.unit,
  dhq_att.citing.attribute.from,
  dhq_att.citing.attribute.to
dhq_att.citing.attribute.unit =
  
  ## identifies the unit of information conveyed by the element, e.g. columns, pages, volume, entry.
  ## Suggested values include: 1] volume; 2] issue; 3] page; 4] line; 5] chapter; 6] part; 7] column; 8] entry
  attribute unit {
    
    ## the element contains a volume number.
    "volume"
    | 
      ## the element contains an issue number, or volume and issue numbers.
      "issue"
    | 
      ## the element contains a page number or page range.
      "page"
    | 
      ## the element contains a line number or line range.
      "line"
    | 
      ## the element contains a chapter indication (number and/or title)
      "chapter"
    | 
      ## the element identifies a part of a book or collection.
      "part"
    | 
      ## the element identifies a column.
      "column"
    | 
      ## the element identifies an entry number or label in a list of entries.
      "entry"
    | xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.citing.attribute.from =
  [
    a:documentation [
      "specifies the starting point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute from {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_att.citing.attribute.to =
  [
    a:documentation [
      "specifies the end-point of the range of units indicated by the "
      ns1:code [ "@unit" ]
      " attribute."
    ]
  ]
  attribute to {
    xsd:token { pattern = "[^\p{C}\p{Z}]+" }
  }?
dhq_model.nameLike.agent = dhq_name
dhq_model.nameLike.agent_alternation = dhq_name
dhq_model.nameLike.agent_sequence = dhq_name
dhq_model.nameLike.agent_sequenceOptional = dhq_name?
dhq_model.nameLike.agent_sequenceOptionalRepeatable = dhq_name*
dhq_model.nameLike.agent_sequenceRepeatable = dhq_name+
dhq_model.segLike = dhq_seg
dhq_model.hiLike = dhq_hi | dhq_q
dhq_model.hiLike_alternation = dhq_hi | dhq_q
dhq_model.hiLike_sequence = dhq_hi, dhq_q
dhq_model.hiLike_sequenceOptional = dhq_hi?, dhq_q?
dhq_model.hiLike_sequenceOptionalRepeatable = dhq_hi*, dhq_q*
dhq_model.hiLike_sequenceRepeatable = dhq_hi+, dhq_q+
dhq_model.emphLike =
  dhq_foreign
  | dhq_emph
  | dhq_soCalled
  | dhq_term
  | dhq_title
  | dhq_code
dhq_model.emphLike_alternation =
  dhq_foreign
  | dhq_emph
  | dhq_soCalled
  | dhq_term
  | dhq_title
  | dhq_code
dhq_model.emphLike_sequence =
  dhq_foreign, dhq_emph, dhq_soCalled, dhq_term, dhq_title, dhq_code
dhq_model.emphLike_sequenceOptional =
  dhq_foreign?,
  dhq_emph?,
  dhq_soCalled?,
  dhq_term?,
  dhq_title?,
  dhq_code?
dhq_model.emphLike_sequenceOptionalRepeatable =
  dhq_foreign*,
  dhq_emph*,
  dhq_soCalled*,
  dhq_term*,
  dhq_title*,
  dhq_code*
dhq_model.emphLike_sequenceRepeatable =
  dhq_foreign+,
  dhq_emph+,
  dhq_soCalled+,
  dhq_term+,
  dhq_title+,
  dhq_code+
dhq_model.highlighted = dhq_model.hiLike | dhq_model.emphLike
dhq_model.dateLike = dhq_date
dhq_model.dateLike_alternation = dhq_date
dhq_model.dateLike_sequence = dhq_date
dhq_model.dateLike_sequenceOptional = dhq_date?
dhq_model.dateLike_sequenceOptionalRepeatable = dhq_date*
dhq_model.dateLike_sequenceRepeatable = dhq_date+
dhq_model.measureLike = dhq_unit
dhq_model.measureLike_alternation = dhq_unit
dhq_model.measureLike_sequence = dhq_unit
dhq_model.measureLike_sequenceOptional = dhq_unit?
dhq_model.measureLike_sequenceOptionalRepeatable = dhq_unit*
dhq_model.measureLike_sequenceRepeatable = dhq_unit+
dhq_model.egLike = dhq_eg
dhq_model.egLike_alternation = dhq_eg
dhq_model.egLike_sequence = dhq_eg
dhq_model.egLike_sequenceOptional = dhq_eg?
dhq_model.egLike_sequenceOptionalRepeatable = dhq_eg*
dhq_model.egLike_sequenceRepeatable = dhq_eg+
dhq_model.graphicLike = dhq_media | dhq_graphic | dhq_formula
dhq_model.offsetLike = notAllowed
dhq_model.offsetLike_alternation = notAllowed
dhq_model.offsetLike_sequence = empty
dhq_model.offsetLike_sequenceOptional = empty
dhq_model.offsetLike_sequenceOptionalRepeatable = empty
dhq_model.offsetLike_sequenceRepeatable = notAllowed
dhq_model.pPart.msdesc = notAllowed
dhq_model.pPart.editorial = notAllowed
dhq_model.ptrLike = dhq_ptr | dhq_ref
dhq_model.lPart = notAllowed
dhq_model.global.meta = notAllowed
dhq_model.milestoneLike = dhq_gb | dhq_lb | dhq_anchor
dhq_model.oddDecl = notAllowed
dhq_model.oddDecl_alternation = notAllowed
dhq_model.oddDecl_sequence = empty
dhq_model.oddDecl_sequenceOptional = empty
dhq_model.oddDecl_sequenceOptionalRepeatable = empty
dhq_model.oddDecl_sequenceRepeatable = notAllowed
dhq_model.phrase.xml = dhq_att | dhq_gi | dhq_val
dhq_model.specDescLike = notAllowed
dhq_model.biblLike = dhq_bibl | dhq_listBibl
dhq_model.biblLike_alternation = dhq_bibl | dhq_listBibl
dhq_model.biblLike_sequence = dhq_bibl, dhq_listBibl
dhq_model.biblLike_sequenceOptional = dhq_bibl?, dhq_listBibl?
dhq_model.biblLike_sequenceOptionalRepeatable = dhq_bibl*, dhq_listBibl*
dhq_model.biblLike_sequenceRepeatable = dhq_bibl+, dhq_listBibl+
dhq_model.headLike = dhq_head
dhq_model.headLike_alternation = dhq_head
dhq_model.headLike_sequence = dhq_head
dhq_model.headLike_sequenceOptional = dhq_head?
dhq_model.headLike_sequenceOptionalRepeatable = dhq_head*
dhq_model.headLike_sequenceRepeatable = dhq_head+
dhq_model.labelLike = dhq_desc | dhq_label
dhq_model.listLike = dhq_list | dhq_table
dhq_model.listLike_alternation = dhq_list | dhq_table
dhq_model.listLike_sequence = dhq_list, dhq_table
dhq_model.listLike_sequenceOptional = dhq_list?, dhq_table?
dhq_model.listLike_sequenceOptionalRepeatable = dhq_list*, dhq_table*
dhq_model.listLike_sequenceRepeatable = dhq_list+, dhq_table+
dhq_model.noteLike = dhq_note | dhq_caption
dhq_model.lLike = dhq_l
dhq_model.lLike_alternation = dhq_l
dhq_model.lLike_sequence = dhq_l
dhq_model.lLike_sequenceOptional = dhq_l?
dhq_model.lLike_sequenceOptionalRepeatable = dhq_l*
dhq_model.lLike_sequenceRepeatable = dhq_l+
dhq_model.pLike = dhq_p | dhq_ab
dhq_model.pLike_alternation = dhq_p | dhq_ab
dhq_model.pLike_sequence = dhq_p, dhq_ab
dhq_model.pLike_sequenceOptional = dhq_p?, dhq_ab?
dhq_model.pLike_sequenceOptionalRepeatable = dhq_p*, dhq_ab*
dhq_model.pLike_sequenceRepeatable = dhq_p+, dhq_ab+
dhq_model.stageLike = dhq_stage
dhq_model.stageLike_alternation = dhq_stage
dhq_model.stageLike_sequence = dhq_stage
dhq_model.stageLike_sequenceOptional = dhq_stage?
dhq_model.stageLike_sequenceOptionalRepeatable = dhq_stage*
dhq_model.stageLike_sequenceRepeatable = dhq_stage+
dhq_model.global.edit = notAllowed
dhq_model.divPart = dhq_model.lLike | dhq_model.pLike | dhq_lg | dhq_sp
dhq_model.placeNamePart = notAllowed
dhq_model.publicationStmtPart.agency = dhq_publisher
dhq_model.publicationStmtPart.detail =
  dhq_model.ptrLike
  | dhq_address
  | dhq_date
  | dhq_pubPlace
  | dhq_idno
  | dhq_availability
  | dhq_articleType
  | dhq_revisionNote
dhq_model.descLike = dhq_desc
dhq_model.glossLike = notAllowed
dhq_model.quoteLike = dhq_quote | dhq_cit
dhq_model.quoteLike_alternation = dhq_quote | dhq_cit
dhq_model.quoteLike_sequence = dhq_quote, dhq_cit
dhq_model.quoteLike_sequenceOptional = dhq_quote?, dhq_cit?
dhq_model.quoteLike_sequenceOptionalRepeatable = dhq_quote*, dhq_cit*
dhq_model.quoteLike_sequenceRepeatable = dhq_quote+, dhq_cit+
dhq_model.attributable =
  dhq_model.quoteLike | dhq_said | dhq_floatingText
dhq_model.attributable_alternation =
  dhq_model.quoteLike_alternation | dhq_said | dhq_floatingText
dhq_model.attributable_sequence =
  dhq_model.quoteLike_sequence, dhq_said, dhq_floatingText
dhq_model.attributable_sequenceOptional =
  dhq_model.quoteLike_sequenceOptional?, dhq_said?, dhq_floatingText?
dhq_model.attributable_sequenceOptionalRepeatable =
  dhq_model.quoteLike_sequenceOptionalRepeatable*,
  dhq_said*,
  dhq_floatingText*
dhq_model.attributable_sequenceRepeatable =
  dhq_model.quoteLike_sequenceRepeatable+, dhq_said+, dhq_floatingText+
dhq_model.respLike =
  dhq_author
  | dhq_editor
  | dhq_meeting
  | dhq_sponsor
  | dhq_authorInfo
  | dhq_translatorInfo
dhq_model.divWrapper = dhq_dateline | dhq_epigraph | dhq_salute
dhq_model.divTopPart = dhq_model.headLike | dhq_signed | dhq_dedication
dhq_model.divTop = dhq_model.divWrapper | dhq_model.divTopPart
dhq_model.divBottomPart = dhq_trailer | dhq_signed | dhq_postscript
dhq_model.divBottom = dhq_model.divWrapper | dhq_model.divBottomPart
dhq_model.imprintPart = dhq_publisher | dhq_biblScope | dhq_pubPlace
dhq_model.addressLike = dhq_email | dhq_address
dhq_model.nameLike =
  dhq_model.nameLike.agent | dhq_model.offsetLike | dhq_idno
dhq_model.nameLike_alternation =
  dhq_model.nameLike.agent_alternation
  | dhq_model.offsetLike_alternation
  | dhq_idno
dhq_model.nameLike_sequence =
  dhq_model.nameLike.agent_sequence,
  dhq_model.offsetLike_sequence,
  dhq_idno
dhq_model.nameLike_sequenceOptional =
  dhq_model.nameLike.agent_sequenceOptional?,
  dhq_model.offsetLike_sequenceOptional?,
  dhq_idno?
dhq_model.nameLike_sequenceOptionalRepeatable =
  dhq_model.nameLike.agent_sequenceOptionalRepeatable*,
  dhq_model.offsetLike_sequenceOptionalRepeatable*,
  dhq_idno*
dhq_model.nameLike_sequenceRepeatable =
  dhq_model.nameLike.agent_sequenceRepeatable+,
  dhq_model.offsetLike_sequenceRepeatable+,
  dhq_idno+
dhq_model.global =
  dhq_model.global.meta
  | dhq_model.global.edit
  | dhq_notatedMusic
  | dhq_figure
dhq_model.biblPart =
  dhq_model.respLike
  | dhq_model.imprintPart
  | dhq_series
  | dhq_citedRange
  | dhq_bibl
  | dhq_textLang
  | dhq_availability
dhq_model.addrPart = dhq_model.nameLike
dhq_model.pPart.data =
  dhq_model.dateLike | dhq_model.measureLike | dhq_model.nameLike
dhq_model.inter =
  dhq_model.egLike
  | dhq_model.oddDecl
  | dhq_model.biblLike
  | dhq_model.listLike
  | dhq_model.stageLike
  | dhq_model.attributable
  | dhq_passThroughCode
  | dhq_example
dhq_model.common =
  dhq_model.divPart | dhq_model.inter | dhq_q | dhq_note
dhq_model.phrase =
  dhq_model.segLike
  | dhq_model.highlighted
  | dhq_model.graphicLike
  | dhq_model.pPart.msdesc
  | dhq_model.ptrLike
  | dhq_model.lPart
  | dhq_model.milestoneLike
  | dhq_model.phrase.xml
  | dhq_model.specDescLike
  | dhq_model.labelLike
  | dhq_model.noteLike
  | dhq_model.pPart.data
  | dhq_q
dhq_model.limitedPhrase =
  dhq_model.hiLike
  | dhq_model.emphLike
  | dhq_model.pPart.msdesc
  | dhq_model.pPart.editorial
  | dhq_model.ptrLike
  | dhq_model.phrase.xml
  | dhq_model.pPart.data
dhq_model.divLike = dhq_div | dhq_abstract | dhq_teaser
dhq_model.annotationLike = dhq_note | dhq_annotation
dhq_model.annotationPart.body = dhq_ptr | dhq_ref | dhq_note
dhq_model.teiHeaderPart =
  dhq_encodingDesc | dhq_profileDesc | dhq_xenoData
dhq_model.encodingDescPart =
  dhq_schemaRef | dhq_listPrefixDef | dhq_classDecl | dhq_unitDecl
dhq_model.profileDescPart =
  dhq_creation
  | dhq_langUsage
  | dhq_textClass
  | dhq_calendarDesc
  | dhq_correspDesc
dhq_model.standOffPart =
  dhq_model.global.meta
  | dhq_model.biblLike
  | dhq_model.listLike
  | dhq_model.annotationLike
  | dhq_listChange
  | dhq_seg
  | dhq_listAnnotation
dhq_att.formula.attributes = dhq_att.formula.attribute.formula
dhq_att.formula.attribute.formula =
  [
    a:documentation [
      "An "
      ns1:code [ "@formula" ]
      " is provided to describe a mathematical calculation such as a conversion between measurement systems."
    ]
  ]
  attribute formula { text }?
dhq_model.correspActionPart =
  dhq_model.dateLike
  | dhq_model.addressLike
  | dhq_model.nameLike
  | dhq_note
dhq_model.correspContextPart =
  dhq_model.ptrLike | dhq_model.pLike | dhq_note
dhq_model.correspDescPart =
  dhq_note | dhq_correspAction | dhq_correspContext
dhq_model.resource = dhq_text | dhq_standOff
dhq_p =
  
  ## (paragraph) marks paragraphs in prose. [3.1. Paragraphs 7.2.5. Speech Contents]
  element tei:p {
    dhq_macro.paraContent
    >> sch:pattern [
         id = "dhq-p-abstractModel-structure-p-constraint-report-1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum                |parent::tei:item                |parent::tei:note                |parent::tei:q                |parent::tei:quote                |parent::tei:remarks                |parent::tei:said                |parent::tei:sp                |parent::tei:stage                |parent::tei:cell                |parent::tei:figure                )"
             "\x{a}" ~
             "        Abstract model violation: Paragraphs may not occur inside other paragraphs or ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dhq-p-abstractModel-structure-l-constraint-report-2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:p"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:p[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div, p, or ab.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.fragmentable.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_foreign =
  
  ## identifies a word or phrase as belonging to some language other than that of the surrounding text. [3.3.2.1. Foreign Words or Expressions]
  element tei:foreign {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    
    ## Identifies the language of the element's content
    attribute xml:lang { text }?,
    empty
  }
dhq_emph =
  
  ## (emphasized) marks words or phrases which are stressed or emphasized for linguistic or rhetorical effect. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element tei:emph {
    dhq_macro.paraContent, dhq_att.global.attributes, empty
  }
dhq_hi =
  
  ## (highlighted) marks a word or phrase as graphically distinct from the surrounding text, for reasons concerning which no claim is made. [3.3.2.2. Emphatic Words and Phrases 3.3.2. Emphasis, Foreign Words, and Unusual Language]
  element tei:hi {
    dhq_macro.paraContent,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ## Describes the presentation of the highlighted material.
    attribute rend {
      
      ## The designated content is intended to be rendered in bold type.
      "bold"
      | 
        ## The designated content is intended to be rendered in italic type.
        "italic"
      | 
        ## The designated content is intended to be rendered in monospace type.
        "monospace"
      | 
        ## The designated content is intended to be rendered within quotation marks. The nesting of single and double quotation marks will be handled by the stylesheet.
        "quotes"
      | 
        ## The designated content is intended to be rendered in small capital letters.
        "smcaps"
      | 
        ## The designated content is intended to be rendered as a subscript.
        "subscript"
      | 
        ## The designated content is intended to be rendered as a superscript.
        "superscript"
      | 
        ## The designated content is intended to be rendered with an underline.
        "underlined"
      | 
        ## The designated content is intended to be rendered with a strikethrough.
        "strikethrough"
    }?,
    empty
  }
dhq_said =
  
  ## (speech or thought) indicates passages thought or spoken aloud, whether explicitly indicated in the source or not, whether directly or indirectly reported, whether by real people or fictional characters. [3.3.3. Quotation]
  element tei:said {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    dhq_att.ascribed.directed.attributes,
    empty
  }
dhq_quote =
  
  ## (quotation) contains a phrase or passage attributed by the narrator or author to some agency external to the text. [3.3.3. Quotation 4.3.1. Grouped Texts]
  element tei:quote {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    dhq_att.notated.attributes,
    
    ## Describes the presentation of the quoted material, whether inline or set as a block.
    attribute rend {
      
      ## Designates an inline quotation (i.e. one that is flowed into the surrounding text rather than set off from it), typically containing text and inline elements.
      "inline"
      | 
        ## Designates a block quotation, typically containing one or more paragraphs or other chunky things.
        "block"
    },
    
    ##
    attribute xml:lang { text }?,
    empty
  }
dhq_q =
  
  ## (quoted) contains material which is distinguished from the surrounding text using quotation marks or a similar method, for any one of a variety of reasons including, but not limited to: direct speech or thought, technical terms or jargon, authorial distance, quotations from elsewhere, and passages that are mentioned but not used. [3.3.3. Quotation]
  element tei:q {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    dhq_att.ascribed.directed.attributes,
    empty
  }
dhq_cit =
  
  ## (cited quotation) contains a quotation from some other document, together with a bibliographic reference to its source. In a dictionary it may contain an example text with at least one occurrence of the word form, used in the sense being described, or a translation of the headword, or an example. [3.3.3. Quotation 4.3.1. Grouped Texts 9.3.5.1. Examples]
  element tei:cit {
    (dhq_quote,
     (dhq_citRef | (dhq_ptr | dhq_ref | dhq_bibl | text)*)),
    dhq_att.global.attributes,
    empty
  }
dhq_soCalled =
  
  ## contains a word or phrase for which the author or narrator indicates a disclaiming of responsibility, for example by the use of scare quotes or italics. [3.3.3. Quotation]
  element tei:soCalled {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_desc =
  
  ## (description) contains a brief description of the object documented by its parent element, typically a documentation element or an entity. [22.4.1. Description of Components]
  element tei:desc {
    dhq_macro.limitedContent
    >> sch:pattern [
         id =
           "dhq-desc-deprecationInfo-only-in-deprecated-constraint-rule-1"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:desc[ @type eq 'deprecationInfo']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "../@validUntil"
             "Information about a\x{a}" ~
             "        deprecation should only be present in a specification element\x{a}" ~
             "        that is being deprecated: that is, only an element that has a\x{a}" ~
             "        @validUntil attribute should have a child <desc\x{a}" ~
             '        type="deprecationInfo">.'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    empty
  }
dhq_term =
  
  ## contains a single-word, multi-word, or symbolic designation which is regarded as a technical term. [3.3.4. Terms, Glosses, Equivalents, and Descriptions]
  element tei:term {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    
    ##
    attribute xml:lang { text }?,
    empty
  }
dhq_name =
  
  ## (name, proper noun) contains a proper noun or noun phrase. [3.5.1. Referring Strings]
  element tei:name {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    
    ## Specifies the role of the person named in relation to the bibliographic object.
    ## Suggested values include: 1] translator; 2] editor; 3] illustrator; 4] annotator; 5] programmer
    attribute role {
      
      ##
      "translator"
      | 
        ##
        "editor"
      | 
        ##
        "illustrator"
      | 
        ##
        "annotator"
      | 
        ##
        "programmer"
      | xsd:Name
    }?,
    empty
  }
dhq_email =
  
  ## (electronic mail address) contains an email address identifying a location to which email messages can be delivered. [3.5.2. Addresses]
  element tei:email {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_address =
  
  ## contains a postal address, for example of a publisher, an organization, or an individual. [3.5.2. Addresses 2.2.4. Publication, Distribution, Licensing, etc. 3.11.2.4. Imprint, Size of a Document, and Reprint Information]
  element tei:address {
    (dhq_model.global*, (dhq_model.addrPart, dhq_model.global*)+),
    dhq_att.global.attributes,
    empty
  }
dhq_unit =
  
  ## contains a symbol, a word or a phrase referring to a unit of measurement in any kind of formal or informal system. [3.5.3. Numbers and
  ## Measures]
  element tei:unit {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_date =
  
  ## contains a date in any format. [3.5.4. Dates and Times 2.2.4. Publication, Distribution, Licensing, etc. 2.6. The Revision Description 3.11.2.4. Imprint, Size of a Document, and Reprint Information 15.2.3. The Setting Description 13.3.7. Dates and Times]
  element tei:date {
    (text | dhq_model.phrase | dhq_model.global)*,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    
    ## Provides a date in regularized format.
    attribute when { text }?,
    empty
  }
dhq_ptr =
  
  ## (pointer) defines a pointer to another location. [3.6. Simple Links and Cross-References 16.1. Links]
  element tei:ptr {
    empty
    >> sch:pattern [
         id = "dhq-ptr-ptrAtts-constraint-report-3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ptr"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "attributes @target and @cRef may be supplied on "
             sch:name [ ]
             "."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.internetMedia.attributes,
    
    ## Provides a pointer to a bibliographic citation.
    attribute target { xsd:anyURI }?,
    
    ## The value will typically be either a numeric page reference or page range, or else a section number (which may be numeric or alphabetic, or may conceivably use some other ordering system)
    attribute loc { text }?,
    empty
  }
dhq_ref =
  
  ## (reference) defines a reference to another location, possibly modified by additional text or comment. [3.6. Simple Links and Cross-References 16.1. Links]
  element tei:ref {
    dhq_macro.paraContent
    >> sch:pattern [
         id = "dhq-ref-refAtts-constraint-report-4"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ref"
           "\x{a}" ~
           "               "
           sch:report [
             test = "@target and @cRef"
             "Only one of the\x{a}" ~
             "	attributes @target' and @cRef' may be supplied on "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.internetMedia.attributes,
    
    ## Provides a pointer to a bibliographic citation.
    attribute target { xsd:anyURI }?,
    
    ## The value will typically be either a numeric page reference or page range, or else a section number (which may be numeric or alphabetic, or may conceivably use some other ordering system)
    attribute loc { text }?,
    
    ## Provides a classification of the reference
    attribute type {
      
      ## Indicates that the reference in question does not have a linked target.
      "offline"
    }?,
    empty
  }
dhq_list =
  
  ## contains any sequence of items organized as a list. [3.7. Lists]
  element tei:list {
    (dhq_model.divTop*, dhq_item+)
    >> sch:pattern [
         id = "dhq-list-gloss-list-must-have-labels-constraint-rule-2"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:list[@type='gloss']"
           "\x{a}" ~
           "	              "
           sch:assert [
             test = "tei:label"
             'The content of a "gloss" list should include a sequence of one or more pairs of a label element followed by an item element'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    
    ## Classifies the element.
    attribute type {
      
      ## A numbered list
      "ordered"
      | 
        ## A bulleted list
        "unordered"
      | 
        ## A list with no numbering or bullets
        "simple"
      | 
        ## A gloss list, assumes the presence of a label preceding the item.
        "gloss"
      | [
          a:documentation [
            "An annotated bibliography, assumes the presence of a "
            ns1:code [ "<bibl>" ]
            " within "
            ns1:code [ "<label>" ]
            "."
          ]
        ]
        "annotated_bibliography"
    }?,
    empty
  }
dhq_item =
  
  ## contains one component of a list. [3.7. Lists 2.6. The Revision Description]
  element tei:item {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    empty
  }
dhq_label =
  
  ## contains any label or heading used to identify part of a text, typically but not exclusively in a list or glossary. [3.7. Lists]
  element tei:label {
    (dhq_macro.phraseSeq | dhq_bibl | dhq_q)*,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_head =
  
  ## (heading) contains any type of heading, for example the title of a section, or the heading of a list, glossary, manuscript description, etc. [4.2.1. Headings and Trailers]
  element tei:head {
    (text
     | dhq_model.hiLike
     | dhq_model.dateLike
     | dhq_model.nameLike
     | dhq_model.emphLike
     | dhq_model.phrase.xml
     | dhq_model.ptrLike
     | dhq_model.inter
     | dhq_quote
     | dhq_said
     | dhq_q
     | dhq_note)*,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_note =
  
  ## contains a note or annotation. [3.8.1. Notes and Simple Annotation 2.2.6. The Notes Statement 3.11.2.8. Notes and Statement of Language 9.3.5.4. Notes within Entries]
  element tei:note {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ## Provides a unique identifier for the note
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_media =
  
  ## indicates the location of any form of external media such as an audio or video clip etc. [3.9. Graphics and Other Non-textual Components]
  element tei:media {
    dhq_model.descLike*,
    dhq_att.global.attributes,
    dhq_att.media.attribute.width,
    dhq_att.media.attribute.height,
    dhq_att.media.attribute.scale,
    dhq_att.resourced.attributes,
    
    ## (MIME media type) specifies the applicable multimedia internet mail extension (MIME) media type
    attribute mimeType {
      list {
        xsd:token { pattern = "[^\p{C}\p{Z}]+" }+
      }
    },
    empty
  }
dhq_graphic =
  
  ## indicates the location of a graphic or illustration, either forming part of a text, or providing an image of it. [3.9. Graphics and Other Non-textual Components 11.1. Digital Facsimiles]
  element tei:graphic {
    dhq_model.descLike*,
    dhq_att.global.attributes,
    dhq_att.internetMedia.attribute.mimeType,
    dhq_att.resourced.attributes,
    
    ## Classifies the type of graphic object.
    attribute type {
      
      ## A link to a video file
      "video"
    }?,
    empty
  }
dhq_gb =
  
  ## (gathering beginning) marks the beginning of a new gathering or quire in a transcribed codex. [3.10.3. Milestone
  ## Elements]
  element tei:gb {
    empty,
    dhq_att.global.attributes,
    dhq_att.breaking.attributes,
    dhq_att.edition.attributes,
    empty
  }
dhq_lb =
  
  ## (line beginning) marks the beginning of a new (typographic) line in some edition or version of a text. [3.10.3. Milestone
  ## Elements 7.2.5. Speech Contents]
  element tei:lb {
    empty,
    dhq_att.global.attributes,
    dhq_att.edition.attribute.edRef,
    dhq_att.breaking.attributes,
    empty
  }
dhq_series =
  
  ## (series information) contains information about the series in which a book or other bibliographic item has appeared. [3.11.2.1. Analytic, Monographic, and Series Levels]
  element tei:series {
    (text
     | dhq_title
     | dhq_model.ptrLike
     | dhq_editor
     | dhq_biblScope
     | dhq_idno
     | dhq_textLang
     | dhq_model.global
     | dhq_availability)*,
    dhq_att.global.attributes,
    empty
  }
dhq_author =
  
  ## in a bibliographic reference, contains the name(s) of an author, personal or corporate, of a work; for example in the same form as that provided by a recognized bibliographic name authority. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement]
  element tei:author {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_editor =
  
  ## contains a secondary statement of responsibility for a bibliographic item, for example the name of an individual, institution or organization, (or of several such) acting as editor, compiler, translator, etc. [3.11.2.2. Titles, Authors, and Editors]
  element tei:editor {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_title =
  
  ## contains a title for any kind of work. [3.11.2.2. Titles, Authors, and Editors 2.2.1. The Title Statement 2.2.5. The Series Statement]
  element tei:title {
    dhq_macro.paraContent,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    [
      a:documentation [
        "The "
        ns1:code [ "@type" ]
        " attribute is to be used in the header to designate and distinguish the article and issue titles."
      ]
    ]
    attribute type {
      
      ##
      "article"
      | 
        ##
        "issue"
    }?,
    
    ## Identifies the language of the element's content
    attribute xml:lang { text }?,
    
    ## Describes the presentation of a title in the main body of the text and in the bibliography.
    attribute rend {
      
      ##
      "italic"
      | 
        ##
        "none"
      | 
        ##
        "quotes"
    }?,
    empty
  }
dhq_meeting =
  
  ## contains the formalized descriptive title for a meeting or conference, for use in a bibliographic description for an item derived from such a meeting, or as a heading or preamble to publications emanating from it. [3.11.2.2. Titles, Authors, and Editors]
  element tei:meeting {
    dhq_macro.limitedContent,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    empty
  }
dhq_publisher =
  
  ## provides the name of the organization responsible for the publication or distribution of a bibliographic item. [3.11.2.4. Imprint, Size of a Document, and Reprint Information 2.2.4. Publication, Distribution, Licensing, etc.]
  element tei:publisher {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    empty
  }
dhq_biblScope =
  
  ## (scope of bibliographic reference) defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work. [3.11.2.5. Scopes and Ranges in Bibliographic Citations]
  element tei:biblScope {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    dhq_att.citing.attribute.unit,
    empty
  }
dhq_citedRange =
  
  ## (cited range) defines the range of cited content, often represented by pages or other units [3.11.2.5. Scopes and Ranges in Bibliographic Citations]
  element tei:citedRange {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    dhq_att.citing.attributes,
    empty
  }
dhq_pubPlace =
  
  ## (publication place) contains the name of the place where a bibliographic item was published. [3.11.2.4. Imprint, Size of a Document, and Reprint Information]
  element tei:pubPlace {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_bibl =
  
  ## (bibliographic citation) contains a loosely-structured bibliographic citation of which the sub-components may or may not be explicitly tagged. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element tei:bibl {
    (text
     | dhq_model.highlighted
     | dhq_model.pPart.data
     | dhq_model.segLike
     | dhq_model.ptrLike
     | dhq_model.biblPart
     | dhq_model.global)*,
    dhq_att.canonical.attributes,
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    dhq_att.docStatus.attributes,
    
    ## provides a reference to a centralized bibliography
    attribute biblioID { text }?,
    
    ## Provides a label for use in generated bibliographies.
    attribute label { text }?,
    
    ## Provides a unique identifier for the bibliographic item
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_listBibl =
  
  ## (citation list) contains a list of bibliographic citations of any kind. [3.11.1. Methods of Encoding Bibliographic References and Lists of References 2.2.7. The Source Description 15.3.2. Declarable Elements]
  element tei:listBibl {
    (dhq_model.headLike*,
     dhq_desc*,
     (dhq_model.biblLike | dhq_model.milestoneLike)+,
     empty*),
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    empty
  }
dhq_l =
  
  ## (verse line) contains a single, possibly incomplete, line of verse. [3.12.1. Core Tags for Verse 3.12. Passages of Verse or Drama 7.2.5. Speech Contents]
  element tei:l {
    ((text | dhq_model.phrase | dhq_model.inter | dhq_model.global)*)
    >> sch:pattern [
         id = "dhq-l-abstractModel-structure-l-constraint-report-5"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:l"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:l[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain lines or lg elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    empty
  }
dhq_lg =
  
  ## (line group) contains one or more verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc. [3.12.1. Core Tags for Verse 3.12. Passages of Verse or Drama 7.2.5. Speech Contents]
  element tei:lg {
    ((dhq_model.divTop | dhq_model.global)*,
     (dhq_model.lLike
      | dhq_model.stageLike
      | dhq_model.labelLike
      | dhq_lg),
     (dhq_model.lLike
      | dhq_model.stageLike
      | dhq_model.labelLike
      | dhq_model.global
      | dhq_lg)*,
     (dhq_model.divBottom, dhq_model.global*)*)
    >> sch:pattern [
         id = "dhq-lg-atleast1oflggapl-constraint-assert-3"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::tei:lg|descendant::tei:l|descendant::tei:gap) > 0"
             "An lg element\x{a}" ~
             "        must contain at least one child l, lg, or gap element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dhq-lg-abstractModel-structure-l-constraint-report-6"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:lg"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:l[not(.//tei:note//tei:lg[. = current()])]"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain line groups.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    empty
  }
dhq_sp =
  
  ## (speech) contains an individual speech in a performance text, or a passage presented as such in a prose or verse text. [3.12.2. Core Tags for Drama 3.12. Passages of Verse or Drama 7.2.2. Speeches and Speakers]
  element tei:sp {
    (dhq_model.global*,
     (dhq_speaker, dhq_model.global*)?,
     ((dhq_lg
       | dhq_model.lLike
       | dhq_model.pLike
       | dhq_model.listLike
       | dhq_model.stageLike
       | dhq_model.attributable),
      (dhq_model.global* | dhq_q))+),
    dhq_att.global.attributes,
    dhq_att.ascribed.directed.attributes,
    empty
  }
dhq_speaker =
  
  ## contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment. [3.12.2. Core Tags for Drama]
  element tei:speaker {
    dhq_macro.phraseSeq, dhq_att.global.attributes, empty
  }
dhq_stage =
  
  ## (stage direction) contains any kind of stage direction within a dramatic text or fragment. [3.12.2. Core Tags for Drama 3.12. Passages of Verse or Drama 7.2.4. Stage Directions]
  element tei:stage {
    dhq_macro.specialPara,
    dhq_att.ascribed.directed.attributes,
    dhq_att.global.attributes,
    empty
  }
dhq_textLang =
  
  ## (text language) describes the languages and writing systems identified within the bibliographic work being described, rather than its description. [3.11.2.4. Imprint, Size of a Document, and Reprint Information 10.6.6. Languages and Writing Systems]
  element tei:textLang {
    dhq_macro.phraseSeq,
    dhq_att.global.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute mainLang {
      xsd:language
      | (
         ##
         "")
    }?,
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute otherLangs {
      list {
        (xsd:language
         | (
            ##
            ""))*
      }
    }?,
    empty
  }
dhq_att.patternReplacement.attributes =
  dhq_att.patternReplacement.attribute.matchPattern,
  dhq_att.patternReplacement.attribute.replacementPattern
dhq_att.patternReplacement.attribute.matchPattern =
  
  ## specifies a regular expression against which the values of other attributes can be matched.
  attribute matchPattern { xsd:token }
dhq_att.patternReplacement.attribute.replacementPattern =
  [
    a:documentation [
      "specifies a replacement pattern, that is, the skeleton of a relative or absolute URI containing references to groups in the "
      ns1:code [ "@matchPattern" ]
      " which, once subpattern substitution has been performed, complete the URI."
    ]
  ]
  attribute replacementPattern { text }
dhq_teiHeader =
  
  ## (TEI header) supplies descriptive and declarative metadata associated with a digital resource or set of resources. [2.1.1. The TEI Header and Its Components 15.1. Varieties of Composite Text]
  element tei:teiHeader {
    (dhq_fileDesc, dhq_model.teiHeaderPart*, dhq_revisionDesc?),
    dhq_att.global.attributes,
    empty
  }
dhq_fileDesc =
  
  ## (file description) contains a full bibliographic description of an electronic file. [2.2. The File Description 2.1.1. The TEI Header and Its Components]
  element tei:fileDesc {
    ((dhq_titleStmt, dhq_publicationStmt), dhq_sourceDesc+),
    dhq_att.global.attributes,
    empty
  }
dhq_titleStmt =
  
  ## (title statement) groups information about the title of a work and those responsible for its content. [2.2.1. The Title Statement 2.2. The File Description]
  element tei:titleStmt {
    (dhq_title+, dhq_model.respLike*), dhq_att.global.attributes, empty
  }
dhq_sponsor =
  
  ## specifies the name of a sponsoring organization or institution. [2.2.1. The Title Statement]
  element tei:sponsor {
    dhq_macro.phraseSeq.limited,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    empty
  }
dhq_publicationStmt =
  
  ## (publication statement) groups information concerning the publication or distribution of an electronic or other text. [2.2.4. Publication, Distribution, Licensing, etc. 2.2. The File Description]
  element tei:publicationStmt {
    ((dhq_model.publicationStmtPart.agency,
      dhq_model.publicationStmtPart.detail*)+
     | dhq_model.pLike+),
    dhq_att.global.attributes,
    empty
  }
dhq_idno =
  
  ## (identifier) supplies any form of identifier used to identify some object, such as a bibliographic item, a person, a title, an organization, etc. in a standardized way. [13.3.1. Basic Principles 2.2.4. Publication, Distribution, Licensing, etc. 2.2.5. The Series Statement 3.11.2.4. Imprint, Size of a Document, and Reprint Information]
  element tei:idno {
    (text | dhq_idno)*,
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    
    ##
    attribute type {
      
      ## used for the DHQ article ID
      "DHQarticle-id"
      | 
        ## used for the volume number
        "volume"
      | 
        ## used for the issue number
        "issue"
    }?,
    empty
  }
dhq_availability =
  
  ## supplies information about the availability of a text, for example any restrictions on its use or distribution, its copyright status, any licence applying to it, etc. [2.2.4. Publication, Distribution, Licensing, etc.]
  element tei:availability {
    dhq_License,
    dhq_att.global.attributes,
    
    ## supplies a code identifying the current availability of the text.
    attribute status {
      
      ## the text is freely available.
      "free"
      | 
        ## the status of the text is unknown.
        "unknown"
      | 
        ## the text is not freely available.
        "restricted"
    }?,
    empty
  }
dhq_licence =
  
  ## contains information about a licence or other legal agreement applicable to the text. [2.2.4. Publication, Distribution, Licensing, etc.]
  element tei:licence {
    dhq_macro.specialPara, dhq_att.global.attributes, empty
  }
dhq_sourceDesc =
  
  ## (source description) describes the source(s) from which an electronic text was derived or generated, typically a bibliographic description in the case of a digitized text, or a phrase such as "born digital" for a text which has no previous existence. [2.2.7. The Source Description]
  element tei:sourceDesc {
    (dhq_model.pLike+ | (dhq_model.biblLike | dhq_model.listLike)+),
    dhq_att.global.attributes,
    empty
  }
dhq_encodingDesc =
  
  ## (encoding description) documents the relationship between an electronic text and the source or sources from which it was derived. [2.3. The Encoding Description 2.1.1. The TEI Header and Its Components]
  element tei:encodingDesc {
    (dhq_model.encodingDescPart | dhq_model.pLike)+,
    dhq_att.global.attributes,
    empty
  }
dhq_schemaRef =
  
  ## (schema reference) describes or points to a related customization or schema file [2.3.10. The Schema Specification]
  element tei:schemaRef {
    dhq_model.descLike?,
    dhq_att.global.attributes,
    dhq_att.resourced.attributes,
    
    ## the identifier used for the customization or schema
    attribute key { xsd:NCName }?,
    empty
  }
dhq_prefixDef =
  
  ## (prefix definition) defines a prefixing scheme used in teidata.pointer values, showing how abbreviated URIs using the scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element tei:prefixDef {
    dhq_model.pLike*,
    dhq_att.global.attributes,
    dhq_att.patternReplacement.attributes,
    
    ## supplies a name which functions as the prefix for an abbreviated pointing scheme such as a private URI scheme. The prefix constitutes the text preceding the first colon.
    attribute ident {
      xsd:token { pattern = "[a-z][a-z0-9\+\.\-]*" }
    },
    empty
  }
dhq_listPrefixDef =
  
  ## (list of prefix definitions) contains a list of definitions of prefixing schemes used in teidata.pointer values, showing how abbreviated URIs using each scheme may be expanded into full URIs. [16.2.3. Using Abbreviated Pointers]
  element tei:listPrefixDef {
    (dhq_desc*, (dhq_prefixDef | dhq_listPrefixDef)+),
    dhq_att.global.attributes,
    empty
  }
dhq_classDecl =
  
  ## (classification declarations) contains one or more taxonomies defining any classificatory codes used elsewhere in the text. [2.3.7. The Classification Declaration 2.3. The Encoding Description]
  element tei:classDecl {
    dhq_taxonomy+, dhq_att.global.attributes, empty
  }
dhq_taxonomy =
  
  ## defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy. [2.3.7. The Classification Declaration]
  element tei:taxonomy {
    (((dhq_taxonomy)+
      | ((dhq_model.glossLike | dhq_model.descLike)+, (dhq_taxonomy)*))
     | (dhq_model.biblLike, (dhq_taxonomy)*)),
    dhq_att.global.attributes,
    
    ## Provides a unique identifier for the taxonomy
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_unitDecl =
  
  ## (unit declarations) provides information about units of measurement that are not members of the International System of Units. [2.3.9. The Unit Declaration]
  element tei:unitDecl {
    dhq_unitDef+,
    dhq_att.canonical.attributes,
    dhq_att.global.attributes,
    empty
  }
dhq_unitDef =
  
  ## (unit definition) contains descriptive information related to a specific unit of measurement. [2.3.9. The Unit Declaration]
  element tei:unitDef {
    (dhq_model.labelLike
     | dhq_model.placeNamePart?
     | dhq_conversion?
     | dhq_unit?)+,
    dhq_att.global.attributes,
    dhq_att.canonical.attributes,
    empty
  }
dhq_conversion =
  
  ## defines how to calculate one unit of measure in terms of another. [2.3.9. The Unit Declaration]
  element tei:conversion {
    empty,
    dhq_att.global.attributes,
    dhq_att.formula.attributes,
    [
      a:documentation [
        "indicates a source unit of measure that is to be converted into another unit indicated in "
        ns1:code [ "@toUnit" ]
        "."
      ]
    ]
    attribute fromUnit { xsd:anyURI },
    [
      a:documentation [
        "the target unit of measurement for a conversion from a source unit referenced in "
        ns1:code [ "@fromUnit" ]
        "."
      ]
    ]
    attribute toUnit { xsd:anyURI },
    empty
  }
dhq_profileDesc =
  
  ## (text-profile description) provides a detailed description of non-bibliographic aspects of a text, specifically the languages and sublanguages used, the situation in which it was produced, the participants and their setting. [2.4. The Profile Description 2.1.1. The TEI Header and Its Components]
  element tei:profileDesc {
    dhq_model.profileDescPart*, dhq_att.global.attributes, empty
  }
dhq_creation =
  
  ## contains information about the creation of a text. [2.4.1. Creation 2.4. The Profile Description]
  element tei:creation {
    (text | dhq_model.limitedPhrase | dhq_listChange)*,
    dhq_att.global.attributes,
    empty
  }
dhq_langUsage =
  
  ## (language usage) describes the languages, sublanguages, registers, dialects, etc. represented within a text. [2.4.2. Language Usage 2.4. The Profile Description 15.3.2. Declarable Elements]
  element tei:langUsage {
    (dhq_model.pLike+ | dhq_language+), dhq_att.global.attributes, empty
  }
dhq_language =
  
  ## characterizes a single language or sublanguage used within a text. [2.4.2. Language Usage]
  element tei:language {
    dhq_macro.phraseSeq.limited,
    dhq_att.global.attributes,
    [
      a:documentation [
        "The "
        ns1:code [ "@extent" ]
        " attribute is used on "
        ns1:code [ "<language>" ]
        " to indicate the nature of the usage of the language in question: whether it is used for the original article, for a translation stub, or for a full translation."
      ]
    ]
    attribute extent {
      
      ## indicates that the language is used for the original article
      "original"
      | 
        ## indicates that the language is used for a translation stub (i.e. a placeholder or incomplete translation)
        "translation_stub"
      | 
        ## indicates that the language is used for a full translation of the article
        "translation"
    }?,
    [
      a:documentation [
        "(identifier) Supplies a language code constructed as defined in "
        ns1:a [ href = "https://tools.ietf.org/html/bcp47" "BCP 47" ]
        " which is used to identify the language documented by this element, and which is referenced by the global "
        ns1:code [ "@xml:lang" ]
        " attribute."
      ]
    ]
    attribute ident {
      xsd:language
      | (
         ##
         "")
    },
    
    ## specifies the approximate percentage (by volume) of the text which uses this language.
    attribute usage { xsd:nonNegativeInteger }?,
    empty
  }
dhq_textClass =
  
  ## (text classification) groups information which describes the nature or topic of a text in terms of a standard classification scheme, thesaurus, etc. [2.4.3. The Text Classification]
  element tei:textClass {
    (dhq_keywords)*, dhq_att.global.attributes, empty
  }
dhq_keywords =
  
  ## contains a list of keywords or phrases identifying the topic or nature of a text. [2.4.3. The Text Classification]
  element tei:keywords {
    (dhq_term+ | dhq_list),
    dhq_att.global.attributes,
    [
      a:documentation [
        "identifies the controlled vocabulary within which the set of keywords concerned is defined, for example by a "
        ns1:code [ "<taxonomy>" ]
        " element, or by some other resource."
      ]
    ]
    attribute scheme { xsd:anyURI }?,
    empty
  }
dhq_calendarDesc =
  
  ## (calendar description) contains a description of the calendar system used in any dating expression found in the text. [2.4. The Profile Description 2.4.5. Calendar Description]
  element tei:calendarDesc {
    dhq_calendar+, dhq_att.global.attributes, empty
  }
dhq_calendar =
  
  ## describes a calendar or dating system used in a dating formula in the text. [2.4.5. Calendar Description]
  element tei:calendar {
    dhq_model.pLike+, dhq_att.global.attributes, empty
  }
dhq_correspDesc =
  
  ## (correspondence
  ##     description) contains a description of the actions related to one act of correspondence. [2.4.6. Correspondence Description]
  element tei:correspDesc {
    (dhq_model.correspDescPart+ | dhq_model.pLike+),
    dhq_att.canonical.attributes,
    dhq_att.global.attributes,
    empty
  }
dhq_correspAction =
  
  ## (correspondence action) contains a structured description of the place, the name of a person/organization and the date related to the sending/receiving of a message or any other action related to the correspondence. [2.4.6. Correspondence Description]
  element tei:correspAction {
    (dhq_model.correspActionPart+ | dhq_model.pLike+),
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    empty
  }
dhq_correspContext =
  
  ## (correspondence context) provides references to preceding or following correspondence related to this piece of correspondence. [2.4.6. Correspondence Description]
  element tei:correspContext {
    dhq_model.correspContextPart+, dhq_att.global.attributes, empty
  }
dhq_xenoData =
  
  ## (non-TEI metadata) provides a container element into which metadata in non-TEI formats may be placed. [2.5. Non-TEI Metadata]
  element tei:xenoData {
    (text | anyElement-xenoData),
    dhq_att.global.attributes,
    
    ##
    attribute type {
      
      ##
      "embed_map"
      | 
        ##
        "embed_audio"
      | 
        ##
        "embed_video"
      | 
        ##
        "embed_3d"
    }?,
    
    ##
    attribute subtype {
      
      ##
      "soundcloud"
      | 
        ##
        "google"
    }?,
    empty
  }
dhq_revisionDesc =
  
  ## (revision description) summarizes the revision history for a file. [2.6. The Revision Description 2.1.1. The TEI Header and Its Components]
  element tei:revisionDesc {
    (dhq_list | dhq_listChange | dhq_change+),
    dhq_att.global.attributes,
    dhq_att.docStatus.attributes,
    empty
  }
dhq_change =
  
  ## documents a change or set of changes made during the production of a source document, or during the revision of an electronic file. [2.6. The Revision Description 2.4.1. Creation 11.6. Identifying Changes and Revisions]
  element tei:change {
    dhq_macro.specialPara,
    dhq_att.ascribed.attributes,
    dhq_att.docStatus.attributes,
    dhq_att.global.attributes,
    
    ## Provides a date in regularized format.
    attribute when { text }?,
    
    ## points to one or more elements that belong to this change.
    attribute target {
      list { xsd:anyURI+ }
    }?,
    empty
  }
dhq_listChange =
  
  ## groups a number of change descriptions associated with either the creation of a source text or the revision of an encoded text. [2.6. The Revision Description 11.6. Identifying Changes and Revisions]
  element tei:listChange {
    (dhq_desc*, (dhq_listChange | dhq_change)+),
    dhq_att.global.attributes,
    dhq_att.sortable.attributes,
    [
      a:defaultValue = "true"
      a:documentation [
        "indicates whether the ordering of its child "
        ns1:code [ "<change>" ]
        " elements is to be considered significant or not"
      ]
    ]
    attribute ordered { xsd:boolean }?,
    empty
  }
dhq_TEI =
  [
    a:documentation [
      "(TEI document) contains a single TEI-conformant document, combining a single TEI header with one or more members of the model.resource class. Multiple "
      ns1:code [ "<TEI>" ]
      " elements may be combined within a "
      ns1:code [ "<TEI>" ]
      " (or "
      ns1:code [ "<teiCorpus>" ]
      ") element. [4. Default Text Structure 15.1. Varieties of Composite Text]"
    ]
  ]
  element tei:TEI {
    (dhq_teiHeader,
     ((dhq_model.resource+, dhq_TEI*) | dhq_TEI+))
    >> sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
    >> sch:ns [ prefix = "xs" uri = "http://www.w3.org/2001/XMLSchema" ]
    >> sch:ns [
         prefix = "rng"
         uri = "http://relaxng.org/ns/structure/1.0"
       ],
    dhq_att.global.attributes,
    empty
  }
dhq_text =
  
  ## contains a single text of any kind, whether unitary or composite, for example a poem or drama, a collection of essays, a novel, a dictionary, or a corpus sample. [4. Default Text Structure 15.1. Varieties of Composite Text]
  element tei:text {
    (dhq_model.global*,
     (dhq_front, dhq_model.global*)?,
     (dhq_body | dhq_group),
     dhq_model.global*,
     (dhq_back, dhq_model.global*)?),
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ## Identifies the language of the element's content
    attribute xml:lang { text }?,
    [
      a:documentation [
        "Identifies the agent responsible for the content of the "
        ns1:code [ "<text>" ]
        " element"
      ]
    ]
    attribute resp {
      list { xsd:anyURI+ }
    }?,
    
    ## Identifies whether the text is in the language of its original authorship, or is a full translation, or is a stub translation (i.e. abstract only)
    attribute type {
      
      ## The text is in the language of its original authorship
      "original"
      | 
        ## The text is a full translation of the originally authored article
        "translation"
      | 
        ## The text is a stub or partial translation
        "translation_stub"
    }?,
    empty
  }
dhq_body =
  
  ## (text body) contains the whole body of a single unitary text, excluding any front or back matter. [4. Default Text Structure]
  element tei:body {
    (dhq_model.global*,
     (dhq_model.divTop, (dhq_model.global | dhq_model.divTop)*)?,
     (dhq_model.global)*,
     ((dhq_model.divLike, (dhq_model.global)*)+
      | (dhq_model.global)*
      | ((dhq_model.common, dhq_model.global*)+,
         ((dhq_model.divLike, (dhq_model.global)*)+
          | (dhq_model.global)*)?)),
     (dhq_model.divBottom, dhq_model.global*)*),
    dhq_att.global.attributes,
    empty
  }
dhq_group =
  
  ## contains the body of a composite text, grouping together a sequence of distinct texts (or groups of such texts) which are regarded as a unit for some purpose, for example the collected works of an author, a sequence of prose essays, etc. [4. Default Text Structure 4.3.1. Grouped Texts 15.1. Varieties of Composite Text]
  element tei:group {
    ((dhq_model.divTop | dhq_model.global)*,
     ((dhq_text | dhq_group),
      (dhq_text | dhq_group | dhq_model.global)*),
     dhq_model.divBottom*),
    dhq_att.global.attributes,
    empty
  }
dhq_floatingText =
  
  ## contains a single text of any kind, whether unitary or composite, which interrupts the text containing it at any point and after which the surrounding text resumes. [4.3.2. Floating Texts]
  element tei:floatingText {
    (dhq_model.global*,
     (dhq_front, dhq_model.global*)?,
     (dhq_body | dhq_group),
     dhq_model.global*,
     (dhq_back, dhq_model.global*)?),
    dhq_att.global.attributes,
    
    ## Identifies the language of the element's content
    attribute xml:lang { text }?,
    empty
  }
dhq_div =
  
  ## (text division) contains a subdivision of the front, body, or back of a text. [4.1. Divisions of the Body]
  element tei:div {
    ((dhq_model.divTop | dhq_model.global)*,
     ((((dhq_model.divLike), dhq_model.global*)+
       | ((dhq_model.common, dhq_model.global*)+,
          ((dhq_model.divLike), dhq_model.global*)*)),
      (dhq_model.divBottom, dhq_model.global*)*)?)
    >> sch:pattern [
         id = "dhq-div-abstractModel-structure-l-constraint-report-7"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::tei:l"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dhq-div-abstractModel-structure-p-constraint-report-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:div"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "ancestor::tei:p or ancestor::tei:ab and not(ancestor::tei:floatingText)"
             "\x{a}" ~
             "        Abstract model violation: p and ab may not contain higher-level structural elements such as div.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ## Provides a unique identifier for the division.
    attribute xml:id { xsd:ID }?,
    
    ##
    attribute xml:lang { text }?,
    
    ##
    attribute type {
      
      ##
      "appendix"
    }?,
    empty
  }
dhq_trailer =
  
  ## contains a closing title or footer appearing at the end of a division of a text. [4.2.4. Content of Textual Divisions 4.2. Elements Common to All Divisions]
  element tei:trailer {
    (text
     | dhq_lg
     | dhq_model.phrase
     | dhq_model.inter
     | dhq_model.lLike
     | dhq_model.global)*,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_dateline =
  
  ## contains a brief description of the place, date, time, etc. of production of a letter, newspaper story, or other work, prefixed or suffixed to it as a kind of heading or trailer. [4.2.2. Openers and Closers]
  element tei:dateline {
    (text | dhq_model.phrase | dhq_model.global)*,
    dhq_att.global.attributes,
    empty
  }
dhq_epigraph =
  
  ## contains a quotation, anonymous or attributed, appearing at the start or end of a section or on a title page. [4.2.3. Arguments, Epigraphs, and Postscripts 4.2. Elements Common to All Divisions 4.6. Title Pages]
  element tei:epigraph {
    (dhq_model.common | dhq_model.global)*,
    dhq_att.global.attributes,
    
    ## Describes the presentation of the quoted material, whether inline or set as a block.
    attribute rend {
      
      ## Designates a block quotation, typically containing one or more paragraphs or other chunky things, with the block and text centered. 
      "center"
    }?,
    empty
  }
dhq_salute =
  
  ## (salutation) contains a salutation or greeting prefixed to a foreword, dedicatory epistle, or other division of a text, or the salutation in the closing of a letter, preface, etc. [4.2.2. Openers and Closers]
  element tei:salute {
    dhq_macro.paraContent,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_signed =
  
  ## (signature) contains the closing salutation, etc., appended to a foreword, dedicatory epistle, or other division of a text. [4.2.2. Openers and Closers]
  element tei:signed {
    dhq_macro.paraContent,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_postscript =
  
  ## contains a postscript, e.g. to a letter. [4.2. Elements Common to All Divisions]
  element tei:postscript {
    ((dhq_model.global | dhq_model.divTopPart)*,
     dhq_model.common,
     (dhq_model.global | dhq_model.common)*,
     (dhq_model.divBottomPart, dhq_model.global*)*),
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    empty
  }
dhq_front =
  
  ## The front matter consists of an abstract followed by a teaser.
  element tei:front { dhq_abstract+, dhq_teaser+ }
dhq_back =
  
  ##
  element tei:back { dhq_listBibl? }
dhq_table =
  
  ## contains text displayed in tabular form, in rows and columns. [14.1.1. TEI Tables]
  element tei:table {
    (dhq_head?, dhq_row+, dhq_caption?),
    dhq_att.global.attributes,
    
    ## Provides a unique identifier for the table
    attribute xml:id { xsd:ID }?,
    
    ##
    attribute rend {
      
      ##
      "unbordered"
    }?,
    empty
  }
dhq_row =
  
  ## contains one row of a table. [14.1.1. TEI Tables]
  element tei:row {
    dhq_cell+,
    dhq_att.global.attributes,
    
    ## Describes the role of the table row
    attribute role {
      
      ## Indicates that the cell serves as a label (otherwise is assumed to be data)
      "label"
      | 
        ## Indicates that the cell contains data (default value)
        "data"
    }?,
    empty
  }
dhq_cell =
  
  ## contains one cell of a table. [14.1.1. TEI Tables]
  element tei:cell {
    dhq_macro.specialPara,
    dhq_att.global.attributes,
    
    ## Describes the role of the table cell
    attribute role {
      
      ## Indicates that the cell serves as a label (otherwise is assumed to be data)
      "label"
      | 
        ## Indicates that the cell contains data (default value)
        "data"
    }?,
    empty
  }
dhq_formula =
  
  ## contains a mathematical or other formula. [14.2. Formulæ and Mathematical Expressions]
  element tei:formula {
    (text | dhq_note | dhq_math | dhq_model.graphicLike)*,
    dhq_att.global.attributes,
    
    ## names the notation used for the content of the element.
    attribute notation {
      
      ##
      "asciimath"
      | 
        ##
        "tex"
      | 
        ##
        "mathml"
    }?,
    
    ##
    attribute rend {
      
      ##
      "inline"
      | 
        ##
        "block"
    }?,
    empty
  }
dhq_notatedMusic =
  
  ## encodes the presence of music notation in a text [14.3. Notated Music in Written Text]
  element tei:notatedMusic {
    (dhq_model.labelLike | dhq_model.ptrLike | dhq_graphic | dhq_seg)*,
    dhq_att.global.attributes,
    empty
  }
dhq_figure =
  
  ## groups elements representing or containing graphic information such as an illustration, formula, or figure. [14.4. Specific Elements for Graphic Images]
  element tei:figure {
    (dhq_head?, (dhq_figDesc | dhq_model.graphicLike | dhq_figure)*),
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ## Provides a unique identifier for the figure
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_figDesc =
  
  ## (description of figure) contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it. [14.4. Specific Elements for Graphic Images]
  element tei:figDesc {
    dhq_macro.limitedContent, dhq_att.global.attributes, empty
  }
dhq_att =
  
  ## (attribute) contains the name of an attribute appearing within running text. [22. Documentation Elements]
  element tei:att {
    xsd:Name,
    dhq_att.global.attributes,
    
    ## supplies an identifier for the scheme in which this name is defined.
    ## Sample values include: 1] TEI (Text Encoding Initiative); 2] DBK (Docbook); 3] XX (unknown); 4] imaginary; 5] XHTML; 6] XML; 7] XI
    [ a:defaultValue = "TEI" ]
    attribute scheme {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
dhq_code =
  
  ## contains literal code from some formal language such as a programming language. [22.1.1. Phrase Level Terms]
  element tei:code {
    text,
    dhq_att.global.attributes,
    
    ## (formal language) a name identifying the formal language in which the code is expressed
    attribute lang {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
dhq_eg =
  
  ## (example) contains any kind of illustrative example. [22.5. Element Specifications 22.5.3. Attribute List Specification]
  element tei:eg { (dhq_hi | text)*, dhq_att.global.attributes, empty }
dhq_gi =
  
  ## (element name) contains the name (generic identifier) of an element. [22. Documentation Elements 22.5. Element Specifications]
  element tei:gi {
    xsd:Name,
    dhq_att.global.attributes,
    
    ## supplies the name of the scheme in which this name is defined.
    ## Sample values include: 1] TEI; 2] DBK (docbook); 3] XX (unknown); 4] Schematron; 5] HTML
    [ a:defaultValue = "TEI" ]
    attribute scheme {
      xsd:token { pattern = "[^\p{C}\p{Z}]+" }
    }?,
    empty
  }
dhq_val =
  
  ## (value) contains a single attribute value. [22. Documentation Elements 22.5.3. Attribute List Specification]
  element tei:val { text, dhq_att.global.attributes, empty }
dhq_ab =
  
  ## (anonymous block) contains any arbitrary component-level unit of text, acting as an anonymous container for phrase or inter level elements analogous to, but without the semantic baggage of, a paragraph. [16.3. Blocks, Segments, and Anchors]
  element tei:ab {
    dhq_macro.paraContent
    >> sch:pattern [
         id = "dhq-ab-abstractModel-structure-ab-constraint-report-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test =
               "not(ancestor::tei:floatingText) and (ancestor::tei:p or ancestor::tei:ab)          and not(parent::tei:exemplum         |parent::tei:item         |parent::tei:note         |parent::tei:q         |parent::tei:quote         |parent::tei:remarks         |parent::tei:said         |parent::tei:sp         |parent::tei:stage         |parent::tei:cell         |parent::tei:figure)"
             "\x{a}" ~
             "        Abstract model violation: ab may not occur inside paragraphs or other ab elements.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "dhq-ab-abstractModel-structure-l-constraint-report-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:ab"
           "\x{a}" ~
           "               "
           sch:report [
             test = "ancestor::tei:l or ancestor::tei:lg"
             "\x{a}" ~
             "        Abstract model violation: Lines may not contain higher-level divisions such as p or ab.\x{a}" ~
             "      "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    
    ##
    attribute type { text }?,
    empty
  }
dhq_anchor =
  
  ## (anchor point) attaches an identifier to a point within a text, whether or not it corresponds with a textual element. [8.4.2. Synchronization and Overlap 16.5. Correspondence and Alignment]
  element tei:anchor {
    empty,
    dhq_att.global.attributes,
    
    ##
    attribute xml:id { xsd:ID }?,
    
    ##
    attribute type {
      
      ## identifies a revision location in a revised article
      "revisionLoc"
    }?,
    empty
  }
dhq_seg =
  
  ## (arbitrary segment) represents any segmentation of text below the chunk level. [16.3. Blocks, Segments, and Anchors 6.2. Components of the Verse Line 7.2.5. Speech Contents]
  element tei:seg {
    dhq_macro.paraContent,
    dhq_att.global.attributes,
    dhq_att.written.attributes,
    dhq_att.notated.attributes,
    
    ##
    attribute type { text }?,
    empty
  }
dhq_standOff =
  
  ## Functions as a container element for linked data, contextual information, and stand-off annotations embedded in a TEI document. [16.10. The standOff Container]
  element tei:standOff {
    (dhq_model.standOffPart+)
    >> sch:pattern [
         id =
           "dhq-standOff-nested_standOff_should_be_typed-constraint-assert-4"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "tei:standOff"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@type or not(ancestor::tei:standOff)"
             "This\x{a}" ~
             "      "
             sch:name [ ]
             " element must have a @type attribute, since it is\x{a}" ~
             "      nested inside a "
             sch:name [ ]
             "\x{a}" ~
             "               "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    dhq_att.global.attributes,
    empty
  }
dhq_listAnnotation =
  [
    a:documentation [
      "contains a list of annotations, typically encoded as "
      ns1:code [ "<annotation>" ]
      ", "
      ns1:code [ "<annotationBlock>" ]
      ", or "
      ns1:code [ "<note>" ]
      ", possibly organized with nested "
      ns1:code [ "<listAnnotation>" ]
      " elements. [16.10. The standOff Container]"
    ]
  ]
  element tei:listAnnotation {
    (dhq_model.headLike*,
     dhq_model.labelLike*,
     (dhq_model.annotationLike | dhq_listAnnotation)+),
    dhq_att.global.attributes,
    dhq_att.notated.attributes,
    empty
  }
dhq_annotation =
  [
    a:documentation [
      "represents an annotation following the "
      ns1:a [
        href = "#WADM"
        "Web\x{a}" ~
        "      Annotation Data Model"
      ]
      ". [16.10. The standOff Container]"
    ]
  ]
  element tei:annotation {
    (dhq_revisionDesc*, dhq_licence*, dhq_model.annotationPart.body*),
    dhq_att.global.attributes,
    
    ##
    attribute motivation {
      list {
        (
         ## intent is to assess the target resource in some way, rather than simply make a comment about it
         "assessing"
         | 
           ## intent is to create a bookmark to the target or part thereof
           "bookmarking"
         | 
           ## intent is to classify the target in some way
           "classifying"
         | 
           ## intent is to comment about the target
           "commenting"
         | 
           ## intent is to describe the target, rather than (for example) comment on it
           "describing"
         | 
           ## intent is to request an edit or a change to the target resource
           "editing"
         | 
           ## intent is to highlight the target resource or a segment thereof
           "highlighting"
         | 
           ## intent is to assign an identity to the target
           "identifying"
         | 
           ## intent is to link to a resource related to the target
           "linking"
         | 
           ## intent is to assign some value or quality to the target
           "moderating"
         | 
           ## intent is to ask a question about the target
           "questioning"
         | 
           ## intent is to reply to a previous statement, either an annotation or another resource
           "replying"
         | 
           ## intent is to associate a tag with the target
           "tagging")+
      }
    }?,
    empty
  }
dhq_citRef =
  [
    a:documentation [
      "(citation reference) A wrapper element for the citation information associated with "
      ns1:code [ "<cit>" ]
      "\x{a}" ~
      "         "
    ]
  ]
  element citRef { (dhq_ptr | dhq_ref | dhq_bibl | text)+ }
dhq_passThroughCode =
  
  ## Passthrough code gets passed through to the HTML output where it can be executed. The assumption is that this code will be HTML, or something that can be embedded within an HTML document.
  element passThroughCode {
    (text | anyElement-passThroughCode)*,
    
    ## Indicates whether the code is to be presented as block or in-line element. If "block", a border will be generated.
    attribute rend {
      
      ## indicates that the embedded code should be presented as a block element
      "block"
      | 
        ## indicates that the embedded code should be presented as an inline element
        "inline"
    }?,
    
    ## Provides a unique identifier for the element
    attribute xml:id { xsd:ID }?,
    
    ## Identifies the formal language in which the code is expressed
    attribute lang { dhq_teidata.word }?,
    empty
  }
dhq_example =
  
  ## An example is similar to a figure, but presents textual information (e.g. code or a sample text) instead of a graphic.
  element example {
    (dhq_head?, (dhq_model.common)*, dhq_caption?),
    
    ## Provides a unique identifier for the example item
    attribute xml:id { xsd:ID }?,
    
    ## Identifies the language of the element's content
    attribute xml:lang { text }?,
    empty
  }
dhq_articleType =
  
  ## Designates the type of article
  element articleType {
    "article"
    | "review"
    | "editorial"
    | "opinion"
    | "frontmatter"
    | "case study"
    | "field report"
  }
dhq_abstract =
  
  ## The abstract for the article. Contains one or more paragraphs.
  element abstract {
    dhq_p+,
    
    ##
    attribute xml:lang { text }?,
    empty
  }
dhq_teaser =
  
  ## The teaser for the article. Contains one or more paragraphs
  element teaser {
    dhq_p,
    
    ##
    attribute xml:lang { text }?,
    empty
  }
dhq_author_name =
  
  ## Contains the name of an author of the article.
  element author_name {
    (text | dhq_family)+,
    
    ##
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_translator_name =
  
  ## Contains the name of a translator of the article.
  element translator_name { (text | dhq_family)+ }
dhq_family =
  
  ## Identifies the family name of the author.
  element family { text }
dhq_affiliation =
  
  ## Describes the author's affiliation.
  element affiliation { text }
dhq_bio =
  
  ## Contains a brief biography of the author. Contains one or more paragraphs.
  element bio { dhq_p+ }
dhq_authorInfo =
  [
    a:documentation [
      "The "
      ns1:code [ "<authorInfo>" ]
      " element contains contact and biographical details of the author."
    ]
  ]
  element authorInfo {
    (dhq_author_name, dhq_affiliation?, dhq_email?, dhq_bio?),
    
    ##
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_caption =
  
  ## A caption for an example or table. May contain either paragraphs or mixed content.
  element caption {
    (text
     | dhq_model.phrase
     | dhq_model.inter
     | dhq_model.divPart
     | dhq_model.global)*
  }
dhq_translatorInfo =
  [
    a:documentation [
      "In DHQPublish, the "
      ns1:code [ "<translatorInfo>" ]
      " element contains contact and biographical details of the translator."
    ]
  ]
  element translatorInfo {
    (dhq_translator_name, dhq_affiliation?, dhq_email?, dhq_bio?),
    
    ##
    attribute xml:id { xsd:ID }?,
    empty
  }
dhq_revisionNote =
  
  ## A revisionNote contains information about a post-publication revision to the article.
  element revisionNote {
    dhq_macro.limitedContent,
    
    ##
    attribute previous { xsd:anyURI }?,
    
    ##
    attribute when { text }?,
    empty
  }
dhq_dedication =
  [
    a:documentation [
      "A dedication contains a brief phrase of dedication; it appears at the top of the article as a child of "
      ns1:code [ "<body>" ]
      ", immediately following the heading"
    ]
  ]
  element dedication { text }
dhq_License =
  
  ##
  element ns2:License {
    empty,
    
    ##
    attribute rdf:about { xsd:anyURI }?,
    empty
  }
dhq_math =
  
  ##
  element mml:math { anyElement-math }
start = dhq_TEI
