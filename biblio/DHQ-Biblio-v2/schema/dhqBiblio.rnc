default namespace = "http://digitalhumanities.org/dhq/ns/biblio"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start = (any.item | biblio.set)
    
biblio.set = element BiblioSet {
    attribute-model.global,
    attribute ready { 'true' | 'false' }?,
    ( any.item | biblio.set )* }


# Biblio items

any.item = element.ArchivalItem
     | element.Artwork
     | element.BlogEntry
     | element.Book
     | element.BookInSeries
     | element.BookSection
     | element.ConferencePaper
     | element.JournalArticle
     | element.Other
     | element.PhysicalMedia
     | element.Posting
     | element.PublicGov
     | element.Report
     | element.Series
     | element.Thesis
     | element.VideoGame
     | element.WebSite

element.Other =
  ## "Other" permits all elements.
  element Other {
    attribute-model.item,
    attribute.issuance?,
    # attribution
    ( creator* | element-model.contributors ),
    # labels/references
    element-model.title?,
    # macro item OR basic publication info
    ( ( element.book | element.bookSeries | element.conference | 
        element.journal | element.publication )? |
      # alternative to element-model.published
      ( place?, 
        ( publisher? | archive? ), 
        date? ) )?,
    # dimensions
    ( ( totalPages?, element-model.pages? ) |
      runningTime ),
    url*,
    # <Other> must contain at least one note.
    note+
  }

element.ArchivalItem =
  ## Any physical archival item stored at an archive or museum.
  element ArchivalItem {
    attribute-model.item,
    element-model.contributors,
    # alternative to element-model.title
      title,
      additionalTitle?,
      formalID,
    # alternative to element-model.published
      place,
      archive,
      date,
    # no URL
    note*
  }

element.Artwork =
  element Artwork {
    attribute-model.item,
    # no @issuance
    creator*,
    element-model.title,
    element-model.published,
    url?,
    note* }

element.BlogEntry =
  element BlogEntry {
    attribute-model.item,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    element-model.published,
    url,
    note* }

element.Book =
  element Book {
    attribute-model.item,
    attribute issuance { 'monographic' },
    element-model.contributors,
    element-model.title,
    element-model.published,
    totalPages?,
    url?,
    note* }

element.BookInSeries =
  element BookInSeries {
    attribute-model.item,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    element.bookSeries,
    totalPages?,
    url? }

element.BookSection =
  element BookSection {
    attribute-model.item,
    element-model.contributors,
    element-model.title,
    element.book,
    element-model.pages?,
    url?,
    note* }

element.ConferencePaper =
  element ConferencePaper {
    attribute-model.item,
    attribute issuance { 'monographic' },
    element-model.contributors,
    element-model.title,
    element.conference?,
    element.publication?,
    element-model.pages?,
    url?,
    note* }

element.JournalArticle =
  element JournalArticle {
    attribute-model.item,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    element.journal,
    element-model.pages?,
    url?,
    note* }

element.PhysicalMedia =
  ## Any physical form of audiovisual media. Includes CD-ROMs, DVDs, VHSs, Film, etc.
  element PhysicalMedia {
    attribute-model.item,
    attribute.issuance?,
    element-model.title,
    # alternative to element-model.published
      place,
      publisher,
      date,
    runningTime?,
    # no URL
    note* }

element.Posting =
  ## Contribution to public social media forums which are not under the jurisdiction of the author (i.e. not blog posts); includes listservs, Twitter, discussion forums, comments on public documents, etc.
  element Posting {
    attribute-model.item,
    # no @issuance
    element author {
      element corporateName { text } |
      element-model.personName |
      element username { text }
    },
    # no title
    additionalTitle,
    # no formalID
    date,
    url,
    note* }

element.PublicGov = 
  ## Any public government document. Includes court cases, legislation, constitutions, executive orders, judicial briefs, etc.
  element PublicGov {
    attribute-model.item,
    # TODO contributor? assuming an agency?
    element-model.title,
    # alternative to element-model.published
      place?,
      date,
    url?,
    note* }

element.Report =
  ## Technical reports, white papers, public government reports, technical standards, etc.
  element Report {
    attribute-model.item,
    attribute.issuance,
    element-model.contributors?,
    element-model.title,
    # alternative to element-model.published
      place?,
      publisher?,
      date,
    url?,
    note* }

element.Series =
  ## Book series, journal series, special issues, conference proceedings, etc.
  element Series {
    attribute-model.item,
    attribute.issuance,
    editor*,
    element-model.title,
    element-model.volume,
    # alternative to element-model.published
      place?,
      publisher?,
      date,
    element-model.pages?,
    url*,
    note* }

element.Thesis =
  element Thesis {
    attribute-model.item,
    attribute issuance { 'monographic' },
    author,
    title,
    # alternative to element-model.published
      place,
      date,
    url*,
    note* }

element.VideoGame =
  element VideoGame {
    attribute-model.item,
    attribute.issuance,
    creator+,
    element-model.title,
    element-model.published,
    url?,
    note* }

element.WebSite =
  element WebSite {
    attribute-model.item,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    element-model.published,
    url,
    note* }


# Macro items (the data for which may be included in the Biblio items above)

element.book =
  element book {
    attribute-model.global,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    ( element-model.published | element.bookSeries ),
    totalPages? }

element.bookSeries =
  element series {
    attribute-model.global,
    attribute.issuance,
    element-model.contributors,
    element-model.title,
    element-model.published }

element.conference =
  element conference {
    attribute-model.global,
    element title { attribute-model.global, text },
    # alternative to element-model.published
      place?,
      date?,
    element sponsor { attribute-model.global, text }? }

element.journal =
  element journal {
    attribute-model.global,
    attribute issuance { 'continuing' },
    editor*,
    element-model.title,
    element-model.volume,
    element-model.published }

element.publication =
  element publication {
    attribute-model.global,
    attribute.issuance,
    editor*,
    element-model.title?,
    element-model.volume,
    element-model.published }


# Element models

element-model.contributors =
  ( # element contributor { givenName, familyName }* |
    author |
    editor )*,
  translator*,
  etal?

element-model.title =
    title, additionalTitle*, formalID*

element-model.published =
    place?, publisher?, date?

element-model.pages =
   ( startingPage, endingPage? )?

element-model.personName =
  ( element fullName { attribute-model.global, text } |
   ( ( givenName, familyName? ) |
     ( familyName, givenName? ) ) )

element-model.volume =
  volume?, issue?


# Content models

content-model.titleText = ( 
  text | 
  element i { 
    attribute-model.global, 
    content-model.qOnly } | 
  element q { 
    attribute-model.global, 
    content-model.titleText } )*

# Within i, we cannot have another i (italic within italic), but we can have q elements all the way down.
content-model.qOnly = ( 
  text |
  element q { 
    attribute-model.global, 
    content-model.qOnly } )*


# Attributes

attribute-model.global =
  attribute xml:lang { xsd:language }?,
  attribute xml:space { 'default' | 'preserve' }?

attribute-model.item =
  attribute-model.global,
  attribute ID { xsd:NCName },
  attribute provenance { xsd:NCName }?,
  attribute dhqID { xsd:NMTOKEN }?,
  attribute check-title-dupe { 'no' }?

attribute.issuance =
  attribute issuance { 'monographic' | 'continuing' }


# Attribution elements

author =
  element author {
    attribute-model.global,
    ( element corporateName { 
        attribute-model.global, 
        text } |
      element-model.personName ) }

editor = element editor { 
  attribute-model.global,
  element-model.personName }

translator = element translator { 
  attribute-model.global,
  element-model.personName }

creator = element creator { 
  attribute-model.global,
  element-model.personName }

etal = element etal { 
  attribute-model.global, 
  empty }

givenName =
  element givenName {
    attribute-model.global,
    attribute sortKey { text }?,
    text }
 
familyName =
  element familyName {
    attribute-model.global,
    attribute sortKey { text }?,
    text }


# Label and identifier elements

title = element title { 
  attribute-model.global,
  content-model.titleText }

additionalTitle = element additionalTitle { 
  attribute-model.global,
  content-model.titleText }

formalID = element formalID {
  attribute-model.global,
  attribute type { text }?,
  text }


# Publication-specific elements

volume = element volume { 
  attribute-model.global,
  text }

issue = element issue { 
  attribute-model.global,
  text }

place = element place { 
  attribute-model.global,
  text }

publisher = element publisher { 
  attribute-model.global,
  text }

archive = element archive { 
  attribute-model.global,
  text }

date = element date {
  attribute-model.global,
  attribute when { xsd:date | xsd:gYear | xsd:gYearMonth }?,
  text }


# Dimensional elements

startingPage = element startingPage { 
  attribute-model.global,
  text }

endingPage = element endingPage { 
  attribute-model.global,
  text }

totalPages = element totalPages { 
  attribute-model.global,
  text }

runningTime = 
  ## Time duration (days, hours, and/or seconds)
  element runningTime { 
    attribute-model.global,
    text }


# General elements

url = element url { 
  attribute-model.global,
  xsd:anyURI }

note = element note { 
  attribute-model.global,
  text }

