<project xmlns:if="ant:if" xmlns:unless="ant:unless" 
   name="dhq"
   default="help">
  
  <description>
    Apache Ant buildfile for Digital Humanities Quarterly.
  </description>
  
  <!-- 
    See build-properties.xml for the settings used in this file. When referenced, 
    properties look like this:
      ${toDir}
    For more information, see https://ant.apache.org/manual/Tasks/xmlproperty.html
  -->
  <xmlproperty file="build-properties.xml" keepRoot="false"/>
  
  <!-- Define the relative path from the DHQ repository (this directory) to the 
    directory which will hold the directory of generated static site files, as well 
    as the full compressed site and derived Ant build file. -->
  <property name="toDir.base" value="..${file.separator}${toDir}"/>
  
  <!-- Within ${toDir.base}, individually generated static site files will be 
    written to the ${context} directory. -->
  <property name="toDir.static" value="${toDir.base}${file.separator}${context}"/>
  
  <!-- Check for the XML Resolver Java class, as it is a dependency for using the 
    Saxon HE processor. From the Saxon documentation on XSLT with Ant:
      "In particular, the classpath attribute of the xslt task element has been 
      unreliable: the safest approach is to ensure that the Jar files needed to run 
      Saxon are present on the externally-specified classpath (the classpath at the 
      point where Ant is invoked), rather than relying on the task-specific 
      classpath."
    https://www.saxonica.com/html/documentation11/using-xsl/xsltfromant.html
   -->
  <available classname="org.xmlresolver.Resolver" property="has.xmlresolver"/>
  
  
  <!-- 
    ANT TASKS
  -->
  
  <!-- If the XML Resolver JAR file is not already loaded, provide instructions for 
    running Ant with the "lib" command line option. Ant <target>s that use Saxon HE 
    should list this one as a dependency. -->
  <target name="checkXmlResolver">
    <echo unless:true="${has.xmlresolver}" level="error"
>XSL transformations cannot occur unless the XML Resolver JAR 
is loaded when Ant starts up. Please run Ant again like this:
      ant -lib common${file.separator}lib${file.separator}saxon</echo>
    <fail unless="${has.xmlresolver}">Java class `org.xmlresolver.Resolver` is not available.</fail>
    <!-- Otherwise, a little acknowledgement that this build target succeeded. -->
    <echo level="info">OK</echo>
  </target>
  
  <target name="help">
    <echo>** DHQ static site generation build process **</echo>
    <echo></echo>
    <echo>General format:</echo>
    <echo>  ant [-lib common${file.separator}lib${file.separator}saxon] [-Dprop=val ...] [target ...]</echo>
    <echo>Where:</echo>
    <echo>-lib common${file.separator}lib${file.separator}saxon</echo>
    <echo>  is required if the chosen target performs XSL transformations, optional otherwise.</echo>
    <echo>-Dprop=val</echo>
    <echo>  is how you send parameters (which ant calls “properties”) to the process; typically</echo>
    <echo>  used to say which specific article file to work on, e.g. “-Darticle.id=000370”.</echo>
    <echo>  (The “...” just means that you can use multiple -Dprop=val, as needed.)</echo>
    <echo>target</echo>
    <echo>  indicates what you want done. For a list of possible targets with short</echo> 
    <echo>  descriptions, issue `ant -projecthelp`. For longer descriptions, read on.</echo>
    <echo/>
    <echo>Targets:</echo>
    <echo>       (Note that the “...” above means you can execute multiple targets at</echo>
    <echo>        once; however, this should rarely be necessary or even particularly</echo>
    <echo>        helpful in the DHQ case.)</echo>
    <echo>help</echo>
    <echo>  What you are reading now, and the default target.</echo>
    <echo>previewArticle</echo>
    <echo>  transform one article XML file (specified via its 6-digit number with -Darticle.id=,</echo>
    <echo>  or via a prompt) into HTML. The output file is placed in the ${previewDir}${file.separator} subdirect-</echo>
    <echo>  ory. It has relative links to assets in this main directory (not the subdirectory),</echo>
    <echo>  and thus should be suitable for viewing on your local machine. (And may not be suit-</echo>
    <echo>  able for use on the server.)</echo>
    <echo>zipPreviewArticle</echo>
    <echo>  similar to 'previewArticle', but: a) The output HTML file *and* its assets are</echo>
    <echo>  archived together into a single ZIP file. b) The output HTML file uses relative</echo>
    <echo>  links to the assets in the same directory, as would happen when the ZIP file is</echo>
    <echo>  unzipped. Both the HTML file and the ZIP file are put in the ${previewDir}${file.separator} sub-</echo>
    <echo>  directory, overwriting any previous version there.</echo>
    <echo>generateIssues</echo>
    <echo>  generates the index pages and HTML for each issue listed in the</echo>
    <echo>  toc${file.separator}toc.xml file, including the article itself, the author</echo>
    <echo>  biographies, and the “landing” page. The output is placed in the</echo>
    <echo>  ${toDir.static}${file.separator} directory, i.e. in a sibling to this directory, over-</echo>
    <echo>  writing any previous version. (Some temporary files are also placed in</echo>
    <echo>  ${toDir.base}${file.separator}.) The output is designed to be viewed from a server, as</echo>
    <echo>  it uses absolute filepaths to its assets. Thus it will not work properly</echo>
    <echo>  (and will look ugly) if viewed on your local machine.</echo>
    <echo>generateSite</echo>
    <echo>  As above, but also copies over each article’s resources, various web assets, and the</echo>
    <echo>  required bits of the submissions${file.separator} &amp; common${file.separator} subdirectories; obtains the XHTML 1.0</echo>
    <echo>  strict DTD; adds headers &amp; footers to static pages; and creates a ZIP file of only the</echo>
    <echo>  article XML files in ${toDir.static}${file.separator}data${file.separator}dhq-xml.zip.</echo>
    <echo>  Note that, as with "generateIssues", files use absolute filepaths.</echo>
    <echo>generateSiteToGo</echo>
    <echo>  As "generateSite" above, but then also creates a compressed archive of the generated</echo>
    <echo>  output to make it easy to transfer (e.g., to a server). The output file can be found at</echo>
    <echo>  ${toDir.base}${file.separator}${context}.zip.</echo>
    <echo>generateSearchable</echo>
    <echo>  As above, but then also uses (our copy of) the University
    of Victoria Endings Project StaticSearch tool to generate a search
    page at
    ${toDir.static}${file.separator}dhq${file.separator}vol${file.separator}search.html. This
    takes awhile as a complete index (in JSON) is built for almost
    every file. Those files that are not well-formed XML have to be
    excluded. To do perform the exclusion this build process
    temporarily renames them (to *.NOTxhtml) and then renames them back.</echo>
    <echo>generateSearchableToGo</echo>
    <echo>  As "generateSearchable" above, but then also creates a compressed archive of the generated</echo>
    <echo>  output to make it easy to transfer (e.g., to a server). The output file can be found at</echo>
    <echo>  ${toDir.base}${file.separator}${context}.zip.</echo>
  </target>

  <!-- Generate static HTML versions of the DHQ issues (articles, bios, & indices). -->
  <target name="generateIssues" depends="checkXmlResolver" 
     description="Generate static HTML versions of the DHQ issues.">
    <mkdir dir="${toDir.static}${file.separator}vol"/>
    <!-- Use XSLT to transform issues using the DHQ table of contents. -->
    <xslt in="toc${file.separator}toc.xml" 
          out="${toDir.base}${file.separator}article-map.xml"
          style="common${file.separator}xslt${file.separator}generate_static_issues.xsl"
          classpath="${processor.location}"
          force="true"
          failonerror="false">
      <factory name="${processor.name}"/>
      <param name="context" expression="${context}"/>
      <!-- A relative path in <xsl:result-document> will be calculated relative to 
        the output file's directory, ${toDir}. -->
      <param name="static-dir" expression="${context}"/>
    </xslt>
  </target>

  <!-- Generate a static version of the DHQ website. -->
  <target name="generateSite" depends="checkXmlResolver,generateIssues"
     description="Generate a static copy of DHQ (without search capability) intended for the DHQ server. This is NOT a standalone copy.">
    <mkdir dir="${toDir.static}"/>
    <!-- Use the Ant build file created in "generateIssues" to copy articles' 
      resources to the right static directories. -->
    <ant antfile="${toDir.base}${file.separator}article-map.xml" 
         target="copyArticleResources" inheritRefs="true"/>
    <!-- Copy specific files in the base directory. -->
    <copy todir="${toDir.static}">
      <filelist dir=".">
        <file name="flow.js"/>
        <file name="robots.txt"/>
        <!--<file name="sitemap.xmap"/>-->
        <file name="sruExplain.xml"/>
      </filelist>
    </copy>
    <!-- Copy text files in the submissions directory. -->
    <copy todir="${toDir.static}${file.separator}submissions">
      <fileset dir="submissions" includes="*.txt *.xml"/>
    </copy>
    <!-- Copy web assets. -->
    <copy todir="${toDir.static}${file.separator}common">
      <fileset dir="common" excludes="lib/ tests/"/>
    </copy>
    <!-- Transform the test file.
      TODO: is this still necessary? -->
    <xslt in="common${file.separator}tests${file.separator}starter.xml" 
          out="${toDir.static}${file.separator}starter.html"
          style="common${file.separator}tests${file.separator}test2.xsl"
          classpath="${processor.location}">
      <factory name="${processor.name}"/>
      <param name="fpath" expression="starter.html"/>
    </xslt>
    <!-- Create the Atom news feed. -->
    <xslt in="toc${file.separator}toc.xml" 
          out="${toDir.static}${file.separator}feed${file.separator}news.xml"
          style="feed${file.separator}atomnews.xsl"
          classpath="${processor.location}"
          failonerror="false">
      <factory name="${processor.name}"/>
      <param name="context" expression="${context}"/>
      <!-- A relative path in <xsl:result-document> will be calculated relative to 
        the output file's directory, ${toDir}. -->
      <param name="static-dir" expression="${context}"/>
    </xslt>
    <!-- Download a copy of the W3C XHTML 1.0 Strict DTD, and its supporting 
      character entity files. If these are already present in the dhq-static 
      directory, nothing is downloaded. -->
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent"
         dest="${toDir.base}" skipexisting="true"/>
    <get src="https://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent"
         dest="${toDir.base}" skipexisting="true"/>
    <!-- Add headers and footers to static pages. -->
    <xslt destdir="${toDir.static}"
          style="common${file.separator}xslt${file.separator}template_static_pages.xsl"
          filenameparameter="fname"
          filedirparameter="fdir"
          classpath="${processor.location}">
      <!-- To prevent Ant/Saxon from hitting the W3C servers too hard with requests 
        for the XHTML DTD, we use a catalog entry to map the ID to the local copy of 
        the DTD. -->
      <xmlcatalog>
        <dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"
             location="${toDir.base}${file.separator}xhtml1-strict.dtd"/>
      </xmlcatalog>
      <mapper>
        <regexpmapper
          from="^(about|contact|news|people|submissions)/(.+\.html)"
          to="\1/\2" handledirsep="yes"/>
      </mapper>
      <factory name="${processor.name}"/>
      <param name="assets-path" expression="..${file.separator}"/>
      <param name="context" expression="dhq"/>
    </xslt>
    <!-- Generate the ZIP file of all articles' XML. -->
    <mkdir dir="${toDir.static}${file.separator}data"/>
    <!-- Use the Ant build file created in "generateIssues" to zip up all article 
      XML. -->
    <ant antfile="${toDir.base}${file.separator}article-map.xml" dir="${basedir}" 
         target="zipArticleXml" inheritRefs="true"/>
  </target>

  <target name="generateSiteToGo" depends="generateSite"
	  description="Generate a static copy of DHQ (without search capability), and ZIP it for easy transfer to a server. This is NOT a standalone copy.">
    <!-- Generate the ZIP file of the entire static site. -->
    <antcall target="compressStatic"/>
  </target>

  <target name="generateSearchable" depends="generateSite"
	  description="Generate a searchable static non-standalone copy of DHQ.">
    <!-- Copy a few needed files over -->
    <copy todir="${toDir.static}/data/uvepss">
      <fileset dir="data/uvepss"/>
    </copy>
    <copy file="${toDir.static}/data/uvepss/search.html" todir="${toDir.static}/vol"/>
    <echo> ... renaming ill-formed files (which would make this process crash) out of the way</echo>
    <!--
        UVEPSS will only operate on well-formed XHTML 5 files. This, I
        think, is a good thing; a feature, not a bug. But as it is
        indexing, if it comes across an ill-formed HTML file the
        entire process dies. This, I think is not the right way to do
        this; a bug. It should (IMHO) instead issue a strongly worded
        error message, skip the ill-formed file, and continue. But I
        do not get to make that call. (Although I do plan to submit a
        bug report to see if this can be changed.) So for now, here we
        need to work around this problem. So what we do is rename each
        of thte ill-formed files within the target directory to an
        extension that UVEPSS will ignore, and rename it back when we
        are done.
        You can’t just use `ant wf` (in those branches that have it)
        to discover which files are ill-formed, because that command
        only looks at article files, not ancillary files. So I used
        $ for f in $(find dhq/vol -name '*ml') ; do xmlwf $f ; done
        It would be better to use
        $ find dhq/vol -type f -name '*ml' -print0 | while read -d $'\0' f; do xmlwf $f ; done
        because the file "dhq/vol/16/3/000636/losh .xhtml" contains a
        space in the filename.
        — Syd, 2024-02-19
    -->
    <move todir="${toDir.static}/vol">
      <fileset dir="${toDir.static}/vol">
        <include name="9/2/000216/queerfemnotes.html"/>
        <include name="9/2/000216/resources/html/queerfemnotes.html"/>
        <include name="17/2/000652/resources/webmap_code/figure11/Figure_11.html"/>
        <include name="17/2/000652/resources/webmap_code/figure10/figure10.html"/>
        <include name="17/3/000720/000720_ko.xml"/>
        <include name="11/2/000285/resources/images/333-1962-1-SP.html"/>
        <include name="11/2/000285/resources/html/prototype.html"/>
        <!--
            Note: these last 2 files are ill-formed in at least two ways:
            1) SYSTEM identifier of "http://www.w3.org/TR/html4/strict.dtd",
               which is NOT an XML DTD;
            2) <meta> start-tag on 7 or 13 (depending on whether or not you
               count those crazy ^M chars) does not have an end-tag.
        -->
        <include name="7/1/000149/resources/source/000149.html"/>
        <include name="7/1/000149/resources/source/ss.html"/>
      </fileset>
      <mapper type="glob" from="*" to="*.NOT"/>
    </move>
    <!-- Convert path to config file from relative path to absolute path: -->
    <property name="absolute.config.file" location="${toDir.static}/data/uvepss/config.xml"/>
    <ant dir="${uvepssDir}" antfile="build.xml">
      <property name="ssConfigFile" value="${absolute.config.file}"/>
    </ant>
    <echo> ... renaming ill-formed files back</echo>
    <move todir="${toDir.static}/vol">
      <fileset dir="${toDir.static}/vol">
        <filename name="**/*.NOT"/>
      </fileset>
      <mapper type="glob" from="*.NOT" to="*"/>
    </move>
  </target>
  
  <target name="generateSearchableToGo" depends="generateSearchable"
	  description="Generate a searchable static non-standalone copy of DHQ, and ZIP it for easy transfer to server.">
    <!-- Generate the ZIP file of the entire static site. -->
    <antcall target="compressStatic"/>
  </target>

  <target name="generateSearchable" depends="generateSite">
    <echo>DEBUG: toDir=${toDir}, toDir.static=${toDir.static}, and uvepssDir=${uvepssDir}</echo>
    <!-- Copy a few needed files over -->
    <copy todir="${toDir.static}/data/uvepss">
      <fileset dir="data/uvepss"/>
    </copy>
    <copy file="${toDir.static}/data/uvepss/search.html" todir="dhq/vol"/>
    <echo> ... renaming ill-formed files (which would make this process crash) out of the way</echo>
    <!--
	UVEPSS will only operate on well-formed XHTML 5 files. This, I
	think, is a good thing; a feature, not a bug. But as it is
	indexing, if it comes across an ill-formed HTML file the
	entire process dies. This, I think is not the right way to do
	this; a bug. It should (IMHO) instead issue a strongly worded
	error message, skip the ill-formed file, and continue. But I
	do not get to make that call. (Although I do plan to submit a
	bug report to see if this can be changed.) So for now, here we
	need to work around this problem. So what we do is rename each
	of thte ill-formed files within the target directory to an
	extension that UVEPSS will ignore, and rename it back when we
	are done.
	You can’t just use `ant wf` (in those branches that have it)
	to discover which files are ill-formed, because that command
	only looks at article files, not ancillary files. So I used
	$ for f in $(find dhq/vol -name '*ml') ; do xmlwf $f ; done
	It would be better to use
	$ find dhq/vol -type f -name '*ml' -print0 | while read -d $'\0' f; do xmlwf $f ; done
	because the file "dhq/vol/16/3/000636/losh .xhtml" contains a
	space in the filename.
	— Syd, 2024-02-19
    -->
    <move todir="${toDir.static}/vol">
      <fileset dir="${toDir.static}/vol">
	<include name="9/2/000216/queerfemnotes.html"/>
	<include name="9/2/000216/resources/html/queerfemnotes.html"/>
	<include name="17/2/000652/resources/webmap_code/figure11/Figure_11.html"/>
	<include name="17/2/000652/resources/webmap_code/figure10/figure10.html"/>
	<include name="17/3/000720/000720_ko.xml"/>
	<include name="11/2/000285/resources/images/333-1962-1-SP.html"/>
	<include name="11/2/000285/resources/html/prototype.html"/>
	<!--
            Note: these last 2 files are ill-formed in at least two ways:
            1) SYSTEM identifier of "http://www.w3.org/TR/html4/strict.dtd",
	       which is NOT an XML DTD;
            2) <meta> start-tag on 7 or 13 (depending on whether or not you
	       count those crazy ^M chars) does not have an end-tag.
	-->
	<include name="7/1/000149/resources/source/000149.html"/>
	<include name="7/1/000149/resources/source/ss.html"/>
      </fileset>
      <mapper type="glob" from="*" to="*.NOT"/>
    </move>
    <!-- Convert path to config file from relative path to absolute path: -->
    <property name="absolute.config.file" location="${toDir.static}/data/uvepss/config.xml"/>
    <ant dir="${uvepssDir}" antfile="build.xml">
      <property name="ssConfigFile" value="${absolute.config.file}"/>
    </ant>
    <!--
    <echo> ... renaming ill-formed files back</echo>
    <move todir="${toDir.static}/vol">
      <filesetdir="${toDir.static}/vol">
	<filename name="**/*.NOT"/>
      </fileset>
      <mapper type="glob" from="*.NOT" to="*"/>
    </move> -->
  </target>
  
  <target name="generateSearchableToGo" depends="generateSearchable">
    <!-- Generate the ZIP file of the entire static site. -->
    <antcall target="compressStatic"/>
  </target>
  
  <!-- Compress the static site's files for backup and transportation. -->
  <target name="compressStatic">
    <zip destfile="${toDir.base}${file.separator}${context}.zip">
      <fileset dir="${toDir.static}"/>
    </zip>
  </target>

  <!-- Create an HTML preview version of a single article. -->
  <target name="previewArticle" depends="checkXmlResolver" 
     description="Create an HTML preview version of a single article.">
    <!-- If the 'article.id' property wasn't already set using the command line, Ant 
      will prompt for it. -->
    <input unless:set="article.id" 
       message="Please type the ID of the article you want to preview:" 
       addproperty="article.id"/>
    <!-- Test the 'article.id' property to make sure it has 6 digits and doesn't 
      start with '9'. -->
    <condition property="article.id.ok" value="${article.id}">
      <matches string="${article.id}" pattern="^[0-8]\d{5,5}$"/>
    </condition>
    <fail unless="article.id.ok"
       message="An article ID must be 6 digits long, and must not start with '9'"/>
    <!-- Set the assets path if it hasn't already been set. -->
    <property unless:set="assets.path" name="assets.path" 
      value="..${file.separator}"/>
    <!-- If it doesn't exist yet, create the preview directory specified in 
      build-properties.xml. -->
    <mkdir dir="${previewDir}"/>
    <!-- Transform the article with XSLT, using the Saxon HE processor. -->
    <xslt in="articles${file.separator}${article.id}${file.separator}${article.id}.xml" 
          out="${previewDir}${file.separator}${article.id}.html"
          style="common${file.separator}xslt${file.separator}template_article.xsl"
          classpath="${processor.location}"
          force="true"
          failOnTransformationError="false">
      <factory name="${processor.name}"/>
      <param name="assets-path" expression="${assets.path}"/>
      <param name="context" expression="dhq"/>
      <param name="dir-separator" expression="${file.separator}"/>
      <param name="doProofing" expression="true"/>
    </xslt>
    <echo message="Created article preview at ${previewDir}${file.separator}${article.id}.html"/>
  </target>
  
  <target name="zipPreviewArticle"
     description="Create a ZIP file which contains the HTML preview for a single article.">
    <!-- If the 'article.id' property wasn't already set using the command line, Ant 
      will prompt for it. -->
    <input unless:set="article.id" 
       message="Please type the ID of the article you want to preview:" 
       addproperty="article.id"/>
    <!-- The "previewArticle" task assumes that the common directory is a sibling of 
      the current one. For the ZIP, we want the HTML file at the same level as the 
      common directory. -->
    <property name="assets.path" value=".${file.separator}"/>
    <antcall target="previewArticle" inheritall="yes"/>
    <zip destfile="${previewDir}${file.separator}dhq-article-${article.id}.zip">
      <fileset dir="." includes="common/css/ common/js/"/>
      <fileset dir=".${file.separator}articles${file.separator}${article.id}" 
        excludes="**${file.separator}${article.id}.xml **${file.separator}${article.id}.xhtml"/>
      <fileset dir="${previewDir}">
        <filename name="${article.id}.html"/>
      </fileset>
    </zip>
  </target>
  
</project>
