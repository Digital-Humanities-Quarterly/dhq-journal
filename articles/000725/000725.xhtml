<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>[PREVIEW] DHQ: Digital Humanities Quarterly: </title>
      <link href="../../common/css/dhq.css" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_screen.css" media="screen" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_print.css" media="print" type="text/css" rel="stylesheet" />
      <style type="text/css">
        #mainContent {
          float: none;
          padding-top: 2em;
          padding-left: 4em;
          padding-right: 4em;
          margin-left: 225px;
           
        }</style>
   </head>
   <body>
      <div id="mainContent">
         <div class="DHQarticle">
            <div id="pubInfo">Preview<br />Volume 017 Number 3</div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            
            <div class="DHQheader">
               
               
               
               <h1 class="articleTitle lang en">Are Ontologies Trees or Lattices?</h1>
               
               <div class="author"><span style="color: grey">C. M. Sperberg-McQueen</span> &lt;<a href="mailto:cmsmcq_at_blackmesatech_dot_com" onclick="javascript:window.location.href='mailto:'+deobfuscate('cmsmcq_at_blackmesatech_dot_com'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('cmsmcq_at_blackmesatech_dot_com'); return false;">cmsmcq_at_blackmesatech_dot_com</a>&gt;, Black Mesa Technologies LLC</div>
               
               <div class="author"><span style="color: grey">Claus Huitfeldt</span> &lt;<a href="mailto:Claus_dot_Huitfeldt_at_uib_dot_no" onclick="javascript:window.location.href='mailto:'+deobfuscate('Claus_dot_Huitfeldt_at_uib_dot_no'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('Claus_dot_Huitfeldt_at_uib_dot_no'); return false;">Claus_dot_Huitfeldt_at_uib_dot_no</a>&gt;, University of Bergen</div>
               
               
               
               
               
               
               
               
               <span class="Z3988" title="url_ver=Z39.88-2004&amp;ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rfr_id=info%3Asid%2Fzotero.org%3A2&amp;rft.genre=article&amp;rft.atitle=Are%20Ontologies%20Trees%20or%20Lattices%3F&amp;rft.jtitle=Digital%20Humanities%20Quarterly&amp;rft.stitle=DHQ&amp;rft.issn=1938-4122&amp;rft.date=&amp;rft.volume=017&amp;rft.issue=3&amp;rft.aulast=Sperberg-McQueen&amp;rft.aufirst=C. M.&amp;rft.au=C. M.%20Sperberg-McQueen&amp;rft.au=Claus%20Huitfeldt"> </span></div>
            
            
            <div id="DHQtext">
               
               
               <div id="abstract">
                  <h2>Abstract</h2>
                  
                  <p>Ontologies, it is sometimes said, take the form of a hierarchy or tree: each class
                     is subdivided into distinct subclasses with no cross classifications. But if the purpose
                     of an ontology is to make possible useful inferences and to guide software users and
                     developers, it is better to allow a more flexible structure. Using text annotation
                     as an example (with concrete reference to the CATMA annotation tool), we argue that
                     it will be more useful to structure ontologies as lattices, not trees.</p>
                  </div>
               
               
               
               
               
               
               
               <div class="counter"><a href="#p1">1</a></div>
               <div class="ptext" id="p1">If taken literally, our title question would have a trivial and negative answer. Ontologies
                  are not <em class="emph">simply</em> trees, nor are they <em class="emph">simply</em> lattices, just as territories are not (<em class="emph">simply</em>) maps. Graphs (and trees and lattices, as subspecies of graphs) are defined mathematically
                  as consisting of a set of vertices (or nodes) and a set or bag of edges (or directed
                  arcs) connecting them.</div>
               
               
               <div class="counter"><a href="#p2">2</a></div>
               <div class="ptext" id="p2">There is more to ontologies than just that. So when we ask “Are ontologies trees?” we mean, “Can ontologies usefully be modeled as trees, and if so, how and under what circumstances?” And similarly for lattices. As there is no rule that only one abstract model can
                  be useful in a given context, the two possibilities mentioned are neither exhaustive
                  nor mutually exclusive.</div>
               
               
               <div class="counter"><a href="#p3">3</a></div>
               <div class="ptext" id="p3">The context in which we are aiming to give an answer to our question is that of ontologies
                  applied to annotations and annotation schemes. Our examples are taken from use of
                  the textual annotation tool CATMA [<a class="ref" href="#gius_etal2022">Gius et al. 2022</a>], with particular attention to possible restructuring of existing annotation tag sets,
                  and possible export of annotation data to reasoning systems.<a class="noteRef" href="#d4e208">[1]</a></div>
               
               
               <div class="counter"><a href="#p4">4</a></div>
               <div class="ptext" id="p4">Our aim is to show that in a context like this, ontologies constructed around the
                  superset and subset relations on classes and modelled as lattices are more flexible
                  and useful than ontologies modelled as trees. Our evaluation criteria are concrete
                  and rather simple: does the structure chosen for the ontology make it easier or harder
                  for users or software developers to define and perform certain obvious tasks that
                  will arise in any annotation system like CATMA? We hope that our references to CATMA
                  provide a concrete application of our argument which may make it easier to follow,
                  but we believe that our findings are relevant for ontologies in general.</div>
               
               
               <div class="counter"><a href="#p5">5</a></div>
               <div class="ptext" id="p5">We begin by defining some terms and articulating some assumptions. We then describe
                  some salient features of CATMA and their ontological implications. We argue that annotations
                  are best understood as attributing properties to text passages and best formalized
                  using predicates which hold of text passages. Against that background, we proceed
                  to discuss advantages and disadvantages of modelling an ontology for annotation as
                  a tree, and the comparative advantages of modeling it instead as a lattice. We believe
                  that the natural model for an ontology of text annotations is not a tree, but a lattice.</div>
               
               
               <div id="definitions" class="div div0">
                  
                  <h1 class="head">Definitions and assumptions</h1>
                  
                  
                  <div class="counter"><a href="#p6">6</a></div>
                  <div class="ptext" id="p6"><em class="term">Ontology</em>, according to Webster's <cite class="title italic">New international dictionary of the English language</cite>, is “The science of being or reality; the branch of knowledge that investigates the nature,
                     essential properties, and relations of being, as such”  [<a class="ref" href="#webster1923">Webster's 1923</a>].</div>
                  
                  
                  <div class="counter"><a href="#p7">7</a></div>
                  <div class="ptext" id="p7">For purposes of the present discussion, we will apply the name “ontology” to any attempt to say what kinds of things exist in any domain, or universe of discourse,
                     and to give some account of their properties and relations to each other. Such attempts
                     are often more or less systematic, but that is not essential to our usage.</div>
                  
                  
                  <div class="counter"><a href="#p8">8</a></div>
                  <div class="ptext" id="p8">One useful tool for deciding what exists is the so-called criterion of ontological
                     commitment. According to Quine, “a theory is committed to those and only those entities to which the bound variables
                     of the theory must be capable of referring in order that the affirmations made in
                     the theory be true”  [<a class="ref" href="#quine1948">Quine 1948</a>, 13–14].<a class="noteRef" href="#d4e248">[2]</a> In philosophy, Quine's criterion has been very influential and is still a matter
                     of considerable discussion. Since it is readily applied in formal and easily formalizable
                     systems, it has also had a wide uptake in computing contexts, where it makes possible
                     the comparison of ontological commitments in various approaches to modeling a problem.<a class="noteRef" href="#d4e255">[3]</a></div>
                  
                  
                  <div class="counter"><a href="#p9">9</a></div>
                  <div class="ptext" id="p9">A <em class="term">classification scheme</em> is for our purposes here any set of classes intended for application in some universe
                     of discourse, together with rules for assigning things to classes; like ontologies
                     classification schemes are often but not necessarily systematic. Any ontology includes
                     a set of classes containing (and implicitly characterizing) things that exist, and
                     thus a classification scheme. Conversely, any classification scheme identifies different
                     kinds of things that can exist and thus entails an ontology. So although there may
                     be (and usually is) more to an ontology than just a classification scheme, we regard
                     the theory of classification as relevant to ontology, and vice versa.</div>
                  
                  
                  <div class="counter"><a href="#p10">10</a></div>
                  <div class="ptext" id="p10">Most classification schemes intended for practical use group items together into classes
                     on the basis of certain characteristic <em class="term">properties</em> which are necessary and sufficient for identifying the item as a member of the class.
                     For any given class, some set of items in the universe of discourse will fall into
                     that class, and other items will fall outside that class. The set of items falling
                     under the class is its <em class="term">extension</em>; the set of characteristic properties of a class is its <em class="term">intension</em>.</div>
                  
                  
                  <div class="counter"><a href="#p11">11</a></div>
                  <div class="ptext" id="p11">The properties used in different classification schemes vary widely; for our examples,
                     we use properties like being human, being male, being an adult or an adolescent or
                     a child, and so forth. Properties may be combined: individuals who have the properties
                     of being human, being female, and being adult may be said to have the property of
                     being women (adult female humans).</div>
                  
                  
                  <div class="counter"><a href="#p12">12</a></div>
                  <div class="ptext" id="p12">Intension and extension typically are in inverse proportion to each other: the more
                     properties are specified in the intension of a class, the smaller its extension will
                     become. For example, the set of all humans has a larger extension and a smaller intension
                     than the set of all women (adult female humans). Note that adding properties to the
                     intension of a class is not guaranteed to decrease its extension (the class of adult
                     humans who are authors of this paper, for example, has a smaller intension than the
                     class of adult male humans who are authors of this paper, but the two classes have
                     the same extension), but it never increases it.</div>
                  
                  
                  <div class="counter"><a href="#p13">13</a></div>
                  <div class="ptext" id="p13">We assume that any property can be represented formally by a <em class="term">predicate</em>. We understand predicates to be functions which map objects or tuples of objects
                     in the universe of discourse (the <em class="term">arguments</em> of the function) to the truth values <span class="hi italic">true</span> or <span class="hi italic">false</span>. For example, the property of being an adult female human may be represented formally
                     by the predicate <span class="hi italic">is_a_woman</span>, which takes one argument and is true for just those individuals in the universe
                     of discourse who are women. Both the term <em class="term">predicate</em> and the analysis of propositions in this way echo the traditional grammatical analysis
                     of sentences as consisting of a subject and a predicate. Of particular importance
                     for any class of objects is the characteristic predicate of the class (also commonly
                     called its characteristic function), which returns the value <span class="hi italic">true</span> for all members of the class and <span class="hi italic">false</span> for all other individuals.</div>
                  
                  
                  <div class="counter"><a href="#p14">14</a></div>
                  <div class="ptext" id="p14">In the sentence “Gottlob Frege was born in 1848,” for example, the predicate is “was born in 1848” and the subject (or argument of the predicate) is “Gottlob Frege”. In formulae we might write this as <span class="monospace">was_born_1848(Frege)</span>. Predicates may have more than one argument: the more general predicate <span class="monospace">name_yearofbirth(</span><span class="hi italic">x</span><span class="monospace">,</span> <span class="hi italic">y</span><span class="monospace">)</span> (in words: “<span class="hi italic">x</span> was born in the year <span class="hi italic">y</span>”) takes two arguments, one for an individual and one for a year. We can say (truthfully)
                     that Frege was born in 1848 by asserting either <span class="monospace">was_born_1848(Frege)</span> or <span class="monospace">name_yearofbirth(Frege, 1848)</span>.</div>
                  
                  
                  <div class="counter"><a href="#p15">15</a></div>
                  <div class="ptext" id="p15">The number of arguments taken by a predicate is called its <em class="term">arity</em>; predicates of arity one and two are often called <em class="term">unary</em> and <em class="term">binary</em> predicates, respectively, and predicates of unspecified arity may be referred to
                     as <em class="term"><span class="hi italic">n</span>-ary</em> predicates.</div>
                  
                  <div class="counter"><a href="#p16">16</a></div>
                  <div class="ptext" id="p16">It should be noted that a predicate of lower arity may be equivalent to a predicate
                     of higher arity with a fixed (or: constant) value for a given argument: we may define
                     <span class="monospace">was_born_1848(</span><span class="hi italic">x</span><span class="monospace">)</span> (in words: “<span class="hi italic">x</span> was born in 1848”) as true for the same set of <span class="hi italic">x</span> as <span class="monospace">name_yearofbirth(</span><span class="hi italic">x</span><span class="monospace">, 1848)</span>. And similarly, the unusual but semantically well formed predicate <span class="monospace">Frege_was_born_in(</span><span class="hi italic">x</span><span class="monospace">)</span> would be true for precisely those <span class="hi italic">x</span> for which <span class="monospace">name_yearofbirth(Frege,</span> <span class="hi italic">x</span><span class="monospace">)</span> is true. Here “<span class="monospace">1848</span>” and “<span class="monospace">Frege</span>” are constant values, not variables.</div>
                  
                  
                  <div class="counter"><a href="#p17">17</a></div>
                  <div class="ptext" id="p17">Any predicate <span class="monospace">P(</span><span class="hi italic">x</span><span class="monospace">)</span> identifies a set, which is operationally the set of all <span class="hi italic">x</span> such that <span class="monospace">P(</span><span class="hi italic">x</span><span class="monospace">)</span> is true: in a formula, <span class="monospace">{</span><span class="hi italic">x</span> <span class="monospace"> | P(</span><span class="hi italic">x</span><span class="monospace">)}</span>. And conversely, for any set <span class="hi italic">S</span> there will be at least one possible predicate <span class="hi italic">P</span> whose extension is <span class="hi italic">S</span>. (As a last resort, we can always define <span class="hi italic">P</span> as the property “is a member of <span class="hi italic">S</span>”.)<a class="noteRef" href="#d4e455">[4]</a></div>
                  
                  
                  <div class="counter"><a href="#p18">18</a></div>
                  <div class="ptext" id="p18">It will be observed that any set of predicates may serve as the basis of a classification
                     system and thus of an ontology, and conversely that the characteristic properties
                     of the classes of any classification scheme can be represented formally by some set
                     of predicates.</div>
                  
                  
                  <div class="counter"><a href="#p19">19</a></div>
                  <div class="ptext" id="p19">In attempting to answer the question posed in our title, we make some assumptions
                     that may be worth trying to make explicit here. We assume (among other things): 
                     	
                     <ul class="list">
                        <li class="item">Regarding the organization of tags in an annotation scheme as an ontology has no particular
                           merit in itself; the point of thinking of an annotation scheme as an ontology is to
                           help solve problems.</li>
                        <li class="item">Those served (or not) by an ontological view of an annotation scheme include the annotators,
                           the users who search annotated documents and visualize the results, and the developers
                           of the annotation software. (In our concrete example: both CATMA users and CATMA developers.)</li>
                        <li class="item">An ontological view of the annotation scheme can help annotators and searchers by
                           helping them create an intuitive understanding of the logical or semantic structure
                           of the annotation scheme (what tags are related to what other tags, and how tags can
                           be similar or different in meaning).</li>
                        <li class="item">By providing names for properties and combinations of properties, an annotation scheme
                           can make it easier (or harder) to think and talk about particular phenomena. In this
                           context, simple one-word names tend as a rule to be easier to work with (think with,
                           talk with) than combinations of names. (For example: it is usually easier to say “woman” than to say “living adult female of the species <span class="hi italic">homo sapiens</span>”.)</li>
                        <li class="item">Ontology can help software developers by making it easy to support user interfaces
                           that exploit the semantic relations of tags. Semantic information about tags can be
                           helpful in various interfaces, for example: 
                           			
                           <div class="ptext">
                              <ul class="list">
                                 <li class="item">annotation, e.g. in the tasks of navigating through the tag set and selecting the
                                    appropriate tag for a given passage;</li>
                                 <li class="item">management of the annotation scheme, e.g. in the task of restructuring an annotation
                                    scheme on the basis of experience, to make it more expressive or to make it easier
                                    to apply commonly needed tags;</li>
                                 <li class="item">search, e.g. in the task of specifying which classes of annotation are relevant to
                                    the search).</li>
                              </ul>
                           </div>
                           		</li>
                        <li class="item">Because ontologies typically describe explicitly how different classes of things are
                           similar and different, they are also commonly used to guide logical inference. Ontologies
                           can be evaluated on the kinds of inferences they make easy.</li>
                        <li class="item">Ontologies and structures for ontologies can be evaluated both on their expressive
                           power (what one can and cannot say, in the terms provided by a given ontology or class
                           of ontologies) and on their convenience (how easy it is to say it).</li>
                     </ul>
                     There are doubtless other assumptions we make of which we are unconscious or only
                     dimly aware.</div>
                  </div>
               
               
               <div id="CATMA_annotation" class="div div0">
                  
                  <h1 class="head">Annotation in CATMA</h1>
                  
                  
                  <div class="counter"><a href="#p20">20</a></div>
                  <div class="ptext" id="p20">“CATMA” stands for “Computer Assisted Text Markup and Annotation”. The CATMA web application provides tools for text annotation and analysis. Its primary
                     target audience is humanities scholars, among (and beyond) which it has gained a wide
                     audience.<a class="noteRef" href="#d4e513">[5]</a> Among the reasons for its wide uptake are probably the combination of a very easy-to-learn
                     and easy-to-use annotation interface, a wide range of tools for visualization and
                     analysis, and its support for exploratory and cooperative work. See [<a class="ref" href="#gius_etal2022">Gius et al. 2022</a>].</div>
                  
                  
                  <div class="counter"><a href="#p21">21</a></div>
                  <div class="ptext" id="p21">In CATMA's terms, an annotation scheme is a <em class="term">tag set</em>. A tag set consists of one or more <em class="term">tags</em>, each with zero or more <em class="term">subtags</em>, which may or may not in turn have their own subtags, and so on. A tag with subtags
                     is called their <em class="term">supertag</em>. Tags may be furnished with named <em class="term">properties</em><a class="noteRef" href="#d4e532">[6]</a> which may in turn carry <em class="term">values</em>.</div>
                  
                  
                  <div class="counter"><a href="#p22">22</a></div>
                  <div class="ptext" id="p22">CATMA provides a search interface in which the user can search the document for the
                     occurrence of words or strings of characters, or of specific tags or combinations
                     of tags. Visualization tools make it possible to compare the pattern of occurrences
                     of different tags, or of the same tags in different documents. Data can be exported
                     for further processing using other tools.</div>
                  
                  
                  <div class="counter"><a href="#p23">23</a></div>
                  <div class="ptext" id="p23">Annotation starts by uploading a document and selecting a tag set. The document is
                     displayed in a pane in the left half of the window, while the right pane displays
                     the tag set. Annotations are added to the text by highlighting a <em class="term">text passage</em>, choosing the tag with which to annotate it, and selecting values for the tag's named
                     properties (if any).</div>
                  
                  
                  <div class="counter"><a href="#p24">24</a></div>
                  <div class="ptext" id="p24">Users may revise the tag set by adding, deleting or changing tags as they go along.
                     Unlike some other annotation tools, CATMA allows the user to start with an empty tag
                     set.</div>
                  
                  
                  <div class="counter"><a href="#p25">25</a></div>
                  <div class="ptext" id="p25">Text passages carrying an annotation may be discontinuous, and they may overlap. There
                     is no requirement that a text passage annotated with a supertag should contain passages
                     annotated with that supertag's subtags. Similarly, there is no requirement that a
                     text passage annotated with a subtag should be contained in a passage annotated with
                     that subtag's supertag. (For any text passage annotated with a subtag, however, CATMA
                     will assume that its supertag applies.) In other words, CATMA does not enforce a tree-like
                     hierarchical ordering of the annotations of a document.</div>
                  
                  
                  <div class="counter"><a href="#p26">26</a></div>
                  <div class="ptext" id="p26">In our context, however, it is not the structuring of the document, but the structuring
                     of the annotation scheme, i.e. of the CATMA tag set, that is of primary interest.
                     And in CATMA the structure of the annotation scheme is indeed hierarchical.<a class="noteRef" href="#d4e555">[7]</a> As such, it illustrates a dilemma discussed further <a href="#trees">below</a>. We may choose to organize a tag set for demographic annotation of human characters
                     first by gender and then by age. In CATMA, it might look like this:<a class="noteRef" href="#d4e560">[8]</a>
                     	
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure01.jpg" rel="external"><img src="resources/images/figure01.jpg" style="" alt="A screenshot of the CATMA annotation interface, showing  and  as subcategories of , and  and  as subcategories of ." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 1. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p27">27</a></div>
                  <div class="ptext" id="p27">Alternatively, we might organize the annotation scheme first by age and then by gender,
                     like this:
                     	
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure02.jpg" rel="external"><img src="resources/images/figure02.jpg" style="" alt="A screenshot of the CATMA annotation interface, showing  and  as subcategories of , and  and  as subcategories of ." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 2. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p28">28</a></div>
                  <div class="ptext" id="p28">Both tag sets provide for the same subtags (<span class="hi italic">Woman</span>, <span class="hi italic">Girl</span>, <span class="hi italic">Man</span>, <span class="hi italic">Boy</span>). The first tag set groups them into the supertags <span class="hi italic">Female</span> and <span class="hi italic">Male</span>, the second tag set groups them into the supertags <span class="hi italic">Adult</span> and <span class="hi italic">Child</span>. Using the first tag set it is straightforward to locate all passages annotated as
                     relating to <span class="hi italic">Female</span> characters or to <span class="hi italic">Male</span> characters, but there is no easy way to locate all passages relating to <span class="hi italic">Adult[s]</span> or to <span class="hi italic">Child[ren]</span>. With the second tag set it is the other way around.<a class="noteRef" href="#d4e652">[9]</a></div>
                  
                  </div>
               
               
               <div id="CATMA_ontology-rev" class="div div0">
                  
                  <h1 class="head">An ontological view of CATMA annotations</h1>
                  
                  
                  <div class="counter"><a href="#p29">29</a></div>
                  <div class="ptext" id="p29">It may be helpful to relate the features of CATMA described <a href="#CATMA_annotation">above</a> to our discussion of ontologies, considering several questions in turn.</div>
                  
                  
                  <div id="COR-properties" class="div div1">
                     
                     <h2 class="head">Annotation classes and properties</h2>
                     
                     
                     <div class="counter"><a href="#p30">30</a></div>
                     <div class="ptext" id="p30">When a CATMA user defines annotation classes (tags) and arranges them in a class/subclass
                        (tag/subtag) hierarchy, the user is specifying what kinds of annotations shall exist
                        (when it comes to annotation classes, what there is is what the user says there is).
                        Any CATMA tag set is thus a classification scheme for annotations (since each annotation
                        is created as an instance of some specific annotation class (tag)), and implies an
                        ontology.</div>
                     
                     
                     <div class="counter"><a href="#p31">31</a></div>
                     <div class="ptext" id="p31">As noted <a href="#definitions">above</a>, we assume that for any class in a classification scheme there exists a characteristic
                        property which holds for all and only the things belonging to the class, and that
                        every such characteristic property can be represented formally by a characteristic
                        predicate. In the case of annotations, the salient property is the one attributed
                        by annotations of that class to passages in the text.<a class="noteRef" href="#d4e699">[10]</a></div>
                     
                     
                     <div class="counter"><a href="#p32">32</a></div>
                     <div class="ptext" id="p32">It should be noted that in CATMA as in other annotation systems, the user is not required
                        to identify the characteristic property of an annotation class or to formulate its
                        characteristic predicate explicitly; both the characteristic property and the characteristic
                        predicate are typically left implicit. For purposes of our argument, we are observing
                        that they exist, not assuming that they have been explicitly defined.</div>
                     
                     
                     <div class="counter"><a href="#p33">33</a></div>
                     <div class="ptext" id="p33">The intension of any tag will as always be a set of properties to be attributed to
                        text passages. It follows from the logic of the class hierarchy that the intension
                        of a subtag will include the intension of its supertag. And the extension of any subtag
                        will, by construction, be a subset of the extension of its supertag.</div>
                     
                     
                     <div class="counter"><a href="#p34">34</a></div>
                     <div class="ptext" id="p34">In the following discussion we will consider annotation classes as classifying both
                        annotations and their target text passages. The extension of any annotation class
                        thus contains both a set of annotations and the set of text passages annotated, and
                        the intension of the class may involve both properties of text passages and properties
                        of other things in the universe of discourse. When it is necessary to do so, we may
                        single out the set of annotations or the set of text passages in the extension, or
                        the different kinds of properties involved in the intension.</div>
                     </div>
                  
                  
                  <div id="COR-commitments" class="div div1">
                     
                     <h2 class="head">The ontological commitments of annotation</h2>
                     
                     
                     <div class="counter"><a href="#p35">35</a></div>
                     <div class="ptext" id="p35">Because it can handle conflicting views of the world with equanimity, Quine's method
                        of approaching ontology by identifying ontological commitments in already-held beliefs
                        has, we think, potential interest and utility for annotators and for CATMA's system
                        designers. For CATMA, the ontological commitments of concern are the ones made by
                        annotators in declaring annotation classes and in annotating documents. CATMA seeks
                        to minimize its own ontological commitments, in order to avoid imposing them on annotators.</div>
                     
                     
                     <div class="counter"><a href="#p36">36</a></div>
                     <div class="ptext" id="p36">It is of course true that annotations made by different annotators (or even by the
                        same annotator) may conflict in various ways. It is also true that an annotator may
                        be right or wrong in annotating (or not annotating) a text passage with a certain
                        tag. We do not believe that this in itself is likely to lead to logical inconsistencies
                        in an annotation ontology, since the only facts whose consistency is at issue are
                        facts about what has actually been annotated how in some concrete sets of documents.
                        For our purposes, we can regard those as brute facts.</div>
                     
                     
                     <div class="counter"><a href="#p37">37</a></div>
                     <div class="ptext" id="p37">The annotation scheme classifies annotations, and thus entails an ontological commitment
                        to the existence of annotations. Each annotation attributes some property to some
                        passage of the text. The ontology underlying annotation in CATMA thus also necessarily
                        entails the existence of text passages.<a class="noteRef" href="#d4e784">[11]</a></div>
                     
                     
                     <div class="counter"><a href="#p38">38</a></div>
                     <div class="ptext" id="p38">The reader may at this point ask whether the idea that an annotation attributes a
                        property to a text passage also entails a commitment to the existence of properties
                        as a nameable kind of thing. The answer, we believe, is that it depends on the annotation
                        software. CATMA and other annotation systems provide interfaces which allow the user
                        to ask, in effect, what annotations apply to a given text passage, or conversely what
                        text passages are marked with a given tag (which is to say, what text passages fall
                        into a given class).</div>
                     
                     
                     <div class="counter"><a href="#p39">39</a></div>
                     <div class="ptext" id="p39">We can formalize the membership of an annotation <span class="hi italic">a</span> in a class <span class="hi italic">C</span> with the predicate <span class="monospace">C(</span><span class="hi italic">a</span><span class="monospace">)</span> and the relation of <span class="hi italic">a</span> to a text passage <span class="hi italic">x</span> as <span class="monospace">annotates(</span><span class="hi italic">a</span><span class="monospace">,</span> <span class="hi italic">x</span><span class="monospace">)</span>. Sentences of these forms will be the “affirmations made in the theory” for purposes of applying Quine's criterion for existence. Given such a formalization,
                        the user interface actions mentioned above can be interpreted as finding particular
                        sets: the set of all annotations for a given passage <span class="hi italic">x</span> is the set <span class="monospace">{</span><span class="hi italic">a</span><span class="monospace"> | annotates(</span><span class="hi italic">a</span><span class="monospace">, </span><span class="hi italic">x</span><span class="monospace">)}</span> (read “the set of all annotations <span class="hi italic">a</span> such that <span class="hi italic">a</span> annotates <span class="hi italic">x</span>”), and the set of all passages of a given class <span class="hi italic">C</span> of annotations is the set <span class="monospace">{</span><span class="hi italic">x</span><span class="monospace"> | (∃</span><span class="hi italic">a</span><span class="monospace">)(annotates(</span><span class="hi italic">a</span><span class="monospace">,</span> <span class="hi italic">x</span>) and C(<span class="hi italic">x</span><span class="monospace">))}</span> (read “the set of all passages <span class="hi italic">x</span> such that there exists some annotation <span class="hi italic">a</span> which annotates <span class="hi italic">x</span> and for which <span class="monospace">C(</span><span class="hi italic">x</span><span class="monospace">)</span> holds”).</div>
                     
                     
                     <div class="counter"><a href="#p40">40</a></div>
                     <div class="ptext" id="p40">When named properties are queried, the queries may become slightly more complex, but
                        follow the same pattern. For example, if the tag set had a single <span class="hi italic">Person</span> tag, with named properties for <span class="hi italic">age</span> and <span class="hi italic">sex</span>, and subtags like <span class="hi italic">Child</span>, then one might wish to search for occurrences of <span class="hi italic">Child</span> with <span class="hi italic">age</span> greater than 16, to check the consistency of the annotations. Let us use <span class="monospace">Person(</span><span class="hi italic">a</span><span class="monospace">)</span> and <span class="monospace">Child(</span><span class="hi italic">a</span><span class="monospace">)</span> to identify all annotations using those two tags, and <span class="monospace">Person_age(</span><span class="hi italic">a</span><span class="monospace">, </span><span class="hi italic">n</span><span class="monospace">)</span> to denote the relation holding between a <span class="hi italic">Person</span> or <span class="hi italic">Child</span> annotation <span class="hi italic">a</span> and the value <span class="hi italic">n</span> of its named property <span class="hi italic">age</span>. Then a search for all text passages marked as concerning a child with age greater
                        than 16 is a search for the set <span class="monospace">{</span><span class="hi italic">x</span><span class="monospace"> | (∃</span><span class="hi italic">a</span><span class="monospace">)(annotates(</span><span class="hi italic">a</span><span class="monospace">,</span> <span class="hi italic">x</span><span class="monospace">) and Child(</span><span class="hi italic">x</span><span class="monospace">) and (∃</span><span class="hi italic">n</span><span class="monospace">)(Person_age(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">n</span><span class="monospace">) and </span><span class="hi italic">n</span><span class="monospace"> &gt; 16))}</span>. </div>
                     
                     
                     <div class="counter"><a href="#p41">41</a></div>
                     <div class="ptext" id="p41">The user interfaces described thus do not commit the annotation system to the existence
                        of properties; in the formalization just sketched, there are no references to, or
                        variables denoting, properties. Informal reference to “properties” in English prose can be taken as just a manner of speaking about particular predicates.
                        It might be that a different annotation system could offer operations which <em class="emph">would</em> entail an ontological commitment to the existence of properties, but thus far we
                        have not managed to think of any plausible operation which would require such a commitment.<a class="noteRef" href="#d4e985">[12]</a></div>
                     
                     </div>
                  
                  
                  <div id="COR-practical" class="div div1">
                     
                     <h2 class="head">Two practical uses of ontology for text annotation systems</h2>
                     
                     
                     <div class="counter"><a href="#p42">42</a></div>
                     <div class="ptext" id="p42">The hierarchical structure of the tag set has two important practical uses. First,
                        it allows an annotation interface to present tags for selection using menus and submenus
                        whose structure reflects the user-defined hierarchy of the tag set. (From a strictly
                        philosophical point of view this may appear a minor point; from the user interface
                        point of view, it is not minor.)</div>
                     
                     
                     <div class="counter"><a href="#p43">43</a></div>
                     <div class="ptext" id="p43">Second, the supertag/subtag relation and the implicit relation of their intensions
                        licenses simple but important inferences about the properties of annotations and text
                        passages: every passage marked with the subtag may safely be inferred to possess the
                        properties in the intension of the supertag, and thus to be legitimately treated as
                        an instance of the supertag. In practice this means that it is convenient to be able
                        to ask an annotation system to identify all instances of a tag and have the software
                        return all annotations marked with either that tag or with any of its subtags, subsubtags,
                        and so on to all levels of subtag. It is the fact that subtags inherit the intension
                        and contribute to the extension of their supertags which justifies this inference
                        and makes it meaningful to allow the user to search for all instances of <span class="hi italic">female</span> annotations and be shown instances of the subtags <span class="hi italic">girl</span>, <span class="hi italic">woman</span>, etc., or to search for all instances of <span class="hi italic">adult</span> annotations and be shown instances of <span class="hi italic">man</span>, <span class="hi italic">woman</span>, etc.<a class="noteRef" href="#d4e1016">[13]</a> A clear understanding of the inferences licensed by the tag set's structure may make
                        it easier to export annotations for processing using reasoning systems.</div>
                     
                     
                     <div class="counter"><a href="#p44">44</a></div>
                     <div class="ptext" id="p44">There may be other uses for the ontology implicit in a CATMA tag set, but for our
                        further discussion we restrict ourselves to these two: guidance for the user interface
                        and annotation-management tools, and logical inference about the properties of annotations
                        and text passages.</div>
                     </div>
                  
                  </div>
               
               
               <div id="predication" class="div div0">
                  
                  <h1 class="head">Logical form and inferences</h1>
                  
                  
                  <div class="counter"><a href="#p45">45</a></div>
                  <div class="ptext" id="p45">We said <a href="#COR-commitments">above</a> that the universe of discourse relevant to a CATMA annotation scheme (tag set) includes
                     both annotations and text passages, and that each annotation class (tag) is associated
                     with some property that may hold of text passages. This is true but not the full story.
                     Some predicates take multiple arguments, and we need to extend our account to accommodate
                     such predicates.</div>
                  
                  
                  <div id="stup" class="div div1">
                     
                     <h2 class="head">Simple tags and unary predicates</h2>
                     
                     
                     <div class="counter"><a href="#p46">46</a></div>
                     <div class="ptext" id="p46">Every annotation annotates some text passage; as noted <a href="#COR-properties">above</a>, from our point of view this amounts to saying that every annotation asserts the
                        presence of some property in the text passage annotated. (For technical reasons we
                        are excluding the possibility of meta-annotation.) It follows that every predicate
                        representing the property associated with an annotation class must have at least one
                        argument position for a text passage. For the moment, we limit our discussion to tags
                        whose characteristic predicate has <em class="emph">only</em> that one argument (and is thus a unary predicate), which we will refer to as <em class="term">simple</em> tags.</div>
                     
                     
                     <div class="counter"><a href="#p47">47</a></div>
                     <div class="ptext" id="p47">Simple tags have a straightforward representation in symbolic form: for every simple
                        tag <span class="hi italic">t</span> there is some characteristic predicate <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">t</span></span>, which takes a single argument of type <span class="hi italic">text-passage</span>.<a class="noteRef" href="#d4e1061">[14]</a> For example, suppose a project interested in gender and age roles marks passages
                        in which characters of different ages and genders are mentioned, with the aim of comparing
                        the vocabulary used for males and females, or for children and adults. The project
                        may have tags named <span class="hi italic">woman</span>, <span class="hi italic">girl</span>, <span class="hi italic">man</span>, <span class="hi italic">boy</span>, each marking a passage in which a woman, girl, boy, or man is mentioned. The characteristic
                        predicates of these tags might be <span class="monospace">woman(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">girl(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">man(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">boy(</span><span class="hi italic">x</span><span class="monospace">)</span>, where <span class="hi italic">x</span> in each case is a variable denoting a text passage. Generic tags <span class="hi italic">female</span>, <span class="hi italic">male</span>, <span class="hi italic">child</span>, and <span class="hi italic">adult</span> might also be provided, in case a reference is specific in one way but not in the
                        other.</div>
                     
                     
                     <div class="counter"><a href="#p48">48</a></div>
                     <div class="ptext" id="p48">If the generic tags are used as supertags and the more specific tags as subtags, the
                        logical relation of the subtags to the supertags can be expressed formally in a very
                        simple way: for any supertag <span class="hi italic">A</span> and subtag <span class="hi italic">B</span>, with characteristic predicates of the same name, the meaning of the subtag / supertag
                        relation is “any annotation in class <span class="hi italic">B</span> is also in class <span class="hi italic">A</span>,” or equivalently “any text passage which exhibits property <span class="hi italic">B</span> also exhibits property <span class="hi italic">A</span>.” Formally, this can be expressed by the logical expression 
                        <blockquote> 
                           <div class="ptext"><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(B(</span><span class="hi italic">x</span><span class="monospace">) ⇒ A(</span><span class="hi italic">x</span><span class="monospace">))</span></div> </blockquote> This may be read “For all <span class="hi italic">x</span>, if B(<span class="hi italic">x</span>) applies, then A(<span class="hi italic">x</span>) applies”, or “For any <span class="hi italic">x</span>, if <span class="hi italic">x</span> has property <span class="hi italic">B</span>, then <span class="hi italic">x</span> has property <span class="hi italic">A</span>.”</div>
                     
                     
                     <div class="counter"><a href="#p49">49</a></div>
                     <div class="ptext" id="p49">More concretely, if <span class="hi italic">male</span> and <span class="hi italic">female</span> are used as supertags for the age and gender tag set, the inference rules will take
                        forms like this: 
                        	
                        <blockquote>
                           <div class="ptext"><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(girl(</span><span class="hi italic">x</span><span class="monospace">) ⇒ female(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(woman(</span><span class="hi italic">x</span><span class="monospace">) ⇒ female(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(boy(</span><span class="hi italic">x</span><span class="monospace">) ⇒ male(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(man(</span><span class="hi italic">x</span><span class="monospace">) ⇒ male(</span><span class="hi italic">x</span><span class="monospace">))</span></div> </blockquote> 
                        Note that the following inference rules also apply, given the meanings indicated for
                        these tags, but will be known to the system automatically only if a subtag can have
                        two different supertags. If a tag set must form a strict hierarchy, these inferences
                        will not be automatic. 
                        <blockquote> 
                           <div class="ptext"><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(girl(</span><span class="hi italic">x</span><span class="monospace">) ⇒ child(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(woman(</span><span class="hi italic">x</span><span class="monospace">) ⇒ adult(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(boy(</span><span class="hi italic">x</span><span class="monospace">) ⇒ child(</span><span class="hi italic">x</span><span class="monospace">))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(man(</span><span class="hi italic">x</span><span class="monospace">) ⇒ adult(</span><span class="hi italic">x</span><span class="monospace">))</span> </div>
                        </blockquote> An annotation system might conceivably allow the user to specify inference rules
                        like these explicitly, but that seems unlikely to make the user interface seem simple
                        and intuitive. For that reason we are particularly interested in ways that allow the
                        applicable inference rules to be constructed automatically from the ontology specified
                        by the user in the course of defining the tag set.</div>
                     </div>
                  
                  
                  <div id="npnp" class="div div1">
                     
                     <h2 class="head">Tags with named properties and <span class="hi italic">n</span>-ary predicates</h2>
                     
                     
                     <div class="counter"><a href="#p50">50</a></div>
                     <div class="ptext" id="p50">Often, the properties we wish to discuss hold not of a single individual but of two
                        or more individuals as a group. In symbolic logic, such properties are conventionally
                        represented using predicates which take more than one argument. A sentence might take
                        the form <span class="monospace">P(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">y</span><span class="monospace">)</span> or <span class="monospace">P(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">y</span><span class="monospace">, </span><span class="hi italic">z</span><span class="monospace">)</span>, instead of just <span class="monospace">P(</span><span class="hi italic">x</span><span class="monospace">)</span>. See, for example, the discussion <a href="#definitions">above</a> about ways of representing the proposition that Frege was born in 1848.</div>
                     
                     
                     <div class="counter"><a href="#p51">51</a></div>
                     <div class="ptext" id="p51">As mentioned <a href="#CATMA_annotation">above</a>, CATMA allows the definer of a tag set to associate a set of named properties with
                        each tag, with suggested values for each. When creating an annotation, the annotator
                        can supply a value for each named property, selecting one of the suggested values
                        or supplying a different one. Thus instead of the tags <span class="hi italic">woman</span>, <span class="hi italic">girl</span>, <span class="hi italic">man</span>, and <span class="hi italic">boy</span> described in the preceding section, our imaginary tag set for age and gender roles
                        might have a single tag <span class="hi italic">character</span>, with the named properties <span class="hi italic">age</span> (with suggested values like <span class="monospace">infant</span>, <span class="monospace">child</span>, <span class="monospace">adolescent</span>, <span class="monospace">adult</span>) and <span class="hi italic">gender</span> (with suggested values like <span class="monospace">male</span>, <span class="monospace">female</span>, and <span class="monospace">3d-sex</span>.<a class="noteRef" href="#d4e1384">[15]</a> The characteristic property of <span class="hi italic">character</span> might then be formulated as “[this passage] describes a character with the indicated age and gender”, and its characteristic predicate might be written <span class="monospace">character(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">y</span><span class="monospace">, </span><span class="hi italic">z</span><span class="monospace">)</span>, where <span class="hi italic">x</span> is a text passage, <span class="hi italic">y</span> an keyword indicating an age, and <span class="hi italic">z</span> a keyword indicating gender. The logical representations for passages describing
                        women, girls, men, and boys might take forms like these: 
                        <blockquote> 
                           <div class="ptext"><span class="monospace">character(</span><span class="hi italic">x</span><span class="monospace">, adult, female)</span> <br /><span class="monospace">character(</span><span class="hi italic">x</span><span class="monospace">, child, female)</span> <br /><span class="monospace">character(</span><span class="hi italic">x</span><span class="monospace">, adult, male)</span> <br /><span class="monospace">character(</span><span class="hi italic">x</span><span class="monospace">, child, male)</span> </div> </blockquote> </div>
                     
                     </div>
                  
                  
                  <div id="ssnp" class="div div1">
                     
                     <h2 class="head">Supertag/subtag relations and <span class="hi italic">n</span>-ary predicates</h2>
                     
                     
                     <div class="counter"><a href="#p52">52</a></div>
                     <div class="ptext" id="p52">The logical relations of the characteristic properties of different tags become a
                        little more complex when the tag-set design patterns described in the preceding sections
                        are used together.</div>
                     
                     
                     <div class="counter"><a href="#p53">53</a></div>
                     <div class="ptext" id="p53">Logically speaking, a single <span class="hi italic">character</span> tag suffices for the purposes described. But using it can be slightly tedious, requiring
                        that the annotator mark a passage, select the tag, and then specify values for one
                        or more named properties. It is perceptibly more convenient just to mark a passage
                        and choose a tag. So for practical purposes, we might want a generic <span class="hi italic">character</span>, with named properties as described <a href="#npnp">above</a>, and also a set of more specific subtags for use in common cases: <span class="hi italic">girl</span>, <span class="hi italic">woman</span>, etc. Such a tag set can be put to good use, with appropriate support from the annotation
                        system. Some of the desiderata are not (as far as we know) now supported by CATMA,
                        so in the following discussion, our descriptions of things that annotation software
                        might do are not descriptions of existing software but of software that could be constructed
                        and which would (we think) be useful to those designing tag sets and restructuring
                        their tag sets in the light of experience with their use on real texts.</div>
                     
                     
                     <div class="counter"><a href="#p54">54</a></div>
                     <div class="ptext" id="p54">But what kinds of support would be helpful, and how can the ontology implicit in the
                        design of the tag set be used to allow that support?</div>
                     
                     
                     <div class="counter"><a href="#p55">55</a></div>
                     <div class="ptext" id="p55">Let us consider the case of a <span class="hi italic">trope</span> tag for marking of rhetorical tropes. An annotator might start work with just the
                        one tag, using a named property (say, <span class="hi italic">type</span>) to identify the specific figure of speech appearing in the text, with a list of
                        suggested values: <span class="monospace">metaphor</span>, <span class="monospace">metonymy</span>, <span class="monospace">synecdoche</span>, and <span class="monospace">irony</span>, with other values to be supplied during annotation as needed. As annotation proceeds,
                        the annotator decides that it would be convenient to have one-click tags for metaphor,
                        metonymy, synecdoche, and irony. The idea is that tagging a passage as a <span class="hi italic">metaphor</span> should be equivalent to tagging it as a <span class="hi italic">trope</span> with the named property <span class="hi italic">type</span> given the value “<span class="monospace">metaphor</span>”, and similarly for the other subtags.</div>
                     
                     
                     <div class="counter"><a href="#p56">56</a></div>
                     <div class="ptext" id="p56">This can be formalized in either of two ways. If the subtags are assumed to have unary
                        characteristic predicates, and the supertag a binary characteristic predicate, then
                        the appropriate inference rules would be 
                        <blockquote> 
                           <div class="ptext"><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(metaphor(</span><span class="hi italic">x</span><span class="monospace">) ⇒ trope(</span><span class="hi italic">x</span><span class="monospace">, metaphor))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(metonymy(</span><span class="hi italic">x</span><span class="monospace">) ⇒ trope(</span><span class="hi italic">x</span><span class="monospace">, metonymy))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(synecdoche(</span><span class="hi italic">x</span><span class="monospace">) ⇒ trope(</span><span class="hi italic">x</span><span class="monospace">, synecdoche))</span> <br /><span class="monospace">(∀ </span><span class="hi italic">x</span><span class="monospace">)(irony(</span><span class="hi italic">x</span><span class="monospace">) ⇒ trope(</span><span class="hi italic">x</span><span class="monospace">, irony))</span> </div> </blockquote> </div>
                     
                     
                     <div class="counter"><a href="#p57">57</a></div>
                     <div class="ptext" id="p57">In simple cases like this one, where each subtag has a name identical to a suggested
                        value of a named property on the supertag, we can imagine a user interface that allows
                        a user to define the supertag and then request that a subtag be generated automatically
                        for each suggested value of the named property. The system could also search systematically
                        for uses of the supertag with the suggested values, and re-tag them using the new
                        subtag.</div>
                     
                     
                     <div class="counter"><a href="#p58">58</a></div>
                     <div class="ptext" id="p58">Another approach to this operation would use the same characteristic predicate for
                        the supertag and each subtag, so that instead of the characteristic predicates <span class="monospace">metaphor(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">metonymy(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">synecdoche(</span><span class="hi italic">x</span><span class="monospace">)</span>, and <span class="monospace">irony(</span><span class="hi italic">x</span><span class="monospace">)</span>, the subtags would have the characteristic predicates 
                        <ul class="list">
                           <li class="item"><span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metaphor)</span></li>
                           <li class="item"><span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metonymy)</span></li>
                           <li class="item"><span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, synecdoche)</span></li>
                           <li class="item"><span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, irony)</span></li>
                        </ul> The supertag would have the characteristic predicate 
                        <ul class="list">
                           <li class="item"><span class="monospace">(∃</span><span class="hi italic">y</span><span class="monospace">)(trope(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">y</span><span class="monospace">))</span></li>
                        </ul> In this case, no special inference rules would be needed to define the relation of
                        the characteristic predicates of the subtags and the supertags. Instead, the named
                        property of the supertag would be inherited by each subtag, and for each subtag it
                        would automatically be assigned the appropriate value.<a class="noteRef" href="#d4e1630">[16]</a></div>
                     
                     
                     <div class="counter"><a href="#p59">59</a></div>
                     <div class="ptext" id="p59">If the supertag has more than one named property (like the <span class="hi italic">character</span> tag), then the user will need to specify which named properties to use for generating
                        the subtags, and the user may well need to provide the names of the subtags. If the
                        <span class="hi italic">character</span> tag has two named properties with exhaustive lists of possible values: 
                        <ul class="list">
                           <li class="item">
                              <div class="ptext"><span class="hi italic">age</span>: one of <span class="monospace">infant</span>, <span class="monospace">child</span>, <span class="monospace">adolescent</span>, <span class="monospace">adult</span></div>
                           </li>
                           <li class="item">
                              <div class="ptext"><span class="hi italic">gender</span>: one of <span class="monospace">male</span>, <span class="monospace">female</span>, <span class="monospace">3d-sex</span></div> </li>
                        </ul> then the system could automatically generate subtags for the Cartesian product of
                        the two named properties, as well as subtags for cases where only one named property
                        is specified: “male infant”, “female infant”, “3d-sex infant”, “infant”, “male child” (i.e. <span class="hi italic">boy</span>), “female child” (<span class="hi italic">girl</span>), “3d-sex child”, “child”, etc.</div>
                     
                     
                     <div class="counter"><a href="#p62">62</a></div>
                     <div class="ptext" id="p62">Also useful, but perhaps more challenging both from a logical point of view and for
                        the software developer, would be analogous operations which group an existing set
                        of tags together as subtags of a new supertag. Let us imagine that an annotator has
                        begun work on a novel by tagging the places at which specific characters are described:
                        in the case of <cite class="title">Heidi</cite>, the annotator might have created tags for most of the speaking characters: Heidi,
                        Dete, the Alpen-Ohi, Peter, and so on. The annotator may then realize that for purposes
                        of analysis it would be helpful to treat all female characters as a class, and similarly
                        for the males, so they may wish to create new supertags for female and male characters.
                        In this case, the characteristic predicates constructed by the software are all likely
                        to be unary predicates. The user might then create the appropriate named properties
                        for the supertags and describe how the named properties and their values apply to
                        the subtags, but otherwise the software can have no basis for constructing any <span class="hi italic">n</span>-ary characteristic predicates.</div>
                     
                     
                     <div class="counter"><a href="#p63">63</a></div>
                     <div class="ptext" id="p63">The operations described so far can all be offered in an annotation system with hierarchical
                        annotation ontologies, at least in a limited way, but we think the system can be more
                        useful if the hierarchical constraint is relaxed, so that existing subtags can be
                        grouped together into multiple overlapping supertags: <span class="hi italic">girl</span> and <span class="hi italic">woman</span> being grouped into <span class="hi italic">female characters</span>, while <span class="hi italic">girl</span> and <span class="hi italic">boy</span> are grouped together into <span class="hi italic">child</span>.</div>
                     
                     
                     <div class="counter"><a href="#p64">64</a></div>
                     <div class="ptext" id="p64">Other patterns are doubtless possible for the automatic creation of subtypes from
                        supertypes, or the grouping of types into a new supertype. We hope, however, that
                        the simple examples we have described illustrate ways in which software can provide
                        convenient facilities for managing and restructuring an annotation tag set in coherent
                        and consistent ways, if the software is built to pay attention to the characteristic
                        predicates implicit in the definitions of tags, and to the logical relations among
                        characteristic predicates implied by the ontology of the tag set.</div>
                     
                     </div>
                  </div>
               
               
               <div id="trees" class="div div0">
                  
                  <h1 class="head">Are ontologies trees?</h1>
                  
                  
                  <div class="counter"><a href="#p65">65</a></div>
                  <div class="ptext" id="p65">In its current version, CATMA requires that tag sets be organized into sets of hierarchically
                     ordered classes. But nothing in the definitions of ontology and classification schemes
                     offered <a href="#definitions">above</a> entails that an ontology or classification scheme must be structured in this way.</div>
                  
                  
                  <div class="counter"><a href="#p66">66</a></div>
                  <div class="ptext" id="p66">There is however a fairly widespread idea that a properly specified ontology <em class="emph">ought</em> to define a hierarchy, and many influential ontologies and classification schemes
                     do so. For example, a recent white paper on best practices of ontology development
                     insists that: “All ontologies include one or more central backbone hierarchies in which the relation
                     of subtype (aka is_a) connect the nodes. Each backbone hierarchy has a single root
                     node” [<a class="ref" href="#rudnicki_etal2016">Rudnicki et al. 2016</a>].<a class="noteRef" href="#d4e1746">[17]</a></div>
                  
                  
                  <div class="counter"><a href="#p67">67</a></div>
                  <div class="ptext" id="p67">If we start with a collection of physical objects and seek to organize them, it is
                     natural or at least common to partition them first into subgroups according to some
                     property and then to partition each subgroup in turn according to further properties,
                     repeating the process until the resulting groups are felt to need or allow no further
                     division. (A set of subclasses <em class="term">partitions</em> a superclass if and only if every member of the superclass is a member of exactly
                     one subclass.)</div>
                  
                  
                  <div class="counter"><a href="#p68">68</a></div>
                  <div class="ptext" id="p68">For example, an anthropological museum might organize artefacts first by the source
                     culture and then by function, or (as in the case of the Pitt-Rivers museum in Oxford)
                     first by function and then by source. Any such procedure of repeated division of a
                     group into subgroups will produce a set of classes nesting in other classes, which
                     can be understood as forming a hierarchy, or (what amounts to the same thing) a (rooted)
                     tree.</div>
                  
                  
                  
                  
                  <div class="counter"><a href="#p69">69</a></div>
                  <div class="ptext" id="p69">For classifications that do not involve physical objects, the primary advantage of
                     unique assignment to classes in a hierarchy appears to be the ability to calculate
                     sums without including anything twice. But while guidance for the physical arrangement
                     of objects and assistance in preparing aggregate statistics are in practice important
                     use cases for some classification systems, neither is a necessity of classification
                     or of ontology. </div>
                  
                  
                  <div class="counter"><a href="#p70">70</a></div>
                  <div class="ptext" id="p70">On the contrary: as is illustrated by our running example of a tag set for descriptions
                     of characters classed by gender and age, a strictly hierarchical arrangement can easily
                     hinder rather than aiding the analysis. We may, for example, choose to divide first
                     by gender and then by age: 
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure03.svg" rel="external"><img src="resources/images/figure03.svg" style="" alt="A tree diagram showing the category of  subdivided into , , and , with additional subdivisions by age." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 3. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p71">71</a></div>
                  <div class="ptext" id="p71">In this case, however, we will have no classes in the system in which we can find
                     all babies, all children, all adolescents, or all adults. We could obtain such classes
                     by reversing the order in which properties are used to subdivide the classes, but
                     then we would have no class for all members of a given gender:
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure04.svg" rel="external"><img src="resources/images/figure04.svg" style="" alt="A tree diagram showing the category of  subdivided into , , , and , with additional subdivisions by gender." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 4. </div>
                        </div>
                     </div> </div>
                  
                  
                  <div class="counter"><a href="#p72">72</a></div>
                  <div class="ptext" id="p72">We will not belabor the point further. We believe that this simple example suffices
                     to show that for practical use in some situations a hierarchical arrangement of classes
                     will be more hindrance than help. We conclude that ontologies need not be trees, and
                     that in some contexts they should not be trees.</div>
                  
                  
                  <div class="counter"><a href="#p73">73</a></div>
                  <div class="ptext" id="p73">Note also that annotation systems like CATMA allow the same passage to be annotated
                     using more than one tag. It follows that the classification of text passages made
                     explicit by a given collection of annotations cannot in any case be guaranteed to
                     form a tree, because the same text passage may fall into multiple classes.</div>
                  </div>
               
               
               <div id="lattices" class="div div0">
                  
                  <h1 class="head">Are ontologies lattices?</h1>
                  
                  
                  <div class="counter"><a href="#p74">74</a></div>
                  <div class="ptext" id="p74">If a hierarchy cannot be used to impose order on a tag set, what kind of organizing
                     principle can be found to aid us in thinking about and navigating it? We believe a
                     set of annotation classes can usefully be organized around the question “is the extension of tag A a subset of the extension of tag B?” or “is the intension of tag A a superset of the intension of tag B?” Such relations cannot always be organized into a hierarchy, but they can always be
                     used as the organizing principle of a lattice.</div>
                  
                  
                  <div class="counter"><a href="#p75">75</a></div>
                  <div class="ptext" id="p75">Mathematically, a lattice is described as an algebra satisfying certain constraints
                     on two operators (or, equivalently, as any partially ordered set). The interested
                     reader is directed to other sources for a full account; we content ourselves here
                     with a few examples illustrating the salient features of lattices and showing how
                     lattices can be formed from sets on the basis of the subset relation (which is, mathematically
                     speaking, a partial ordering over the set of sets). If we consider the set {a, b,
                     c} and all of its possible subsets, the resulting lattice can be drawn thus:<a class="noteRef" href="#d4e1844">[18]</a>
                     	
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure05.svg" rel="external"><img src="resources/images/figure05.svg" style="" alt="A diagram of a lattice showing interconnections between multiple nodes." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 5. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p76">76</a></div>
                  <div class="ptext" id="p76">As may be seen, each node in the lattice is a subset of those above it to which it
                     is connected directly or indirectly by edges going upwards, and a superset of those
                     to which it is connected by edges going downwards. The node at the top of the lattice,
                     often written ⊤, is a superset of every node in the lattice and contains everything
                     in the universe of discourse. The node at the bottom, often written ⊥, is the empty
                     set (and thus guaranteed to be a subset of every node in the lattice). It may also
                     be observed that a subset is directly connected to a superset by an edge only if there
                     is no third set which is a superset of the first and subset of the second.</div>
                  
                  
                  <div class="counter"><a href="#p77">77</a></div>
                  <div class="ptext" id="p77">If we arrange sets of human characters (or, what comes out in this case to the same
                     thing, sets of text passages referring to humans) into groups by age and gender stereotypes,
                     distinguishing males, females, and intersex or third-sex individuals on the one hand
                     and infants, children, adolescents, and adults on the other, then the sets can be
                     visualized using the following demographic lattice. For simplicity, we assume that
                     both gender and age are always either fully specified or not specified at all. It
                     is possible to account for partially specified features in a lattice (a character
                     who is not yet adolescent may be either an infant or a child), but doing so adds a
                     lot of nodes to this lattice and does not much assist the reader.
                     	
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure06.svg" rel="external"><img src="resources/images/figure06.svg" style="" alt="A diagram showing a lattice with all specific identity categories (e.g. humans, infants, males, children, etc.) and all of their possible combinations (e.g. infant females, intersex adults, etc.)." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 6. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p78">78</a></div>
                  <div class="ptext" id="p78">It is not required that every combination of features be realized by a node in the
                     lattice; if we defined tags only for all characters (all humans), female characters,
                     children, third-sex characters, men, women, girls, and boys, the tags would form the
                     following somewhat simpler lattice.
                     	
                     <div class="figure">
                        		
                        		<a href="resources/images/figure07.svg" rel="external"><img src="resources/images/figure07.svg" style="" alt="A diagram showing a simplified lattice with only the specific feature combinations manifested in actual characters." /></a>
                        	
                        <div class="caption-no-label">
                           <div class="label">Figure 7. </div>
                        </div>
                     </div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p79">79</a></div>
                  <div class="ptext" id="p79">It is characteristic of all lattices that for any two nodes there is a unique nearest
                     common ancestor, their <em class="term">meet</em>, and a unique nearest common descendant, their <em class="term">join</em>.<a class="noteRef" href="#d4e1953">[19]</a> In the first lattice shown, the meet and join of any two sets are the union and intersection
                     of the sets, respectively. In the two lattices showing demographic groupings of characters,
                     the union and intersection of the sets represented by two nodes of the graph may or
                     may not be present; the meet of <span class="hi italic">men</span> and <span class="hi italic">children</span> is the node <span class="hi italic">humans</span>, which is not the union of <span class="hi italic">men</span> and <span class="hi italic">children</span> but a superset of it. And in the second demographic lattice, the join of <span class="hi italic">3rd-sex</span> and <span class="hi italic">children</span> is not their intersection but the empty set at the bottom of the lattice. It is guaranteed
                     that in a lattice defined as these are by the subset relation, the meet of two nodes
                     will be a superset of their union, and the join of two nodes will be a subset of their
                     intersection.</div>
                  
                  
                  <div class="counter"><a href="#p80">80</a></div>
                  <div class="ptext" id="p80">Observe that just as menus and submenus can be structured hierarchically to match
                     a hierarchical arrangement of annotation classes, so also the lattice diagram may
                     be used to guide the creation of menus: each node <span class="hi italic">n</span> in the lattice will be represented by a menu choice, and each will have a submenu
                     listing all the nodes below <span class="hi italic">n</span> and directly connected to <span class="hi italic">n</span> by an arc. The sole difference between the hierarchically arranged menus and those
                     built from the lattice is that in the latter there may be more than one path from
                     the top node of the lattice to a given tag. In the demographic lattices, the node
                     for girls may be reached from the top node either by selecting first <span class="hi italic">females</span> and then <span class="hi italic">girls</span>, or by selecting first <span class="hi italic">children</span> and then <span class="hi italic">girls</span>.</div>
                  
                  
                  <div class="counter"><a href="#p81">81</a></div>
                  <div class="ptext" id="p81">In the tree-based system now used by CATMA, the supertags of any tag are always visible
                     when their subtags are selected; in a lattice-based system, it might be convenient
                     to provide a way to navigate from any tag to any of its supertags.</div>
                  
                  
                  <div class="counter"><a href="#p82">82</a></div>
                  <div class="ptext" id="p82">Observe also that inferences over annotation classes and text passages are supported
                     by the lattice structure, in just the same way and for the same reasons as in a tree
                     structure: the applicability of any subtag licenses an inference to the applicability
                     of all of its supertags.</div>
                  
                  </div>
               
               
               <div id="operations" class="div div0">
                  
                  <h1 class="head">Defining annotation classes by operations on existing classes</h1>
                  
                  
                  <div class="counter"><a href="#p83">83</a></div>
                  <div class="ptext" id="p83">CATMA allows the definition of a new tag (annotation class) either as a top-level
                     tag in a tag set or as a subtag of an existing tag. This suffices for convenient definition
                     of a hierarchy of classes, though additional facilities can be imagined.</div>
                  
                  
                  <div class="counter"><a href="#p84">84</a></div>
                  <div class="ptext" id="p84">To manage a tag set modeled as a lattice, interfaces like those now present in CATMA
                     can be used, as well as the definition methods sketched in <a href="#ssnp">the section on the subtag/supertag relation for <span class="hi italic">n</span>-ary predicates</a> above. As described there, for example, it would be convenient to be able to generate
                     subtags for the possible values of the supertag's argument(s). From <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, </span><span class="hi italic">y</span><span class="monospace">)</span> with <span class="hi italic">y</span> ∈ {metaphor, metonymy, synecdoche, irony}, for example, it would be convenient to
                     be able to generate four subtags <span class="monospace">metaphor(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">metonymy(</span><span class="hi italic">x</span><span class="monospace">)</span>, <span class="monospace">synecdoche(</span><span class="hi italic">x</span><span class="monospace">)</span>, and <span class="monospace">irony(</span><span class="hi italic">x</span><span class="monospace">)</span>.<a class="noteRef" href="#d4e2061">[20]</a> It would also be convenient if, in a related operation, existing instances of the
                     supertag were retagged as instances of the new subtags, for the benefit of software
                     unaware of the equivalence between the predicates <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metaphor)</span> and <span class="monospace">metaphor(</span><span class="hi italic">x</span><span class="monospace">)</span> and similar pairs.</div>
                  
                  
                  <div class="counter"><a href="#p85">85</a></div>
                  <div class="ptext" id="p85">Other methods of definition are also imaginable and may be desirable (assuming that
                     the user interface can make the possibilities visible without confusing the user unaccustomed
                     to looking at logical formulae). 
                     <ul class="list">
                        <li class="item"> 
                           <div class="ptext">While retaining the subset/superset relation between the extension of the subtag and
                              the extension of the supertag (and the inverse relation on their intensions), it would
                              be convenient to be able to declare a new tag as a subtag of multiple supertags.</div> 
                           <div class="ptext">One might, for example, define an annotation class for metaphors applied to female
                              characters as a subtag both of <span class="hi italic">female</span> and of <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metaphor)</span>.</div> </li>
                        <li class="item"> 
                           <div class="ptext">It would also be helpful to be able to add a new sub/super relation between existing
                              tags.</div> 
                           <div class="ptext">For example, if one has already defined annotation classes for metaphors and for metaphors-applied-to-women,
                              and adds a new class for passages in which women are characterized, one might want
                              to specify that the new class is a superclass of the existing class for metaphors-applied-to-women.</div> 
                           <div class="ptext">(When this is done, the software would need to prune any existing arcs rendered redundant
                              by the change. If the addition of a direct subtag/supertag link produces a situation
                              in which tag <span class="hi italic">A</span> and <span class="hi italic">B</span> are both subtags of <span class="hi italic">C</span>, and <span class="hi italic">A</span> is also a subtag of <span class="hi italic">B</span>, then the direct subtag/supertag link between <span class="hi italic">A</span> and <span class="hi italic">C</span> should be removed. The software will also need to check for, and prevent, cycles
                              in the subset/superset relation. It must not be the case that any class is directly
                              or indirectly its own sub- or superclass.)</div> 
                           <div class="ptext"></div> </li>
                        <li class="item"> 
                           <div class="ptext">It would be convenient to be able to define a new tag as the union or intersection
                              of two or more existing tags (assuming that their union or intersection is not already
                              present in the lattice). These operations make explicit the subset/superset relations
                              holding among the supertags and the subtags (and by implication also the relations
                              holding among the intensions of the classes).</div> 
                           <div class="ptext">For example, in the smaller demographic lattice, a user might like to define a new
                              tag <span class="hi italic">males</span> as the union of <span class="hi italic">men</span> and <span class="hi italic">boys</span>, or a new tag <span class="hi italic">third-sex adults</span> as the intersection of <span class="hi italic">3rd sex</span> and <span class="hi italic">adults</span>.</div> 
                           <div class="ptext">(In this case, too, the software will need to perform maintenance on the set of direct
                              supertag/subtag links.)</div> 
                           <div class="ptext"></div> </li>
                     </ul> </div>
                  
                  </div>
               
               
               <div id="conclusion" class="div div0">
                  
                  <h1 class="head">Conclusion</h1>
                  
                  
                  <div class="counter"><a href="#p96">96</a></div>
                  <div class="ptext" id="p96">We believe we have shown that in modelling ontologies for annotation systems like
                     CATMA, lattices have advantages over trees. As other formalisms might of course also
                     have been considered, our claim does not go beyond that.</div>
                  
                  
                  <div class="counter"><a href="#p97">97</a></div>
                  <div class="ptext" id="p97">Ontologies — both in general and in the context of textual annotation software — are
                     not usefully defined as trees. They are more usefully defined as lattices.</div>
                  
                  </div>
               
               	
               
               
               
               </div>
            
            <div id="notes">
               <h2>Notes</h2>
               <div class="endnote" id="d4e208"><span class="noteRef lang en">[1] This paper began as a contribution to the 3d forTEXT workshop “Non-hierarchical concept ontologies and markup schemata”, held at the University of Hamburg on 24 and 25 January 2020. Our thanks go to Professor
                     Jan Christoph Meister for the invitation, and to him as well as the other speakers
                     at the workshop and the CATMA team for valuable comments and feedback.</span></div>
               <div class="endnote" id="d4e248"><span class="noteRef lang en">[2] Some philosophers will object that ontology as pursued by Quine is not at all the
                     same as the ontology pursued by earlier philosophers, i.e. a general theory about
                     what kinds of things there are, but “a quite different set of preoccupations” [<a class="ref" href="#macintyre1967">MacIntyre 1967</a>].</span></div>
               <div class="endnote" id="d4e255"><span class="noteRef lang en">[3]  The philosopher Barry Smith suggests that “[m]ost prominent information-systems ontologists in recent years ... have come to
                     hold that ontology deals not with reality itself but rather with ‘alternative possible
                     worlds,’” [<a class="ref" href="#smith2003b">Smith 2003b</a>, 160–161], and worries that “we must find ways to do justice to the fact that the different conceptualizations
                     which serve as inputs to ontology are likely to be ... mutually inconsistent” [<a class="ref" href="#smith2003b">Smith 2003b</a>, 162].<br /><br /> Quine's view was that ontology should be based on the theories and results of the
                     natural sciences. Smith views some recent developments with concern: “... the running together of ontology and ontological commitments becomes strikingly
                     less defensible when the ontological commitments of various specialist groups of nonscientists
                     are allowed into the mix. How, ontologically, are we to treat the commitments of astrologists,
                     or clairvoyants, or believers in leprechauns?” [<a class="ref" href="#smith2003b">Smith 2003b</a>, 158].<br /><br /> Since annotation systems like CATMA do not seek to unify the disparate ontologies
                     of different annotators, however, the problem of merging ontologies from different
                     sources is not of immediate concern in the current context.</span></div>
               <div class="endnote" id="d4e455"><span class="noteRef lang en">[4]  A cautionary note is necessary at this point. If we allow classes or sets of things
                     to be themselves objects of which we can predicate this or that property we may soon
                     end up in situations known as Russell's Paradox. The set of all sets that are not
                     members of themselves is both a member of itself and not a member of itself. Even
                     predicates which do not hold of sets can be problematic if sets are involved in the
                     definition, for example: the property “is a male barber who shaves all those males who do not shave themselves”<br /><br /> We will not elaborate on ways of avoiding this problem here; it suffices for our
                     purpose to say that (we believe) Russell's Paradox will pose no danger for an annotation
                     system in which annotations and the text passages to which they apply are disjoint
                     sets. The addition of meta-annotations which apply to first-level annotations is also
                     unproblematic, as long as meta-annotations cannot apply to meta-annotations, thus
                     ensuring that the snake is kept from consuming its own tail.</span></div>
               <div class="endnote" id="d4e513"><span class="noteRef lang en">[5] As of December 2019, the number of estimated active users was more than 8,000 [<a class="ref" href="#horstmann2020">Horstmann 2020</a>, 160].</span></div>
               <div class="endnote" id="d4e532"><span class="noteRef lang en">[6] In the following, we will refer to properties in CATMA as <em class="emph">named properties</em>, in order to distinguish properties as defined in CATMA from properties in general.</span></div>
               <div class="endnote" id="d4e555"><span class="noteRef lang en">[7] Admittedly, CATMA does not enforce a single-rooted tree, but a single root can always
                     be enforced on any CATMA tag set.</span></div>
               <div class="endnote" id="d4e560"><span class="noteRef lang en">[8] The screenshots shown below come from the author's CATMA annotation of a snippet of
                     [<a class="ref" href="#spyri1880">Spyri 1880</a>] <cite class="title italic">Heidi</cite>. The annotations have been made exclusively for illustrative purposes.</span></div>
               <div class="endnote" id="d4e652"><span class="noteRef lang en">[9]  If the search interface allows Boolean operations, as most serious search interfaces
                     do, then both tag sets can express the same sets of searches, but not always with
                     equal convenience. In this simple example, we believe a search for <span class="hi italic">Male</span> is more convenient than a search for <span class="hi italic">Man OR Boy</span>, and a search for <span class="hi italic">Child</span> more convenient than one for <span class="hi italic">Girl or Boy</span>. If the tag set has a finer granularity, the difference is more striking: using the
                     lattice example given below, the choice is between allowing the query <span class="hi italic">Male</span> vs <span class="hi italic">Baby_Boy OR Boy OR Male_Adolescent OR Man</span>. <br /><br /> </span></div>
               <div class="endnote" id="d4e699"><span class="noteRef lang en">[10] A brief digression may be necessary here. In the usual case, the properties used to
                     organize a classification scheme belong to the things being classified. In the case
                     of annotations whose purpose is to ascribe some particular property to text passages,
                     however, the relevant property is the one ascribed to the text passage — which may
                     in turn reflect some property belonging to a character, object, or event mentioned
                     or depicted in the text. In the novel <cite class="title">Heidi</cite>, for example, the title character has the property (among others) of being a child;
                     call that property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">c</span></span>. <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">c</span></span> is a property belonging to human beings, whether real or imaginary, but not to text
                     passages or annotations. A text passage mentioning Heidi, in turn, has the property
                     (call it <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">mc</span></span>) of mentioning a child (that is, a character with property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">c</span></span>). Property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">mc</span></span> pertains to text passages, not to human beings or annotations. An annotation attributing
                     property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">mc</span></span> to a text passage has a property we might call <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">amc</span></span>: the property of attributing property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">mc</span></span> to a text passage which mentions a character with property <span class="hi italic">P</span><span class="hi subscript"><span class="hi italic">c</span></span>. There are situations in which it is important to distinguish carefully among these
                     three properties, but in practice there is seldom any confusion, precisely because
                     they apply to very different classes of things.<br /><br /> Our usage is accordingly relaxed about the distinctions just made. When we describe
                     the characteristic properties of annotation classes, it is normally simpler to focus
                     on the properties being ascribed to the text passages annotated than to focus on the
                     property pertaining to the annotation itself. Readers who prefer to avoid this metonymy
                     may wish to mentally add the words “attributes to a text passage the property ...” at the beginning of a description.<br /><br /></span></div>
               <div class="endnote" id="d4e784"><span class="noteRef lang en">[11]  The nature of text passages and how they may most usefully be represented in electronic
                     form are interesting and important questions but we will not attempt to address them
                     here. CATMA provides an operational answer to these questions which is sufficiently
                     functional to allow us to take “text passage” as a well defined concept for our discussion.</span></div>
               <div class="endnote" id="d4e985"><span class="noteRef lang en">[12] <br /><br /></span></div>
               <div class="endnote" id="d4e1016"><span class="noteRef lang en">[13] It may seem like exaggeration to describe this class/subclass relation as a matter
                     of logical inference, but we believe it is no exaggeration. It is a curious fact that
                     most of the theorems proved by theorem-proving systems and logic programs have very
                     little mathematical or philosophical interest, in part because from such a point of
                     view they are seen as trivial. But the ability of logical inference to guide the operation
                     of programs is nevertheless quite convenient for those who would like to have well
                     behaved software with well defined operations.</span></div>
               <div class="endnote" id="d4e1061"><span class="noteRef lang en">[14] In practice CATMA represents a text passage not as an atomic value but as a structure
                     with both an offset (starting point) and length. We elide the details, because for
                     purposes of this discussion the internal structure of the representation of a text
                     passage is immaterial.</span></div>
               <div class="endnote" id="d4e1384"><span class="noteRef lang en">[15] To avoid confusion, it should be observed that the imaginary tag sets we describe
                     here and elsewhere are simplified examples; as any attempt to apply them in practice
                     will show, a tag set intended for practical use will want tags or property values
                     to handle cases where the text describes a group of people of mixed ages or genders,
                     cases where the gender or age of the person(s) described is indeterminate, and so
                     on. </span></div>
               <div class="endnote" id="d4e1630"><span class="noteRef lang en">[16] In the current version of CATMA (as far as we know), named properties are not inherited
                     by subtags, there is no option to restrict the set of possible values to the values
                     listed, and there is no facility for supplying values automatically, as is suggested
                     here.</span></div>
               <div class="endnote" id="d4e1746"><span class="noteRef lang en">[17] The paper, which recommends that ontologies should be organized as networks consisting
                     of top-, mid-, and lower-level ontologies, says specifically about mid-level ontologies
                     that they should “consist of terms which are organized in strict subclass hierarchies starting from
                     more and proceeding to less general; either in one such hierarchy, or in multiple
                     separate hierarchies representing multiple axes of classification ...” [<a class="ref" href="#rudnicki_etal2016">Rudnicki et al. 2016</a>].<br /><br /> With the phrase “or in multiple separate hierarchies”, Rudnicki et al. appear to be suggesting that in practice multiple ontologies will
                     need to be deployed. We don't think this is a very helpful idea in the context of
                     CATMA or similar systems: if the tags <span class="hi italic">Girl</span> and <span class="hi italic">Boy</span> are placed both in a gender-age hierarchy and in an age-gender hierarchy, then every
                     operation on the tag set that could be guided by the structure of the ontology (on
                     which see further below) must become more complicated, either by asking the user which
                     ontology to use, or by requiring the operation to take multiple ontologies into account.<br /><br /> Barry Smith (whom we quoted earlier) is one of the coauthors of this white paper;
                     he is more explicit about the importance of trees in what appears to be a longer draft
                     for [<a class="ref" href="#smith2003b">Smith 2003b</a>]. Here, he is quite insistent that “A taxonomy should take the form of a tree in the mathematical sense.” His strongest reason for this insistence seems to be that “... a classification should involve no double-counting” [<a class="ref" href="#smith2003a">Smith 2003a</a>, 11, 12].<br /><br /></span></div>
               <div class="endnote" id="d4e1844"><span class="noteRef lang en">[18] This method of visualizing a lattice is a <em class="term">Hasse diagram</em>, named after the mathematician Helmut Hasse (1898-1979). For any pair of nodes <span class="hi italic">n<span class="hi subscript">1</span></span> and <span class="hi italic">n<span class="hi subscript">2</span></span>, if <span class="hi italic">n<span class="hi subscript">1</span></span> ≤ <span class="hi italic">n<span class="hi subscript">2</span></span>, then <span class="hi italic">n<span class="hi subscript">2</span></span> is drawn higher in the diagram than <span class="hi italic">n<span class="hi subscript">1</span></span>, and an arc connects them (necessarily running <em class="emph">upward</em>) just in case there is no third node <span class="hi italic">n<span class="hi subscript">3</span></span> in the lattice such that <span class="hi italic">n<span class="hi subscript">1</span></span> ≤ <span class="hi italic">n<span class="hi subscript">3</span></span> ≤ <span class="hi italic">n<span class="hi subscript">2</span></span>. (In all the lattices we discuss, the partial ordering is given by the subset relation,
                     so the rule just stated could be restated in terms of <span class="hi italic">n<span class="hi subscript">1</span></span> ⊆ <span class="hi italic">n<span class="hi subscript">2</span></span>, etc.)<br /><br /> The arcs in a Hasse diagram show the <em class="term">transitive reduction</em> of the partial ordering on the set, and that any directed acyclic graph has a unique
                     transitive reduction. If we think of the arcs in a graph as providing pathways to
                     allow travel from one node to another, the transitive reduction is calculated by pruning
                     away every direct connection that connects two nodes already connected by other means,
                     to reduce the number of arcs to the minimum that preserves all the travel possibilities
                     of the original graph.<br /><br /></span></div>
               <div class="endnote" id="d4e1953"><span class="noteRef lang en">[19] We use the term <em class="term">ancestor</em> informally to denote a node reachable from another node by following one or more
                     edges in an uphill direction, and <em class="term">descendant</em> to mean the converse, a node reachable by going downhill.</span></div>
               <div class="endnote" id="d4e2061"><span class="noteRef lang en">[20] Their characteristic predicates would then be <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metaphor)</span>, <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, metonymy)</span>, <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, synecdoche)</span>, and <span class="monospace">trope(</span><span class="hi italic">x</span><span class="monospace">, irony)</span>. (This only makes sense, of course, if the user has enumerated a set of possible
                     values for the named property, rather than merely enumerating sample values. In the
                     current version of CATMA, we do not believe the user can make this distinction reliably.)</span></div>
            </div>
            <div id="worksCited">
               <h2>Works Cited</h2>
               <div class="bibl"><span class="ref" id="gius_etal2022"><!-- close -->Gius et al. 2022</span> Gius, E., Meister, J.C., Meister, M.,
                  Petris, M., Bruck, C., Jacke, J., Schumacher, M., Gerstorfer, D., Flüh, M., Horstmann,
                  J. (2022): <cite class="title italic">CATMA 6</cite> (Version 6.5). Zenodo. DOI:
                  10.5281/zenodo.1470118. Available at <a href="https://catma.de/" onclick="window.open('https://catma.de/'); return false" class="ref">https://catma.de/</a></div>
               <div class="bibl"><span class="ref" id="horstmann2020"><!-- close -->Horstmann 2020</span> Horstmann, J.,
                  “Undogmatic Literary Annotation with CATMA”. In: Julia Nantke and
                  Frederik Schlupkothen (eds.), <cite class="title italic"> Annotations in Scholarly Editions
                     and Research</cite>, De Gruyter 2020. Available at
                  <a href="https://doi.org/10.1515/9783110689112-008" onclick="window.open('https://doi.org/10.1515/9783110689112-008'); return false" class="ref">https://doi.org/10.1515/9783110689112-008</a>
                  </div>
               <div class="bibl"><span class="ref" id="macintyre1967"><!-- close -->MacIntyre 1967</span> MacIntyre, A.,
                  “Ontology,” in <cite class="title italic">The encyclopedia of
                     philosophy.</cite> New York: Macmillan, 1967, vol. 5. Available at
                  “Ontology, history of” at
                  <a href="https://www.encyclopedia.com/humanities/encyclopedias-almanacs-transcripts-and-maps/ontology-history" onclick="window.open('https://www.encyclopedia.com/humanities/encyclopedias-almanacs-transcripts-and-maps/ontology-history'); return false" class="ref">https://www.encyclopedia.com/humanities/encyclopedias-almanacs-transcripts-and-maps/ontology-history</a>. </div>
               <div class="bibl"><span class="ref" id="quine1948"><!-- close -->Quine 1948</span> Quine, W.v.O., “On
                  what there is”. <cite class="title italic">Review of Metaphysics</cite> 1948. Reprinted in
                  <cite class="title italic">From a logical point of view.</cite>, pp 1-19. Cambridge: Harvard
                  University Press, 1953. </div>
               <div class="bibl"><span class="ref" id="rudnicki_etal2016"><!-- close -->Rudnicki et al. 2016</span> Rudnicki, R. Smith, B., Malyuta,
                  T., and Mandrick, W., “Best Practices of Ontology
                  Development” White Paper, CUBRC Advantage Through Technology, 2016.
                  Available at <a href="https://www.nist.gov/system/files/documents/2019/05/30/nist-ai-rfi-cubrc_inc_002.pdf" onclick="window.open('https://www.nist.gov/system/files/documents/2019/05/30/nist-ai-rfi-cubrc_inc_002.pdf'); return false" class="ref">https://www.nist.gov/system/files/documents/2019/05/30/nist-ai-rfi-cubrc_inc_002.pdf</a>. </div>
               <div class="bibl"><span class="ref" id="smith2003a"><!-- close -->Smith 2003a</span> Smith, B.,
                  “Ontology and information systems,”.
                  Available at <a href="http://ontology.buffalo.edu/ontology_long.pdf" onclick="window.open('http://ontology.buffalo.edu/ontology_long.pdf'); return false" class="ref">http://ontology.buffalo.edu/ontology_long.pdf</a>. </div>
               <div class="bibl"><span class="ref" id="smith2003b"><!-- close -->Smith 2003b</span> Smith, b.
                  “Ontology,” in <cite class="title italic">Blackwell guide to the
                     philosophy of computing and information</cite>, ed. Luciano Floridi. Oxford: Blackwell, 2003.
                  Available at <a href="https://philpapers.org/archive/SMIO-11.pdf" onclick="window.open('https://philpapers.org/archive/SMIO-11.pdf'); return false" class="ref">https://philpapers.org/archive/SMIO-11.pdf</a>. </div>
               <div class="bibl"><span class="ref" id="spyri1880"><!-- close -->Spyri 1880</span> Spyri, J.,
                  <cite class="title italic">Heidis Lehr- und Wanderjahre</cite>, 1880. Available at
                  <a href="https://www.gutenberg.org/ebooks/7511" onclick="window.open('https://www.gutenberg.org/ebooks/7511'); return false" class="ref">https://www.gutenberg.org/ebooks/7511</a>
                  </div>
               <div class="bibl"><span class="ref" id="webster1923"><!-- close -->Webster's 1923</span> 
                  <cite class="title italic">Webster's new international dictionary of the English language</cite>,
                  ed. W. T. Harris and F. Sturgis Allen. Springfield, Mass.: G. &amp; C. Merriam Co, 1923.
                  </div>
            </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            <div class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/">Creative Commons Attribution-NoDerivatives 4.0 International License</a>.
               </div>
         </div>
      </div>
   </body>
</html>