<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>[PREVIEW] DHQ: Digital Humanities Quarterly: </title>
      <link href="../../common/css/dhq.css" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_screen.css" media="screen" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_print.css" media="print" type="text/css" rel="stylesheet" />
      <style type="text/css">
        #mainContent {
          float: none;
          padding-top: 2em;
          padding-left: 4em;
          padding-right: 4em;
          margin-left: 225px;
           
        }</style>
   </head>
   <body>
      <div id="mainContent">
         <div class="DHQarticle">
            <div id="pubInfo">Preview<br />Volume  Number </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            
            <div class="DHQheader">
               
               
               
               
               <h1 class="articleTitle lang en">Minimizing Computing Maximizes Labor</h1>
               
               
               <div class="author"><span style="color: grey">Quinn Dombrowski
                     </span> &lt;<a href="mailto:qad_at_stanford_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('qad_at_stanford_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('qad_at_stanford_dot_edu'); return false;">qad_at_stanford_dot_edu</a>&gt;, Stanford University</div>
               
               
               
               
               
               
               
               <span class="Z3988" title="url_ver=Z39.88-2004&amp;ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rfr_id=info%3Asid%2Fzotero.org%3A2&amp;rft.genre=article&amp;rft.atitle=Minimizing%20Computing%20Maximizes%20Labor&amp;rft.jtitle=Digital%20Humanities%20Quarterly&amp;rft.stitle=DHQ&amp;rft.issn=1938-4122&amp;rft.date=&amp;rft.volume=&amp;rft.issue=&amp;rft.aulast=Dombrowski&amp;rft.aufirst=Quinn&amp;rft.au=Quinn%20Dombrowski"> </span></div>
            
            <div id="DHQtext">
               
               
               <div id="abstract">
                  <h2>Abstract</h2>
                  
                  
                  <p>This paper focuses on the practical realities of implementing the most common minimal
                     computing methods for web development. It addresses the amount of technically-oriented
                     detail-work required to configure the complex set of components that underpin widely-used
                     platforms for static site generation. When going “minimal” requires a great deal of technical labor, what implications does that have for its
                     adoption by scholars without ongoing technical support, or the money or connections
                     to delegate that work? What is the added emotional labor for technical collaborators
                     who are only allowed to “consult” with scholars, when they attempt to coach scholars through implementing a minimal
                     computing site on their own? What opportunities are lost when a web development methodology
                     cannot reasonably be taught in a hands-on way in a short workshop? After describing
                     these challenges, this paper proposes that an infrastructural intervention — encompassing
                     everything from writing better documentation, tutorials, and templates, to developing
                     interfaces that mediate between users and technical complexity — is necessary to realize
                     the potential of minimal computing as a framework for sustainable websites.</p>
                  </div>
               
               
               
               
               <div class="div div0">
                  
                  <h1 class="head">Introduction </h1>
                  
                  <div class="counter"><a href="#p1">1</a></div>
                  <div class="ptext" id="p1">The conversation within the broad international digital humanities community around
                     “minimal computing” has raised important questions about resource creation and access in
                     contexts where internet connectivity cannot be taken for granted and the sustainability
                     of digital humanities projects that scholars create. Minimal computing has served
                     as an
                     umbrella for discussions about hardware (labor conditions and environmental impact
                     of
                     manufacturing modern devices), networking (use of local area networks), and offline
                     availability of resources. Arguably its greatest practical impact on digital humanities
                     as praxis has been through advocacy for static HTML as a medium for digital humanities
                     projects and websites.</div>
                  
                  <div class="counter"><a href="#p2">2</a></div>
                  <div class="ptext" id="p2">This paper focuses on the practical realities of implementing the most common minimal
                     computing methods for web development. It addresses the amount of technically-oriented
                     detail-work required to configure the complex set of components that underpin
                     widely-used platforms for static site generation. When going “minimal” requires a great
                     deal of technical labor, what implications does that have for its adoption by scholars
                     without ongoing technical support or the money or connections to delegate that work?
                     What is the added emotional labor for technical collaborators who are only allowed
                     to
                     “consult” with scholars, when they attempt to coach scholars through implementing a
                     minimal computing site on their own? What opportunities are lost when a web development
                     methodology cannot reasonably be taught in a hands-on way in a short workshop? After
                     describing these challenges, this paper proposes that an infrastructural intervention
                     —
                     encompassing everything from writing better documentation, tutorials, and templates,
                     to
                     developing interfaces that mediate between users and technical complexity — is necessary
                     to realize the potential of minimal computing as a framework for sustainable
                     websites.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Website as a Long-term Commitment</h1>
                  
                  <div class="counter"><a href="#p3">3</a></div>
                  <div class="ptext" id="p3">The most widely-used methods of developing web-based digital humanities projects have
                     brought with them major drawbacks around upkeep and maintenance. The trend of visually
                     elaborate, interactive, Flash-based websites was short-lived but resulted in a set
                     of
                     digital humanities projects rendered inaccessible and unusable as soon as Flash stopped
                     being widely supported.<a class="noteRef" href="#d4e194">[1]</a> While individual database-driven content management systems (CMS) have
                     waxed and waned, CMS have been widely used for building web-based digital humanities
                     projects for over 15 years. From a user perspective, they offer many advantages,
                     typically including graphic user interface — based (GUI) website configuration and
                     customization options, a content editing interface that resembles a web form or word
                     processor- authoring environment, and the ability to easily extend the website’s
                     functionality through plug-ins, which similarly provide user interface-based (UI)
                     configuration. </div>
                  
                  <div class="counter"><a href="#p4">4</a></div>
                  <div class="ptext" id="p4">The ease with which a user can get a CMS installed and running, particularly with
                     the
                     help of “one-click installers” offered by most commercial web-hosting services, belies
                     the long-term challenges the user will likely encounter around maintenance and upkeep.
                     Any website that relies on executable code in order to display content is at risk
                     of
                     that code being subverted in favor of others’ agendas. While individual projects may
                     be
                     targeted specifically for their subject matter (e.g. projects relating to Tibetan
                     language and culture have become targets for Chinese cyberwarfare activities), more
                     commonly, digital humanities projects fall victim to hackers probing sites running
                     a CMS
                     with known security vulnerabilities [<a class="ref" href="#graham2019">Graham 2019</a>] [<a class="ref" href="#logan2017">Logan 2017</a>]. If those responsible for
                     maintaining a site have not been prompt in applying software patches as soon as they
                     are
                     released, the consequences can be quite severe. Many days or weeks of technical work
                     can
                     be required to restore a site to a previous working state (assuming backups were made)
                     and secure it against future incursions [<a class="ref" href="#vellosolyons2021">Velloso-Lyons, Dombrowski, Starkey 2021</a>]. The
                     work of recovering a CMS-based site that has been hacked is not trivial: if the
                     scholar<a class="noteRef" href="#d4e210">[2]</a> is not comfortable with restoring MySQL backups and looking for
                     malicious code changes and files, the task will likely fall to someone in their
                     professional network, such as IT,library support staff, or a more technically-proficient
                     colleague. Having a project website temporarily taken offline is a source of some
                     embarrassment, but less-technical PIs who delegate the recovery work are largely
                     insulated from the labor and stress involved in the process. This is, fundamentally,
                     the
                     trade-off at the heart of a decision to build a digital humanities project using a
                     CMS:
                     <em class="emph">someone </em>will be made responsible for the ongoing burden of
                     patching and updating (and, when necessary, recovering) the entirety of the technical
                     stack underpinning the project, in exchange for less-technical members of the project
                     team being able to work in a relatively familiar, comfortable environment.</div>
                  
                  <div class="counter"><a href="#p5">5</a></div>
                  <div class="ptext" id="p5">It is not surprising then that enthusiasm for building websites using minimal computing
                     is likely to come from more-technical members of the digital humanities community,
                     who
                     have personally paid the maintenance costs in exchange for their colleagues’ ease
                     of use
                     [<a class="ref" href="#gibbs2015">Gibbs 2015</a>]. A project put on the web as static HTML cannot be compromised or hijacked
                     through the numerous, complex vectors of attack to which database-driven CMS sites
                     are.
                     Even if the server credentials are compromised and the static HTML files are removed
                     or
                     defaced, restoring the site is a much simpler process. Static sites have other
                     advantages that are likely to be visible to digital humanities practitioners in IT
                     and
                     library roles. For example, it is easy to make a static site available, with its full
                     functionality, in an offline environment.<a class="noteRef" href="#d4e236">[3]</a> Likewise,
                     static sites are much easier to preserve in their entirety for long-term archiving.
                     </div>
                  
                  <div class="counter"><a href="#p6">6</a></div>
                  <div class="ptext" id="p6">The questionable longevity of web-based projects is a common concern, particularly
                     for
                     scholars who are accustomed to thinking of their scholarship through the lens of
                     monographs and articles, given the centuries of library- and publisher-based
                     infrastructure built to support long-term access to scholarship published in those
                     genres [<a class="ref" href="#goddard2019">Goddard and Seeman 2019</a>]. Established scholars who begin engaging with digital
                     humanities later in their career frequently model a digital humanities project after
                     a
                     book: a sizable undertaking that one can cleanly <em class="emph">finish</em>, with the
                     result available for others to reference in perpetuity. A turn towards minimal computing
                     as the default platform for developing web-based projects would seem to serve the
                     interests of both less-technical scholars who want to ensure ongoing access to their
                     digital work and technical partners or support staff, whose capacity for new
                     undertakings diminishes with each project that requires ongoing maintenance. In
                     practice, however, minimal computing web development poses a technical barrier high
                     enough to necessitate both technical support and affective labor, even for scholars
                     with
                     enough baseline technical proficiency to be comfortable working independently in a
                     CMS
                     environment [<a class="ref" href="#lincoln">Lincoln et al.</a>].</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">The Making of “Static”</h1>
                  
                  <div class="counter"><a href="#p7">7</a></div>
                  <div class="ptext" id="p7">For a certain generation of scholar-technologists, “static HTML” evokes memories of
                     writing HTML by hand or with the assistance of GUI-based software such as Dreamweaver.
                     Dreamweaver and similar software provided a framework for template files that generated
                     repeated page elements (header, footer, sidebar), along with options for using a
                     “What-You-See-Is-What-You-GET” (WYSIWYG) interface with buttons for styling and
                     formatting text to construct the site and author content. The workflows that underpin
                     recent efforts under the umbrella of minimal computing typically involve static site
                     generator software configured using plain-text files, content authoring using Markdown,
                     layout using template files with a combination of HTML and Liquid, design typically
                     with
                     SASS, with generation of the final HTML done via the command line, then transferred
                     to a
                     hosting environment using Git. This is a vastly different workflow than using the
                     Dreamweaver WYSIWYG interface (which broadly resembled the modern WYSIWYG UI) for
                     formatting text, hand-coding some HTML in the associated Dreamweaver integrated
                     developer environment, and adding inline styles or referencing one or two CSS files
                     for
                     styling. </div>
                  
                  <div class="counter"><a href="#p8">8</a></div>
                  <div class="ptext" id="p8">To use the most common minimal computing workflow, based on the Jekyll static site
                     generation software, the scholar would need to install the Ruby programming language,
                     along with a number of Ruby gems using the command line, then install Jekyll<a class="noteRef" href="#d4e266">[4]</a>.
                     Next, they would need to figure out what changes need to be made to the _config.yml
                     file
                     (without breaking it altogether with a stray space character), and start authoring
                     content in Markdown — potentially while modifying the front matter variables and writing
                     additional Liquid and HTML to use those variables in the templates. Making any layout
                     or
                     design changes involves figuring out where these changes have to go within numerous
                     possible SASS files. Finally, the scholar would need to generate the output HTML using
                     the command line, and determine which errors and warnings need to be addressed in
                     order
                     for the site to function and which can be safely ignored. This workflow is daunting
                     even
                     for the type of digital humanities practitioner who is not in a developer role as
                     such
                     but frequently handles other kinds of web development tasks and basic coding, along
                     with
                     project and program management (e.g. roles commonly found in library digital scholarship
                     centers). Basic command-line usage, Markdown, CSS (if not SASS), and HTML are likely
                     to
                     be in the skill set of people in these positions, but the documentation for Jekyll
                     and
                     the Liquid templating language is sparse and lacking in detailed examples that someone
                     new to the framework could draw upon while building their proficiency with these tools.
                     Like with CMS, Jekyll functionality can be augmented through the use of plugins —
                     although the number of plugins supported by GitHub Pages, a common, free static-site
                     hosting environment, is limited. While workarounds for the plugin restrictions exist,
                     they impede a straightforward GitHub-based code management and site publication
                     workflow. But even when plugins address basic functionality, shortcomings in a technical
                     staff’s proficiency with Liquid makes it difficult to implement design change requests
                     or minor modifications to the design and layout of the site. Very specific design
                     preferences are common in digital humanities projects managed by a minimally-technical
                     principal investigator and implemented by people in other roles. While there are
                     thousands of free Jekyll themes available, there is very little standardization in
                     how
                     they are implemented, and a solid grasp of Liquid templates is essential for any
                     extensive modification.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Minimal Computing in Digital Humanities Workshops</h1>
                  
                  <div class="counter"><a href="#p9">9</a></div>
                  <div class="ptext" id="p9">The sheer number of components that go into setting up a Jekyll site, each of them
                     unfamiliar to people with minimal prior technical experience, makes it a poor choice
                     for
                     the 2- or3-day digital humanities workshops for beginners that are commonly run during
                     the summer or at the beginning or end of terms. The 2019 Slavic DH workshop at
                     Princeton, for example, brought together scholars in Slavic languages and literatures
                     from the US and Europe interested in digital humanities, with particular attention
                     to
                     precarious scholars and those without a local digital humanities community. The four-day
                     event included two days of hands-on technical training in building exhibits of visual
                     resources. For Andrew Janco and I, the co-instructors of the technical components,
                     our
                     first choice was to teach Wax, a Jekyll-based system for building exhibits. However,
                     even a preliminary attempt to break down the process of creating a Wax site into
                     discrete lessons that could fit into the schedule for participants made it clear that,
                     realistically, we would be facing irate colleagues if we took this approach. For a
                     minimally-technical audience, we would spend all of the first day walking them through
                     and troubleshooting what might seem to them like arcane, extremely technical steps,
                     before they saw anything that even vaguely resembled their own research materials
                     in a
                     web browser. It was a recipe for them to walk away concluding that digital humanities
                     was too hard for them, that even something as “simple” as putting together a digital
                     exhibit was impossibly complex. </div>
                  
                  <div class="counter"><a href="#p10">10</a></div>
                  <div class="ptext" id="p10">If one of the goals of the past decade in digital humanities has been to make these
                     tools and methods available to work based on materials outside the white, Western,
                     patriarchal and usually Anglophone canon, done by people outside of well-funded research
                     institutions, does the procedural complexity of minimal computing risk undermining
                     those
                     gains? What is the value of a technical approach that offers long-term sustainability,
                     if the work that it would sustain is never built due to insurmountable technical
                     obstacles? In response to these concerns, we ran the workshop using Omeka Classic,
                     and
                     participants were able to start assembling their items and exhibits and customizing
                     their site design, using a graphical user interface, on the first day. A number of
                     participants successfully continued their projects independently after the workshop
                     was
                     over.</div>
                  
                  <div class="counter"><a href="#p11">11</a></div>
                  <div class="ptext" id="p11">An examination of the agenda for digital humanities workshops that <em class="emph">have </em>focused on minimal computing suggests that our decision to abandon Wax as
                     a platform for a beginners’ workshop may not have been caused by deficits in our
                     pedagogical capabilities or imagination. Short workshops ( less than a week) that
                     include Jekyll-based web development use it as an illustrative example. This includes
                     making a case for “reconcil[ing] cultural analytics
                     and research architectures with struggles for justice ” [<a class="ref" href="#gil2018">Gil 2018</a>], using demos of
                     existing minimal computing work as a starting point for developing a research agenda
                     [<a class="ref" href="#dh2016">DH 2016</a>], or arguing for minimal computing as a way to improve reproducibility in the
                     humanities [<a class="ref" href="#grguric2019">Grguric 2019</a>]. Hands-on workshops for Jekyll are much rarer, particularly
                     workshops targeted towards beginners. Jekyll was listed as one of the options (along
                     with hardware like Raspberry Pi, which takes another perspective on “minimal”) for the
                     week-long DH @ Guelph Summer Workshops in 2017. Keystone DH 2017 also included a
                     practical, if not hands-on, workshop on Jekyll for collaboration [<a class="ref" href="#kashyap2017">Kashyap and Vargas 2017</a>], but the framing suggests the intended audience was people in technical support
                     roles.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Human Labor Underwrites</h1>
                  
                  <div class="counter"><a href="#p12">12</a></div>
                  <div class="ptext" id="p12">Bridging the gap between the website that scholars want to be able to build and what
                     they can easily do with Jekyll requires an intervention that combines technical
                     expertise and emotional labor, in a ratio proportional to how much of the work a scholar
                     must do independently. In the simplest case, a technical collaborator can give a scholar
                     a template (such as the CSV file underpinning item generation in Wax) and walk them
                     through how to fill it out correctly. The scholar then returns the template with the
                     content filled in, and the technical collaborator does the rest of the work: correcting
                     any inconsistencies in the data, cleaning any disallowed characters, installing and
                     configuring Jekyll, and importing the data from the template. Configuring the site
                     design to the scholar’s satisfaction may require a few iterations, but all together,
                     creating a Jekyll site using this approach will likely take less than a week of the
                     technical collaborator’s time.<a class="noteRef" href="#d4e316">[5]</a>
                     However, this level of hands-on development work on a scholar’s project may be
                     outside the purview of the technical collaborator’s job. For example, when the technical
                     collaborator is based in a library or IT unit, a common means of preventing demand
                     from
                     overwhelming the small number of technical staff is to limit their engagement with
                     projects to “consultation,” unless their time is explicitly written into a project grant
                     (Cavanaugh and Dombrowski, forthcoming). Reimagining the Jekyll web development workflow
                     so that it fits into a series of “consultations” involves a shift from primarily
                     technical labor that can be dispatched efficiently to primarily emotional labor that
                     is
                     much more complex and demanding to manage. Paige Morgan describes this kind of activity
                     in a library context: </div>
                  
                  <div class="counter"><a href="#p13">13</a></div>
                  <div class="ptext" id="p13">
                     <blockquote>
                        <p>The people I work with are still substantially teaching themselves to get un-stuck,
                           though I provide some specific problem-solving techniques. In these contexts, the
                           emotional labor I perform for scholars as a digital humanities librarian is partly
                           about
                           offering confidence that they can learn that skill, even if it feels strikingly
                           different from their existing abilities. It’s also about transparently disclosing
                           some
                           of the potential obstacles they might face, and which are hard for newcomers to imagine
                           in advance. My goal is to underscore that obstacles, like bugs, are par for the course;
                           and also, to give people a sense of what digital work involves so that they can decide
                           whether it’s something that they want to pursue. I’m not interested in being an
                           evangelist. [<a class="ref" href="#morgan2016">Morgan 2016</a>]</p>
                     </blockquote>
                  </div>
                  
                  <div class="counter"><a href="#p14">14</a></div>
                  <div class="ptext" id="p14">In the case of minimal computing consultation, it is difficult to avoid an undercurrent
                     of evangelism. A model where the scholar passes off their project to a technical
                     collaborator can make the use of minimal computing tools a guaranteed outcome, but
                     an
                     approach where the scholar does the work themselves requires ongoing coaching,
                     consoling, and reassurance with each step, each error message, and each roadblock,
                     whether it’s dependency conflicts, SASS challenges, variables behaving in surprising
                     ways, or struggles with complex formatting in Markdown. There is a point at which
                     the
                     scholar can work independently on the project, barring any new functionality requests
                     or
                     divergent data, but until the scholar reaches that plateau, there remains a real
                     possibility that the scholar will one day ask a colleague how they built their website,
                     and adopt that tool like WordPress instead, or simply write off their digital project
                     —
                     if not digital humanities more broadly — as a frustrating time sink. Unless the scholar
                     has invested so much time in configuring Jekyll and importing their data that they
                     can’t
                     possibly imagine starting over (even along an easier route), there is a risk that
                     the
                     scholar will stop scheduling follow-up meetings and replying to emails, only to
                     re-emerge a year or two later seeking help with fixing their hacked WordPress site.
                     Even when a project is successfully implemented, an ongoing sense of
                     technical unease on the scholar’s part can stand in the way of their ongoing engagement
                     and contribution to the project. Despite buy-in from the Scholars’ Lab community on
                     a
                     Jekyll-based site relaunch [<a class="ref" href="#visconti2019">Visconti 2019</a>], ongoing uneasiness with the interface has
                     reduced the number of website contributions by community members who have run into
                     technical difficulties in the past and who feel like they “should” understand the
                     technology after reading the documentation but continue to struggle with making it
                     work
                     [<a class="ref" href="#visconti2021">Visconti 2021</a>].</div>
                  
                  <div class="counter"><a href="#p15">15</a></div>
                  <div class="ptext" id="p15">There are development approaches besides all-or-nothing. In some cases, even under
                     a
                     strict “consultation only” model, a technical collaborator will simply “take care of”
                     part of the work for a scholar, rationalizing that it would take less time and work
                     better for everyone than trying to talk the scholar through doing the steps themselves.
                     But this kind of “shadow labor” has pernicious long-term implications for the project.
                     Under a model where the technical collaborator is responsible for most or all the
                     technical work, they are likewise responsible for the technical maintenance and updates
                     (from which minimal computing workflows are not wholly immune).
                     Having a technical collaborator “take care of” part of the project
                     creates a gap: the scholar walks away without understanding how that part of their
                     project works, only relieved that it <em class="emph">does </em>work. This kind of
                     hands-on “help” is usually undertaken with the intention of it being a one-time
                     occurrence, but without the knowledge to manage that piece of the project or anyone
                     else
                     to turn to, the scholar will inevitably return seeking more help. Even more emotional
                     labor is required to navigate those relationships and reassert boundaries after having
                     stepped over the line once. While this scenario is hardly unique to projects that
                     use
                     minimal computing methods, the complexity and opacity of the technical components
                     underpinning those technologies make it more likely for this kind of scenario to arise.
                     </div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Articulating the Problem</h1>
                  
                  <div class="counter"><a href="#p16">16</a></div>
                  <div class="ptext" id="p16">Minimal computing is offered as a solution to multiple problems, both distinct and
                     overlapping [<a class="ref" href="#sayers2016">Sayers 2016</a>]. The environmental costs of server farms and the e-waste
                     produced by continually upgrading computational hardware are one set of issues. Building
                     a website using minimal computing methods may be part of a principled stand against
                     the
                     environmental costs of the digital world, but the ecological difference between a
                     static
                     website and a database-driven CMS are dwarfed by the impact of other personal decisions,
                     which are themselves dwarfed by the impact of decisions made by governments and large
                     corporations. Accounting for the additional time and effort that goes into learning
                     how
                     to build a “minimal” website
                     rather than using a database-driven CMS, one could have a greater environmental impact
                     by simply building a WordPress website and dedicating time to environmental activism
                     instead of debugging Jekyll.
                     </div>
                  
                  <div class="counter"><a href="#p17">17</a></div>
                  <div class="ptext" id="p17">If the primary concern is a techno-aesthetic experiment, stripping down common tools
                     and
                     processes to the minimum of what we actually “need” [<a class="ref" href="#gil2015">Gil 2015</a>], then minimal computing
                     is a highly suitable set of tools with which to prototype. Similarly, minimal computing
                     can be one response to a sense of unease with the way that web authoring and publishing
                     interfaces can alienate creators from the technical components underpinning their
                     work.
                     In the context of collaboration, it is important that this sense of unease be shared
                     if
                     it is used to justify the use of minimal computing methods. A technical collaborator
                     who
                     cites concern about a scholar’s alienation from their digital tools as the primary
                     justification for imposing a complex minimal computing workflow runs the risk of being
                     written off as an ideologue. While it is true that the individual skills that go into
                     building a Jekyll site are reusable in other contexts, in contrast to the tool-specific
                     knowledge that comes from working within a CMS (Gil 2019), it is not unreasonable
                     to
                     argue that all those skills should not be a prerequisite for publishing one’s
                     scholarship online.</div>
                  
                  <div class="counter"><a href="#p18">18</a></div>
                  <div class="ptext" id="p18">If the primary concern is doing digital humanities work that can be made available
                     to
                     people who don’t have access to high-speed internet, reliable connectivity, or
                     high-performance hardware, this requires a different lens. Some kinds of graphically
                     intensive virtual reality and augmented reality digital humanities work is out of
                     consideration. Desktop software that is crucially dependent on cloud computing for
                     computationally intensive processing (e.g. Transkribus for handwritten text recognition)
                     should be ruled out. But even if we exclude anything involving specialized peripherals
                     or high-end hardware, along with any software that needs to be installed to run, we
                     are
                     left with so much more than static HTML websites. WordPress, for instance, can be
                     set up
                     in a self-contained way on a USB stick or hard drive, which could be loaded full of
                     digitized texts and images.<a class="noteRef" href="#d4e379">[6]</a> Voyant Server, a GUI-based suite for text
                     exploration and analysis, can similarly be run without internet access or cutting-edge
                     hardware. “Portable” versions of Python and Jupyter Lab make it possible to do more
                     complex and customized forms of computational text analysis without local installation
                     or internet connectivity. Language models can be trained using more robust computational
                     resources and included for use in offline environments. Depending on the number of
                     texts
                     in question, even medium-scale computational text analysis is feasible with a modest
                     laptop.</div>
                  
                  <div class="counter"><a href="#p19">19</a></div>
                  <div class="ptext" id="p19">Creating web-based resources that do not require ongoing upkeep to remain functional
                     —
                     ideally, while minimizing custom code that itself can be a maintenance liability —
                     is a
                     holy grail of digital humanities [<a class="ref" href="#nowviskie2010">Nowviskie and Porter 2010</a>] [<a class="ref" href="#smithies2019">Smithies 2019</a>]. The
                     prospect of spending a great deal of time building a website that will likely decay
                     to
                     the point of being unusable in five or ten years is appalling, particularly when
                     compared to the expected longevity of physical books stored in a library. While some
                     updates to the static site generation software itself may be needed if a scholar wishes
                     to continue updating their site, the static HTML websites generated by such software
                     are
                     likely to be viewable as originally intended, even a decade or more later. An interest
                     in preserving digital work in its original form may be the issue that drives scholars
                     towards compromises on “bells and whistles” of website design, indirectly getting to the
                     technical-aesthetic question of “What is the least amount that we need?” through the
                     framing, “What is the most we can do that can still be preserved?” Technical
                     collaborators could successfully advocate for simplifying the design and number of
                     infrastructural components of a website in the name of preservation [<a class="ref" href="#weingart2019">Weingart and Lincoln 2019</a>]. The bare-bones authoring and finicky site configuration experiences
                     offered by current minimal computing web tools is harder to justify. The goal of
                     preservation is served by the creation of a static HTML website, and configuration
                     stored in plain-text files rather than a database, but no added virtue is accrued
                     through manual human authoring of those files or content originally authored using
                     Markdown. Using static website generation software like Jekyll is already a compromise
                     that brings with it dependencies, version conflicts, and added configuration hassle,
                     in
                     exchange for being able to do some things more easily than doing the equivalent with
                     hand-written HTML. To enable more scholars to take advantage of the sustainability
                     benefits of minimal computing websites, without passing a large amount of technical
                     and/or emotional labor onto technical collaborators, it is time to prioritize
                     infrastructural interventions that lower the barriers to minimal computing.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Maximizing Infrastructure for Minimal Computing</h1>
                  
                  <div class="counter"><a href="#p20">20</a></div>
                  <div class="ptext" id="p20">Digital humanities initiatives that have self-identified as “infrastructure” (including
                     Project Bamboo and DARIAH) have a reputation for being large, expensive endeavors
                     that
                     struggle to articulate their goals, let alone accomplishments, in a way that scholars
                     can identify the value they bring [<a class="ref" href="#dombrowski2014">Dombrowski 2014</a>]. A broader conceptualization of
                     infrastructure is needed here, to encompass work that does not exclusively, or even
                     primarily, serve the scholarship-driven goals of a specific project, but supports
                     and
                     enables the work of an arbitrary number of groups.</div>
                  
                  <div class="counter"><a href="#p21">21</a></div>
                  <div class="ptext" id="p21">Infrastructure need not be primarily technical. Descriptions and flowcharts about
                     where
                     minimal computing approaches make more or less sense would be extremely valuable to
                     help
                     steer scholars to a suitable technical path. Step-by-step tutorials, particularly
                     ones
                     written without any assumption of prior technical knowledge, can make a tremendous
                     difference in facilitating scholars’ independent use of minimal computing practices.
                     The
                     <cite class="title italic">Programming Historian</cite> tutorial, “Building a Static Website
                     with Jekyll and GitHub Pages” [<a class="ref" href="#visconti2016">Visconti 2016</a>], is one of the few examples of this kind
                     of resource for Jekyll, and it is a vast improvement over general-purpose Jekyll
                     documentation with its detail and clarity. </div>
                  
                  <div class="counter"><a href="#p22">22</a></div>
                  <div class="ptext" id="p22">Another highly scalable form of infrastructure is detailed documentation, ideally
                     using
                     discipline-relevant examples. The official Jekyll documentation is notable for its
                     brevity. It largely depends on pointers to the documentation for Liquid, which is
                     heavily shaped by e-commerce examples on account of its original creators, Shopify.
                     Translating examples
                     between domains is a skill that requires practice and experience, and it demanding
                     to
                     ask scholars to both absorb a new syntax and imagine how it would apply in their project
                     when given only examples based on digital shopping carts. Basic Jekyll and Liquid
                     documentation designed for an intrepid but beginner digital humanities audience, using
                     typical forms of scholarly projects as the basis for examples (as in [<a class="ref" href="#visconti2020">Visconti and Walsh 2020</a>]), would be very useful.</div>
                  
                  <div class="counter"><a href="#p23">23</a></div>
                  <div class="ptext" id="p23">Ed (<a href="https://elotroalex.github.io/ed/" onclick="window.open('https://elotroalex.github.io/ed/'); return false" class="ref">https://elotroalex.github.io/ed/</a>) and Wax (<a href="https://minicomp.github.io/wax/" onclick="window.open('https://minicomp.github.io/wax/'); return false" class="ref">https://minicomp.github.io/wax/</a>) are
                     themes with additional built-in functionality to make it easier to build an online
                     edition and exhibit, respectively. They represent another kind of infrastructure for
                     doing minimal computing projects, but are both critically lacking in detailed
                     documentation for how to customize them for use with your own data. It is unclear
                     which
                     configuration options <em class="emph">must</em> be modified for a new project, which
                     settings <em class="emph">must</em> be left alone, and in what circumstances you might
                     want to make other modifications to the code. These projects, along with Jekyll plugins,
                     multilingual configurations [<a class="ref" href="#lincoln2021a">Lincoln 2021</a>] [<a class="ref" href="#lincoln2021b">Lincoln and Walsh 2021</a>], and other themes and
                     snippets, would benefit tremendously not only from individual documentation, but also
                     from write-ups in the style of Miriam Posner’s “How Did They Make That?” blog posts
                     [<a class="ref" href="#posner2013">Posner 2013</a>], breaking down and explaining the configuration used by sites that combine
                     these features in different ways.</div>
                  
                  <div class="counter"><a href="#p24">24</a></div>
                  <div class="ptext" id="p24">Finally, there is a need for better technology to reduce the friction that many users
                     experience when building minimal computing websites. There are multiple places where
                     the
                     kinds of small errors that humans are prone to — like putting the wrong number of
                     spaces
                     before a value in a _config.yml file, or incorrectly formatting the file name of a
                     blog
                     post to omit the date, or failing to escape one of the many characters that cause
                     problems in Jekyll configuration files or front matter — can lead to frustrating and
                     unexpected systemic failure. A graphical interface for authoring posts and managing
                     site
                     configuration, such as that offered by Netlify CMS,<a class="noteRef" href="#d4e453">[7]</a> would ensure greater consistency
                     around those formatting quirks that Jekyll is sensitive to and could offer a more
                     comfortable WYSIWYG environment. A system comparable to WordPress in terms of the
                     affordances it provides users for authoring and configuration, but with the
                     data-handling and templating capabilities of Jekyll, along with Jekyll’s static output
                     and sustainability benefits, would be a compelling option for digital humanities web
                     development. Multiple such solutions exist, both as commercial software-as-a-service
                     offerings and a variety of open source projects, but additional work is needed to
                     adapt
                     the code to the particular needs of less-technical digital humanists (e.g. integration
                     with Ed- and Wax-specific configuration settings).</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Conclusion</h1>
                  
                  <div class="counter"><a href="#p25">25</a></div>
                  <div class="ptext" id="p25">The minimal computing movement offers relief to digital humanities developers weighed
                     down by the ongoing hassle of managing and updating WordPress and other CMS sites
                     whose
                     bloated underpinnings, riddled with security holes, offer insufficient value for the
                     cost of their upkeep. Implementing a scholar’s project using static site generation
                     software such as Jekyll can vastly simplify both development and maintenance. However,
                     for scholars who do not have access to a technical collaborator who can take care
                     of the
                     multiple distinct technical components, very precisely configured, that are required
                     to
                     create a Jekyll website, the calculus is more complicated. A WordPress site is more
                     likely to offer a familiar interface,<a class="noteRef" href="#d4e466">[8]</a> and the ease of a “one-click installer” makes the complexity of
                     Jekyll a much harder sell. Prioritizing minimal computing — be it for environmental,
                     techno-aesthetic, or sustainability reasons — risks leaving behind scholars who lack
                     the
                     technical expertise or ongoing support to manage multiple facets of technical web
                     development. </div>
                  
                  <div class="counter"><a href="#p26">26</a></div>
                  <div class="ptext" id="p26">The sustainability and preservation benefits of minimal computing web development
                     are
                     significant, but for these benefits to be realized — particularly by scholars outside
                     of
                     well-funded research institutions with technical developers on staff and by scholars
                     who
                     are not comfortable reading technical prose in English — the digital humanities
                     community needs to engage with building infrastructure to support that work. There
                     are
                     major deficiencies in current documentation, tutorials, and examples for minimal
                     computing web development in digital humanities. Remedying these deficiencies requires
                     clarity in writing, more than deep technical expertise. Scholars with a small amount
                     of
                     hard-won experience with Jekyll could have an impact by documenting their own processes
                     — although this too requires labor without a corresponding immediate payoff for one’s
                     own work. Building graphical interfaces that provide a more familiar authoring
                     environment while offering an error-resistant means of configuring Jekyll sites would
                     require non-trivial technical development, even starting from existing open source
                     code.
                     We will know we have built enough scaffolding when minimal computing web development
                     can
                     be taught to technical novices in one- or two-day workshop, with participants walking
                     away comfortable with their ability to continue working independently on their projects.
                     Until then, minimal web development, with all its associated benefits, is a luxury
                     available to those with technical expertise, or the necessary money or connections
                     to
                     absorb the additional labor that this approach requires.</div>
               </div>
               
               
               
               
               
               
               
               </div>
            
            <div id="notes">
               <h2>Notes</h2>
               <div class="endnote" id="d4e194"><span class="noteRef lang en">[1]  See [<a class="ref" href="#fiadotau2020">Fiadotau 2020</a>] for a discussion of how one digital
                     gaming community has dealt with long-term sustainability and access issues with
                     Flash.</span></div>
               <div class="endnote" id="d4e210"><span class="noteRef lang en">[2]  In this paper, “scholar” is used to refer to an individual whose
                     primary contribution to a digital humanities project relates to their subject-area
                     expertise, in contrast to “technical collaborator” whose contribution involves
                     significant technical work. These terms are meant to relate only the person’s role
                     within the project’s division of labor, recognizing that the “technical collaborator”
                     may themselves have the expertise of a scholar, and may even play the “scholar” role
                     opposite a different “technical collaborator” in a different project context.
                     Projects implemented by a single person who wears the “scholar” and “technical
                     collaborator” hats with equal ease also exist but are not under discussion
                     here.</span></div>
               <div class="endnote" id="d4e236"><span class="noteRef lang en">[3]  Contrast, for instance, the work
                     involved in putting a set of static HTML files and associated images onto a USB drive
                     and the site configuration changes, link changes, and archiving efforts that go into
                     doing the same for a Drupal site, as described in [<a class="ref" href="#stevenson2020">Stevenson 2020</a>].</span></div>
               <div class="endnote" id="d4e266"><span class="noteRef lang en">[4]  The
                     Jekyll Quickstart <a href="https://jekyllrb.com/docs/" onclick="window.open('https://jekyllrb.com/docs/'); return false" class="ref">page</a>  provides a breezy overview, with
                     a link to a similarly brief Prerequisites <a href="https://jekyllrb.com/docs/installation/#requirements" onclick="window.open('https://jekyllrb.com/docs/installation/#requirements'); return false" class="ref">page</a>
                     for readers struggling to
                     install Ruby, RubyGems, GCC and/or Make. There is a more detailed tutorial in the
                     GitHub Pages <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll" onclick="window.open('https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll'); return false" class="ref">documentation</a>. </span></div>
               <div class="endnote" id="d4e316"><span class="noteRef lang en">[5]  Note that this time estimate is only for the
                     initial creation of the site. Subsequent changes and updates are inevitable, and each
                     requires the technical collaborator to interrupt their current project to make time
                     for this work. A single change for a single project may not have a huge time demand
                     associated with it, but the accumulation of these requests for multiple projects can
                     pose a significant barrier to undertaking new work. Recent approaches to digital
                     humanities project management have worked to constrain this [<a class="ref" href="#sutton2019">Sutton Koeser 2019</a>].</span></div>
               <div class="endnote" id="d4e379"><span class="noteRef lang en">[6]  Offline WordPress even offers certain advantages, such
                     as reducing the relevance of security updates. Online hackers cannot exploit
                     vulnerabilities they cannot access.</span></div>
               <div class="endnote" id="d4e453"><span class="noteRef lang en">[7]  For an example of a deployment
                     of Netlify CMS in a digital humanities context, see 
                     <a href="https://shakespeare-vr.library.cmu.edu/" onclick="window.open('https://shakespeare-vr.library.cmu.edu/'); return false" class="ref">https://shakespeare-vr.library.cmu.edu/</a>.</span></div>
               <div class="endnote" id="d4e466"><span class="noteRef lang en">[8]  Recent trends in WordPress UI/UX, both in
                     the CMS core with the “Gutenberg” editor as well as more elaborate plug-ins such as
                     the “Divi Builder”, have begun to upend the familiarity of the traditional WordPress
                     interface.</span></div>
            </div>
            <div id="worksCited">
               <h2>Works Cited</h2>
               <div class="bibl"><span class="ref" id="cavanaugh"><!-- close -->Cavanaugh and Dombrowski</span> [Cavanaugh and Dombrowski] Cavanaugh, Erica and QuinnDombrowski. “Personal Entanglements
                  and Graceful Relationship Degradation in Collaborative Projects.” In <cite class="title italic">Revealing Meaning: Feminist Methods in Digital Scholarship</cite>, edited by Kim
                  Martin and Heather Froehlich. Waterloo: Wilfrid Laurier University Press, forthcoming.
                  </div>
               <div class="bibl"><span class="ref" id="dh2016"><!-- close -->DH 2016</span>  “Minimal Computing: A Workshop.” DH 2016 Book of Abstracts, 2016. <a href="https://dh2016.adho.org/abstracts/304" onclick="window.open('https://dh2016.adho.org/abstracts/304'); return false" class="ref">https://dh2016.adho.org/abstracts/304</a>.</div>
               <div class="bibl"><span class="ref" id="dombrowski2014"><!-- close -->Dombrowski 2014</span>  Dombrowski, Quinn. (<a href="https://doi.org/10.1093/llc/fqu026" onclick="window.open('https://doi.org/10.1093/llc/fqu026'); return false" class="ref">https://doi.org/10.1093/llc/fqu026</a>) “What Ever Happened to Project Bamboo?”<cite class="title italic"> Literary and Linguistic Computing</cite> 29.3 (September 2014). DOI: 10.1093/llc/fqu026
                  </div>
               <div class="bibl"><span class="ref" id="fiadotau2020"><!-- close -->Fiadotau 2020</span>  Fiadotau, Mikhail. “Growing Old on Newgrounds: The Hopes and Quandaries
                  of Flash Game Preservation.” <cite class="title italic">First Monday</cite> 25.8 (2020). <a href="https://doi.org/10.5210/fm.v25i8.10306" onclick="window.open('https://doi.org/10.5210/fm.v25i8.10306'); return false" class="ref">https://doi.org/10.5210/fm.v25i8.10306</a>.</div>
               <div class="bibl"><span class="ref" id="gibbs2015"><!-- close -->Gibbs 2015</span>  Gibbs, Fred. “Editorial Sustainability and Open Peer Review at Programming
                  Historian.” DH Commons 1 (2015).
                  https://web.archive.org/web/20180713014622/http://dhcommons.org/journal/issue-1/editorial-sustainability-and-open-peer-review-programming-historian.</div>
               <div class="bibl"><span class="ref" id="gil2015"><!-- close -->Gil 2015</span>  Gil, Alex. “The User, the Learner and the Machines We Make.” <cite class="title italic">Minimal Computing Working Group,</cite> May 21, 2015. <a href="http://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/" onclick="window.open('http://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/'); return false" class="ref">http://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/</a>.</div>
               <div class="bibl"><span class="ref" id="gil2018"><!-- close -->Gil 2018</span>  Gil, Alex. (“Minimal Computing, Border Technologies and Other Marginal
                  Practices in DH.” <cite class="title italic">Price Lab Mellon Workshop</cite>, 2018. <a href="https://pricelab.sas.upenn.edu/events/price-lab-mellon-workshop-alex-gil" onclick="window.open('https://pricelab.sas.upenn.edu/events/price-lab-mellon-workshop-alex-gil'); return false" class="ref">https://pricelab.sas.upenn.edu/events/price-lab-mellon-workshop-alex-gil</a>.</div>
               <div class="bibl"><span class="ref" id="gil2019"><!-- close -->Gil 2019</span>  Gil, Alex. “Design for Diversity: The Cases of Ed.” <cite class="title italic">The
                     Design for Diversity Learning Toolkit, 2019</cite>. <a href="https://des4div.library.northeastern.edu/design-for-diversity-the-case-of-ed-alex-gil/" onclick="window.open('https://des4div.library.northeastern.edu/design-for-diversity-the-case-of-ed-alex-gil/'); return false" class="ref">https://des4div.library.northeastern.edu/design-for-diversity-the-case-of-ed-alex-gil/</a>.</div>
               <div class="bibl"><span class="ref" id="goddard2019"><!-- close -->Goddard and Seeman 2019</span>  Goddard, Lisa and Dean Seeman. “Negotiating
                  Sustainability: Building digital humanities projects that last.” In <cite class="title italic">Doing More Digital Humanities, edited by Constance Crompton, Richard Lane, and Ray
                     Siemens, 38-57. </cite>Philadelphia: Routledge, 2019. </div>
               <div class="bibl"><span class="ref" id="graham2019"><!-- close -->Graham 2019</span>  Graham, Shawn. <cite class="title italic">Failing Gloriously and Other Essays</cite>.
                  Lincoln, NE: The Digital Press at the University of Nebraska, 2019. <a href="https://thedigitalpress.org/failing-gloriously/" onclick="window.open('https://thedigitalpress.org/failing-gloriously/'); return false" class="ref">https://thedigitalpress.org/failing-gloriously/</a>.</div>
               <div class="bibl"><span class="ref" id="grguric2019"><!-- close -->Grguric 2019</span>  Grguric, Eka. “Minimal Computing: One Approach to the Challenge of
                  Computational Reproducibility.” <cite class="title italic">Open Scholarship in Practice</cite>,
                  October 25, 2019. <a href="http://dx.doi.org/10.14288/1.0387127" onclick="window.open('http://dx.doi.org/10.14288/1.0387127'); return false" class="ref">http://dx.doi.org/10.14288/1.0387127</a>.</div>
               <div class="bibl"><span class="ref" id="kashyap2017"><!-- close -->Kashyap and Vargas 2017</span>  Kashyap, Nabil. and Roberto Vargas.“Collaborative Jekyll.” <cite class="title italic">Keystone DH</cite>, 2017. <a href="https://keystonedh2017.sched.com/event/B3bt/w5-collaborative-jekyll" onclick="window.open('https://keystonedh2017.sched.com/event/B3bt/w5-collaborative-jekyll'); return false" class="ref">https://keystonedh2017.sched.com/event/B3bt/w5-collaborative-jekyll</a>.</div>
               <div class="bibl"><span class="ref" id="lincoln2021a"><!-- close -->Lincoln 2021</span>  Lincoln, Matthew “Technical Tutorial on Translation Links.” <cite class="title italic">The Programming Historian</cite> GitHub Wiki. Accessed September 29,
                  2021. <a href="https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Translation-Links" onclick="window.open('https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Translation-Links'); return false" class="ref">https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Translation-Links</a>.</div>
               <div class="bibl"><span class="ref" id="lincoln2021b"><!-- close -->Lincoln and Walsh 2021</span>  Lincoln, Matthew and Walsh, Brandon. “Technical Tutorial on
                  Setting Up a New Language.” <cite class="title italic">The Programming Historian </cite>GitHub
                  Wiki. Accessed September 29, 2021. <a href="https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Setting-Up-a-New-Language" onclick="window.open('https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Setting-Up-a-New-Language'); return false" class="ref">https://github.com/programminghistorian/jekyll/wiki/Technical-Tutorial-on-Setting-Up-a-New-Language</a>. </div>
               <div class="bibl"><span class="ref" id="lincoln"><!-- close -->Lincoln et al.</span>  Lincoln, Matthew, Jennifer Isasi, Sarah Melton. “Relocating Complexity: <cite class="title italic">The Programming Historian </cite>and Multilingual Static Site
                  Generation.” <cite class="title italic">Digital Humanities Quarterly, forthcoming</cite>.</div>
               <div class="bibl"><span class="ref" id="logan2017"><!-- close -->Logan 2017</span>  Logan, Jim. “A Pioneering Netizen.” <cite class="title italic">UC Santa Barbara
                     News,</cite> January 10, 2017. <a href="https://www.news.ucsb.edu/2017/017526/pioneering-netizen" onclick="window.open('https://www.news.ucsb.edu/2017/017526/pioneering-netizen'); return false" class="ref">https://www.news.ucsb.edu/2017/017526/pioneering-netizen</a>.</div>
               <div class="bibl"><span class="ref" id="morgan2016"><!-- close -->Morgan 2016</span>  Morgan, Paige. “Not Your DH Teddy-Bear; or, Emotional Labor is Not Going
                  Away.” <cite class="title italic">DH + Lib,</cite> July 29,2016. <a href="https://acrl.ala.org/dh/2016/07/29/not-your-dh-teddy-bear/" onclick="window.open('https://acrl.ala.org/dh/2016/07/29/not-your-dh-teddy-bear/'); return false" class="ref">https://acrl.ala.org/dh/2016/07/29/not-your-dh-teddy-bear/</a>.</div>
               <div class="bibl"><span class="ref" id="nowviskie2010"><!-- close -->Nowviskie and Porter 2010</span>  Nowviskie, Bethany and Dot Porter. “The Graceful Degradation
                  Survey: Managing Digital Humanities Projects Through Times of Transition and Decline.”
                  <cite class="title italic">DH 2010 Book of Abstracts</cite>, 2010. <a href="http://dh2010.cch.kcl.ac.uk/academic-programme/abstracts/papers/html/ab-722.html" onclick="window.open('http://dh2010.cch.kcl.ac.uk/academic-programme/abstracts/papers/html/ab-722.html'); return false" class="ref">http://dh2010.cch.kcl.ac.uk/academic-programme/abstracts/papers/html/ab-722.html</a>.</div>
               <div class="bibl"><span class="ref" id="posner2013"><!-- close -->Posner 2013</span>  Posner, Miriam. “How Did They Make That?” <cite class="title italic">Miriam
                     Posner’s Blog,</cite>August 29, 2013. <a href="https://miriamposner.com/blog/how-did-they-make-that/" onclick="window.open('https://miriamposner.com/blog/how-did-they-make-that/'); return false" class="ref">https://miriamposner.com/blog/how-did-they-make-that/</a>.</div>
               <div class="bibl"><span class="ref" id="sayers2016"><!-- close -->Sayers 2016</span>  Sayers, Jentery. “Minimal Definitions.” <cite class="title italic">Minimal
                     Computing Working Group,</cite> October 2, 2016. . <a href="http://go-dh.github.io/mincomp/thoughts/2016/10/02/minimal-definitions/" onclick="window.open('http://go-dh.github.io/mincomp/thoughts/2016/10/02/minimal-definitions/'); return false" class="ref">http://go-dh.github.io/mincomp/thoughts/2016/10/02/minimal-definitions/</a>.</div>
               <div class="bibl"><span class="ref" id="smithies2019"><!-- close -->Smithies 2019</span>  Smithies, James et al. “Managing 100 Digital Humanities Projects:
                  Digital Scholarship &amp; Archiving in King’s Digital Lab.” <cite class="title italic">Digital
                     Humanities Quarterly</cite> 13.1 (2019). <a href="http://www.digitalhumanities.org/dhq/vol/13/1/000411/000411.html" onclick="window.open('http://www.digitalhumanities.org/dhq/vol/13/1/000411/000411.html'); return false" class="ref">http://www.digitalhumanities.org/dhq/vol/13/1/000411/000411.html</a>.</div>
               <div class="bibl"><span class="ref" id="stevenson2020"><!-- close -->Stevenson 2020</span>  Stevenson, Karen. “Sending a Drupal Site Into Retirement.” <cite class="title italic">Lullabot</cite>, February 13, 2020.
                  <a href="https://www.lullabot.com/articles/sending-a-drupal-site-into-retirement" onclick="window.open('https://www.lullabot.com/articles/sending-a-drupal-site-into-retirement'); return false" class="ref">https://www.lullabot.com/articles/sending-a-drupal-site-into-retirement</a>.</div>
               <div class="bibl"><span class="ref" id="sutton2019"><!-- close -->Sutton Koeser 2019</span>  Sutton Koeser, Rebecca. “Document ALL the things!” <cite class="title italic">The Center for Digital Humanities at Princeton,</cite> August 12, 2019.
                  <a href="https://cdh.princeton.edu/updates/2019/08/12/document-all-things/" onclick="window.open('https://cdh.princeton.edu/updates/2019/08/12/document-all-things/'); return false" class="ref">https://cdh.princeton.edu/updates/2019/08/12/document-all-things/</a>.</div>
               <div class="bibl"><span class="ref" id="vellosolyons2021"><!-- close -->Velloso-Lyons, Dombrowski, Starkey 2021</span>  Velloso-Lyons, Mae, Quinn Dombrowski, and
                  Kathryn Starkey. “The Global Medieval Sourcebook: Creating a Sustainable Digital
                  Anthology of Medieval Texts and Translations.” <cite class="title italic">Seminar: A Journal of </cite>
                  <cite class="title italic">Germanic Studies</cite> 57.o. 3 (2021)..
                  <a href="https://doi.org/10.3138/seminar.57.3.1" onclick="window.open('https://doi.org/10.3138/seminar.57.3.1'); return false" class="ref">https://doi.org/10.3138/seminar.57.3.1</a>.</div>
               <div class="bibl"><span class="ref" id="visconti2016"><!-- close -->Visconti 2016</span>  Visconti, Amanda. “Building a Static Website with Jekyll and GitHub
                  Pages.” <cite class="title italic">The Programming Historian, 2016</cite>
                  <a href="https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages" onclick="window.open('https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages'); return false" class="ref">https://programminghistorian.org/en/lessons/building-static-sites-with-jekyll-github-pages</a>.</div>
               <div class="bibl"><span class="ref" id="visconti2019"><!-- close -->Visconti 2019</span>  Visconti, Amanda. “Website Relaunch!” <cite class="title italic">Scholars’
                     Lab,</cite> January 15, 2019. <a href="https://scholarslab.lib.virginia.edu/blog/site-relaunch/" onclick="window.open('https://scholarslab.lib.virginia.edu/blog/site-relaunch/'); return false" class="ref">https://scholarslab.lib.virginia.edu/blog/site-relaunch/</a>.</div>
               <div class="bibl"><span class="ref" id="visconti2021"><!-- close -->Visconti 2021</span>  Visconti, Amanda. Personal communication regarding Jekyll usability. September 13,
                  2021.</div>
               <div class="bibl"><span class="ref" id="visconti2020"><!-- close -->Visconti and Walsh 2020</span>  Visconti, Amanda and Brandon Walsh. “Running a Collaborative
                  Research Website and Blog with Jekyll and GitHub.” <cite class="title italic">The Programming
                     Historian, 2020</cite>. <a href="https://programminghistorian.org/en/lessons/collaborative-blog-with-jekyll-github" onclick="window.open('https://programminghistorian.org/en/lessons/collaborative-blog-with-jekyll-github'); return false" class="ref">https://programminghistorian.org/en/lessons/collaborative-blog-with-jekyll-github</a>
                  </div>
               <div class="bibl"><span class="ref" id="weingart2019"><!-- close -->Weingart and Lincoln 2019</span>  Weingart, Scott. and Matthew Lincoln.. “CMU Library Labs
                  (2020-2024),” 2019. <a href="https://doi.org/10.1184/R1/13522718" onclick="window.open('https://doi.org/10.1184/R1/13522718'); return false" class="ref">https://doi.org/10.1184/R1/13522718</a>.</div>
            </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            <div class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/">Creative Commons Attribution-NoDerivatives 4.0 International License</a>.
               </div>
         </div>
      </div>
   </body>
</html>