<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?>
<?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:array="http://www.w3.org/2005/xpath-functions/array"
   xmlns:cc="http://web.resource.org/cc/" xmlns:dhq="http://www.digitalhumanities.org/ns/dhq"
   xmlns:map="http://www.w3.org/2005/xpath-functions/map"
   xmlns:mml="http://www.w3.org/1998/Math/MathML"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <!--Author should supply the title and personal information-->
            <title type="article" xml:lang="en"><!--article title in English-->Introduction to
               Critical Code Studies Special Issue 1 of DHQ</title>
            <!--Add a <title> with appropriate @xml:lang for articles in languages other than English-->
            <dhq:authorInfo>
               <dhq:author_name>Mark C. <dhq:family>Marino</dhq:family>
               </dhq:author_name>
               <idno type="ORCID">https://orcid.org/0000-0003-2034-3433</idno>
               <dhq:affiliation>University of Southern California</dhq:affiliation>
               <email>markcmarino@gmail.com</email>
               <dhq:bio>
                  <p>Mark C. Marino is a writer and scholar of electronic literature living in Los
                     Angeles. His works include <title rend="quotes">a show of hands</title> (<ref
                        target="http://hands.literatronica.net"
                     >http://hands.literatronica.net</ref>), <title rend="quotes">Living
                        Will</title> (<ref target="http://markcmarino.com/tales/livingwill.html"
                        >http://markcmarino.com/tales/livingwill.html</ref>), and <title
                        rend="quotes">The Ballad of Workstudy Seth</title> (<ref
                        target="http://www.springgunpress.com/the-ballad-of-workstudy-seth"
                        >http://www.springgunpress.com/the-ballad-of-workstudy-seth</ref>). With Rob
                     Wittig, he is a co-founder of Meanwhile… Netprov Studios (<ref
                        target="http://meanwhilenetprov.com">http://meanwhilenetprov.com</ref>). His
                     recent work includes <title rend="quotes">Salt Immortal Sea</title> (<ref
                        target="https://jtm.io/static/saltimmortalsea/"
                        >https://jtm.io/static/saltimmortalsea/</ref>) and <title rend="italic">Mrs.
                        Wobbles and the Tangerine House</title> (<ref
                        target="http://markcmarino.com/mrsw/">http://markcmarino.com/mrsw/</ref>), a
                     collection of interactive stories he writes with his children. He was one of
                     ten co-authors of <title rend="italic">10 PRINT CHR$(205.5+RND(1)); : GOTO
                        10</title>
                     <ptr target="#montfort_etal2013"/> (<ref target="http://10print.org"
                        >http://10print.org</ref>) and joined with Jessica Pressman and Jeremy
                     Douglass on <title rend="italic">Reading Project: A Collaborative Analysis of
                        William Poundstone’s Project for Tachistoscope {Bottomless Pit}</title>
                     <ptr target="#pressman2015"/>. His latest book, <title rend="italic">Critical
                        Code Studies</title> was just published by MIT Press. Mark is also the
                     Director of Communication of the Electronic Literature Organization. He
                     currently teaches writing at the University of Southern California where he
                     directs the Humanities and Critical Code Studies Lab (<ref
                        target="http://haccslab.com">http://haccslab.com</ref>), a colaboratory
                     exploring the explication of computer source code. (Full portfolio here: <ref
                        target="http://markcmarino.com">http://markcmarino.com</ref>)</p>
               </dhq:bio>
            </dhq:authorInfo>
            <dhq:authorInfo>
               <dhq:author_name>Jeremy <dhq:family>Douglass</dhq:family>
               </dhq:author_name>
               <idno type="ORCID">https://orcid.org/0000-0001-7798-8801</idno>
               <dhq:affiliation>University of California, Santa Barbara</dhq:affiliation>
               <email>jeremydouglass@gmail.com</email>
               <dhq:bio>
                  <p>Jeremy Douglass is Associate Professor of English at the University of
                     California, Santa Barbara. He is director of Digital Arts and Humanities
                     Commons, an interdisciplinary co-working space for digital scholarship,
                     pedagogy, and creative practice, and of the Center for Digital Games Research.
                     He is co-author, with Jessica Pressman and Mark C. Marino, of <title
                        rend="italic">Reading Project: A Collaborative Analysis of William
                        Poundstone’s Project for Tachistoscope {Bottomless Pit}</title>
                     <ptr target="#pressman2015"/>, and co-author, with Montfort et. al, of <title
                        rend="italic">10 PRINT CHR$(205.5+RND(1)); : GOTO 10</title>
                     <ptr target="#montfort_etal2013"/>. Douglass conducts research on interactive
                     narrative, electronic literature, and games, with a focus on the methods of
                     software studies, critical code studies, and cultural analytics. His work has
                     been supported by the NEH Office of Digital Humanities, MacArthur Foundation,
                     Mellon Foundation, ACLS, Calit2, HASTAC, and NERSC.</p>
               </dhq:bio>
            </dhq:authorInfo>
         </titleStmt>
         <publicationStmt>
            <publisher>Alliance of Digital Humanities Organizations</publisher>
            <publisher>Association for Computers and the Humanities</publisher>
            <!--This information will be completed at publication-->
            <idno type="DHQarticle-id"><!--including leading zeroes: e.g. 000110-->000713</idno>
            <idno type="volume"
               ><!--volume number, with leading zeroes as needed to make 3 digits: e.g. 006-->017</idno>
            <idno type="issue"><!--issue number, without leading zeroes: e.g. 2-->2</idno>
            <date when="2023-07-19">19 July 2023</date>
            <dhq:articleType>article</dhq:articleType>
            <availability status="CC-BY-ND">
               <!--If using a different license from the default, choose one of the following:
                  CC-BY-ND (DHQ default):        
                  CC-BY:    
                  CC0:  -->
               <cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>
            </availability>
         </publicationStmt>
         <sourceDesc>
            <p>This is the source</p>
         </sourceDesc>
      </fileDesc>
      <encodingDesc>
         <classDecl>
            <taxonomy xml:id="dhq_keywords">
               <bibl>DHQ classification scheme; full list available at <ref
                     target="http://www.digitalhumanities.org/dhq/taxonomy.xml"
                     >http://www.digitalhumanities.org/dhq/taxonomy.xml</ref>
               </bibl>
            </taxonomy>
            <taxonomy xml:id="authorial_keywords">
               <bibl>Keywords supplied by author; no controlled vocabulary</bibl>
            </taxonomy>
            <taxonomy xml:id="project_keywords">
               <bibl>DHQ project registry; full list available at <ref
                     target="http://www.digitalhumanities.org/dhq/projects.xml"
                     >http://www.digitalhumanities.org/dhq/projects.xml</ref>
               </bibl>
            </taxonomy>
         </classDecl>
      </encodingDesc>
      <profileDesc>
         <langUsage>
            <language ident="en" extent="original"/>
            <!--add <language> with appropriate @ident for any additional languages-->
         </langUsage>
         <textClass>
            <keywords scheme="#dhq_keywords">
               <!--Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors-->
               <list type="simple">
                  <item/>
               </list>
            </keywords>
            <keywords scheme="#authorial_keywords">
               <!--Authors may include one or more keywords of their choice-->
               <list type="simple">
                  <item>critical code studies</item>
                  <item>digital humanities</item>
                  <item>hermeneutics</item>
                  <item>game studies</item>
                  <item>software studies</item>
                  <item>platform studies</item>
                  <item>media archaeology</item>
               </list>
            </keywords>
            <keywords scheme="#project_keywords">
               <list type="simple">
                  <item/>
               </list>
            </keywords>
         </textClass>
      </profileDesc>
      <revisionDesc>
         <!-- Replace "NNNNNN" in the @target of ref below with the appropriate DHQarticle-id value. -->
         <change>The version history for this file can be found on <ref
               target="https://github.com/Digital-Humanities-Quarterly/dhq-journal/commits/main/articles/000713/000713.xml"
               >GitHub </ref>
         </change>
      </revisionDesc>
   </teiHeader>
   <text xml:lang="en" type="original">
      <front>
         <dhq:abstract>
            <!--Include a brief abstract of the article-->
            <p>In this foreword from the editors we present a brief introduction to the field of
               Critical Code Studies, a reflection on its genesis and evolution, and a summary of
               the many and varied author contributions to Part 1 of this remarkable special
               collection.</p>
         </dhq:abstract>
         <dhq:teaser>
            <!--Include a brief teaser, no more than a phrase or a single sentence-->
            <p>An introduction to the field of Critical Code Studies and summary of author
               contributions.</p>
         </dhq:teaser>
      </front>
      <body>
         <p>Almost two decades ago, at the start of Critical Code Studies (CCS), we asked two
            provocative questions: <quote rend="inline">What does computer source code
                  <emph>mean</emph>?</quote> and <quote rend="inline">What do we discover when we
               read code with the interpretive tools of the humanities?</quote></p>
         <p>At the 2006 MLA Convention in Philadelphia <ptr target="#pmla2006"/> where we launched
               <ref target="https://electronicbookreview.com/essay/critical-code-studies/">the
               manifesto</ref>, some humanities scholars in the audience asked whether reading code
            was a conversation better suited for a technology conference. Conversely, some computer
            scientists reacted to our endeavor by asking why English majors were reading code at
            all. Incidentally, that MLA panel was organized by Rita Raley and one of the speakers
            was John Cayley, both of whom are included in this collection, so you might say this
            first volume is a bit of a reunion — appropriately so, since from the beginning CCS was
            a collaborative project, inviting and requiring a diverse group of thinkers and
            makers.</p>
         <p>On roads paved by cultural studies, semiotic analysis, science and technology studies,
            and media archaeology, we set out on the journey to understand code. Along the way we
            launched critical explorations — sometimes alone, but more often in groups. Since 2010
            we have convened seven biennial gatherings of the Critical Code Studies Working Group
               (<quote rend="inline">the major online think tank for critical code studies, a hub of
               dialogue and collaborative inquiry that generates major thrust in the reading of
               code.</quote>) Those multi-week gatherings gave rise to multi-author books such as
               <hi rend="italic">10 PRINT CHR$(205.5+RND(1)); : GOTO 10</hi>
            <ptr target="#montfort_etal2013"/>, monographs such as <hi rend="italic">Critical Code
               Studies</hi>
            <ptr target="#marino2020"/>, and numerous conference presentations and journal articles,
            including early publications in <title rend="italic">Digital Humanities
               Quarterly</title> 2013 <ptr target="#montfort_etal2013"/>
            <ptr target="#marino2013"/>.</p>
         <p>Following these initial publications, we are delighted to present this sequence of two
            Digital Humanities Quarterly special issues on Critical Code Studies as the latest
            scholarly work in the field. Their contributions extend and develop CCS through close
            readings of code and theoretical interventions, offering new methods of reading and
            interpretation while introducing new programming languages, expanding the scope of code
            studies even as they refine its methods and practices.</p>
         <p>Critical code studies is the application of the hermeneutics of the humanities to the
            interpretation of the extra-functional significance of computer source code.
               <q>Extra</q> here does not mean <q>outside of</q> or <q>apart from</q> but instead it
            refers to a significance that is <q>growing out of</q> an understanding of the
            functioning of the code. While the <ref
               target="https://electronicbookreview.com/essay/critical-code-studies/">initial
               manifesto</ref> spoke of treating code as a <q>text</q>, in later clarification (<ref
               target="https://hcommons.org/deposits/item/hc:19537/"
               >https://hcommons.org/deposits/item/hc:19537/</ref>), Mark has explained that
               <q>text</q> refers to a cultural object, rather than a collection of words. More
            significantly, if early definitions positioned the code object as the <emph>ends</emph>,
            over time, the code has proven instead to be an entry point, a <emph>means</emph> to
            open up conversations about a wide variety of topics in techno-culture. This may be part
            of what drives the intersectionality of critical code studies with related subfields in
            cultural studies and technology. CCS is as much a field constituted by methods (code
            reading) as it is by particular objects of study (code), and as such it can provide new
            approaches into many areas of investigation; indeed, the revealed object of study is
            often not the code <emph>per se</emph> but instead <q>the border</q>, <q>the lunar
               lander program</q> et cetera.</p>
         <p>Still, reading code, even *without* interpreting its cultural significance, may be no
            easy task. Ask a professional programmer who inherits legacy code to maintain or, worse
            yet, to improve, and they may tell you about the dread of sorting out just-in-time code,
            minimally documented, written with hasty patches, and full of compromises and
            workarounds. Even those who write their code in artistic projects can be shy about
            sharing their code out of embarrassment and self-consciousness. It is a product of the
               <quote rend="inline">encoded chauvinism</quote> of programming culture, one that can
            be fostered on the internet as much as it is in classrooms <ptr target="#marino2020"
               loc="148"/>. </p>
         <p>Trying to interpret code, in the humanities sense of interpretation, compounds the
            challenge of reading code, which may be why scholars so often eschew the attempt. In
            spite of the groundwork we have tried to lay in the form of methods and models,
            workshops and working groups, most essays and books about software objects either tend
            to present code writing in functional and utilitarian terms from computer science /
            software engineering perspectives or else tend to gesture toward the existence of code
            from humanities / social sciences / cultural studies perspectives — but rarely analyze
            it. Surely, the task may be arduous. Even we editors have admitted to feeling a sense of
            doubt when faced with a new code object to interpret, wondering whether an examination
            will lead anywhere at all. In our classrooms, both of us have discovered the challenges
            of teaching students how to engage in the practice. The daunting challenge of
            interpreting code is part of what makes this collection such a milestone. </p>
         <div>
            <head>Origins &amp; Extensions</head>
            <p>Critical code studies grew out of a moment when many interconnected groups of
               scholars were bringing new forms of attention to digital and computational objects.
               The namings of multiple new groups, organizations, journals, conferences, and
               subfields in the period around ~1999-2009 were often both sudden emergences and
               simultaneously culminations: <q>electronic literature,</q>
               <q>game studies,</q>
               <q>software studies,</q>
               <q>platform studies,</q>
               <q>digital humanities</q> and more were all ascendent at this time.</p>
            <p>For years, scholars such as Jay David Bolter, George Landow, Kathleen Fitzpatrick,
               Paul Saint-Amour, Janet Murray, and Brenda Laurel had examined the new media forms of
               literary hypertext and digital theatre. The Electronic Literature Organization was
               founded in 1999, organizing conferences and ELC digital literary anthologies around
               bringing sustained critical attention to digital literary objects. In Game Studies,
               Espen Aarseth’s <title rend="italic">Cybertext: Perspectives on Ergodic
                  Literature</title> (1997), Gonzalo Frasca’s <title rend="quotes">ludology</title>
               (1999), the new journal of <title rend="italic">Game Studies</title> (2001), and the
               Digital Games Research Association (2003) brought a focus on the analysis of rules,
               procedures, and processes in (often digital) games.</p>
            <p>After decades of <q>humanities computing</q> research, a new banner term <q>digital
                  humanities</q> was popularized by the influential anthology <title rend="italic">A
                  Companion to Digital Humanities</title> (2004) edited Susan Schreibman, Ray
               Siemens, and John Unsworth, followed by the formation of The Alliance of Digital
               Humanities Organizations (ADHO) (2005) and thereafter its first issue of this
               journal, <title rend="italic">Digital Humanities Quarterly</title> 1.1 (2007) under
               editors Julia Flanders, Wendell Piez, and Melissa Terras. In the United States,
               funding through the NEH Digital Humanities Initiative (2006) / Office of Digital
               Humanities (2008) further helped DH become the organizing term for what would
               eventually become the DH <q>big tent</q> — incorporating two factions that Kathleen
               Fitzpatrick would describe as <quote rend="inline">scholars who use digital
                  technologies in studying traditional humanities objects and those who use the
                  methods of the contemporary humanities in studying digital objects.</quote>
               <ptr target="#fitzpatrick2011"/></p>
            <p>Within this broader scene, an additional crucial context for the emergence of
               critical code studies were the respective calls of both Lev Manovich (<title
                  rend="italic">The Language of New Media</title>, 2001) and N. Katherine Hayles
                  (<title rend="italic">Writing Machines</title>, 2002) for scholars to employ
               media-specific analysis to attend to unique features and material conditions, to
               develop new approaches more suited to these new and emerging forms. In seeming answer
               to those calls came a stampede of <q>studies,</q> including critical code studies,
               software studies, and platform studies. Software studies brought interdisciplinary
               attention to software systems and their social and cultural effects with The Software
               Studies Workshop (2006), Software Studies Initiative (2007), and <title rend="italic"
                  >Software Studies: a Lexicon</title> edited by Matthew Fuller <ptr
                  target="#fuller2007"/>. In 2006, Ian Bogost and Nick Montfort also announced the
               Platform Studies book series they would edit for the MIT Press <ptr
                  target="#bogost_montfort2009"/> alongside their forthcoming <title rend="italic"
                  >Racing the Beam: The Atari Video Computer System</title>, and defined platform
               studies as investigating <quote rend="inline">the relationships between the hardware
                  and software design of computing systems and the creative works produced on those
                  systems.</quote> Alongside these came the continued development of media forensics
               as practiced by Matthew Kirschenbaum (e.g. <title rend="italic">Mechanisms: New Media
                  and the Forensic Imagination</title>, <ptr target="#kirschenbaum2012"/>), and of
               media archaeology, whether by Kittler and his students or by Lori Emerson.</p>
            <p>The development in critical reading practices has been attended by an expansion in
               the way programming itself is presented in works such as Nick Montfort’s introduction
               to <title rend="italic">Exploratory Programming for the Arts and Humanities</title>
               <ptr target="#montfort2016"/> and in <title rend="italic">Code as Creative
                  Medium</title>
               <ptr target="#levin2021"/> by Tega Brain and Golan Levin. Taking up questions of
               cultural meaning, Geoff Cox and Winnie Soon released their <title rend="italic"
                  >Aesthetic Programming</title>
               <ptr target="#soon2021"/> on Gitlab and invited readers to fork it, an invitation
               Mark took up with Sarah Ciston when they added a chapter of their own. We would also
               be remiss to omit Daniel Shiffman’s <title rend="italic">The Nature of Code</title>
               <ptr target="#shiffman2012"/>, which has become a staple for novice programmers.</p>
            <p>The number of books examining the culture of programs has also increased, beginning
               with David Berry’s <title rend="italic">The Philosophy of Software</title>
               <ptr target="#berry2011"/>. Furthermore, Annette Vee’s <title rend="italic">Coding
                  Literacy: How Computer Programming is Changing Writing</title> offers a cogent
               argument about the nature of programming knowledge <ptr target="#vee2017"/>. <title
                  rend="italic">Speaking Code: Coding as Aesthetic and Political Expression</title>
               by Alex McLean and Geoff Cox offers a kind of duet with Cox reading McLean’s code and
               vice versa <ptr target="#cox2013"/>. Recent books have taken up subcultures of
               programming, such as <title rend="italic">Live Coding: a user's manual</title>
               <ptr target="#blackwell2022"/>. Algorithms have received their own attention, as in
               Jeffrey M. Binder’s <title rend="italic">Language and the Rise of the
                  Algorithm</title>
               <ptr target="#binder2022"/>. More recently, James Brown’s <title rend="italic"
                  >Ethical Programs: Hospitality and the Rhetorics of Software</title>
               <ptr target="#brown2015"/> and Kevin Brock’s <title rend="italic">Rhetorical Code
                  Studies</title>
               <ptr target="#brock2019"/> offered even more methods of interpreting code.
               Interpreting the code of a digital object has contributed to as in <title
                  rend="italic">Reading Project</title>
               <ptr target="#pressman2015"/>, our collaboration with Jessica Pressman, which
               includes an analysis of the source code and source files of William Poundstone’s <ref
                  target="https://collection.eliterature.org/1/works/poundstone__project_for_tachistoscope_bottomless_pit.html"
                     ><title rend="italic">Project for Tachistoscope {Bottomless Pit}</title></ref>
               <ptr target="#poundstone2005"/>. </p>
            <p>As more critical attention takes up software, scholars have turned their attention to
               racial bias and software, following on the work of pioneers such as Alondra Nelson.
               More recently Safiya Noble in <title rend="italic">Algorithms of Oppression</title>
               <ptr target="#noble2018"/> and Joy Buolamwini with her Algorithmic Justice League
               have worked to bring the topic of racial discrimination in software to the forefront.
               Ruha Benjamin has, likewise, traced out bias in code with her extension of <q>race
                  critical code studies <ptr target="#benjamin2019"/>.</q> Historians are
               documenting the role of race in programming spaces in books such as Clyde W. Ford's
                  <title rend="italic">Think Black: A Memoir</title>
               <ptr target="#ford2019"/> and with respect to gender as in Mar Hicks’ <title
                  rend="italic">Programmed Inequality</title>
               <ptr target="#hicks2017"/>. micha cárdenas’ <title rend="italic">Poetic Operations:
                  Trans of Color Art in Digital Media</title>
               <ptr target="#cardenas2022"/> has examined algorithms with respect to trans of color.
               The social side of code and computers continues to be the subject of scholars as in
               the recent collection <title rend="italic">Your Computer is on Fire</title>
               <ptr target="#mullaney2021"/> and in the groundbreaking work of Wendy Chun.</p>
            <p>At the same time, code poets have been publishing their code. Some examples include
               Nick Montfort’s <title rend="italic">#!</title> (pronounced she-bang) and the <title
                  rend="italic">True List</title>, JR Carpenter’s <title rend="italic"
                  >Generation(s)</title>, Lillian-Yvonne Bertram’s <title rend="italic">Travesty
                  Generator</title>, or Milton Laufer’s <title rend="italic">A Noise Such as a Man
                  Might Make</title>. Code poets have played with code from the creole of <title
                  rend="italic">mezangelle</title> by Mez Breeze to the code poems of Margaret Rhee,
               collected in <title rend="italic">Love, Robot</title>. And for something completely
               different, Angus Croll’s <title rend="italic">If Hemingway Wrote Javascript</title>
               offers humorous though insightful renditions of the writing styles of famous natural
               language creative writers (from Jane Austen to Virginia Woolf) adapted into
               programming languages <ptr target="#croll2014"/>.</p>
            <p>This may be an odd claim to make, but not everyone who writes about code is a
               (digital) humanities scholar. A collection called <title rend="italic">Beautiful
                  Code: : Leading Programmers Explain How They Think</title> asks programmers to
               discuss their favorite lines of code <ptr target="#oram_wilson"/>. In <title
                  rend="italic">Once Upon an Algorithm</title>
               <ptr target="#erwig2017"/>, Martin Erwig offers lessons in programming in the
               language of storytelling. Books about the cultural meaning of code surely go back to
               Don Knuth’s <title rend="italic">Literate Programming</title>
               <ptr target="#knuth1992"/> and even <title rend="italic">The Structure and
                  Interpretation of Computer Programs</title>
               <ptr target="#knuth1984"/>. Though these authors might not write in the language of
               critical theory or hermeneutics, the vast insight from their works drawn out of
               lifetimes of work in the field of programming and computer science continue to direct
               and instruct critical code studies. </p>
            <p>In addition to these special issues of DHQ, scholars can look to a number of
               collections of publications on <title rend="italic">electronic book review</title>,
               which has been a major outlet for critical code studies since its inception. There
               readers can find write-ups and overviews from some of the CCS Working Groups. Among
               other postings are the overview of <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-and-the-electronic-book-review-an-introduction/"
                  >the original working groups</ref>, the weekly discussions from 2010 (<ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-conference-week-one-discussion/"
                  >1</ref>, <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-conference-week-two-discussion"
                  >2</ref>, <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-conference-week-three-discussion/"
                  >3</ref>, <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-conference-week-four-discussion/"
                  >4</ref>, <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies-conference-week-five-discussion/"
                  >5</ref>). In <ref
                  target="https://electronicbookreview.com/gathering/gathering-critical-code-studies-working-group-2020/"
                  >2020</ref>, <title rend="italic">ebr</title> published <ref
                  target="https://electronicbookreview.com/essay/tldr-lessons-from-ccswg-2020/">an
                  overview</ref>, and intros to weekly discussions <ref
                  target="https://electronicbookreview.com/essay/week-one-introduction-to-critical-code-studies/"
                  >re-introducing CCS</ref>, <ref
                  target="https://electronicbookreview.com/essay/week-two-indigenous-programming/"
                  >Indigenous Programming</ref>, and <ref
                  target="https://electronicbookreview.com/essay/week-three-feminist-ai/">Feminist
                  AI</ref>. Of course, <title rend="italic">electronic book review</title> was also
               the publication of the <ref
                  target="https://electronicbookreview.com/essay/critical-code-studies/">original
                  manifesto</ref>. </p>
            <p>These special issues of DHQ are the first fruits of our work to foster the
               development of critical code studies in conference presentations and biennial working
               groups over these past two decades. Over the course of the six working groups so far,
               participants have conducted fruitful investigations into several bodies of code, from
               Joseph Weizenbaum’s ELIZA to William Crowther’s ADVENTURE. More recent working groups
               have looked at the code for the Apollo Moon Lander. We have taken up issues of race
               and gender, creative coding and the ethics of code. We have explored platforms for
               annotating code, from repositories to annotation tools on Google Docs and ANVC
               Scalar. Scalar itself has served in readings of the <ref
                  target="https://scalar.usc.edu/nehvectors/border-codes/index">Transborder
                  Immigrant Tool</ref> and <ref
                  target="https://thedigitalreview.com/issue02/marino_entanglements/index.html"
                  >FISHNETSTOCKINGS</ref>. And we have speculated about alternatives to dominant
               models of code, as in our discussions of feminist AI and a feminist programming
               language. Every working group takes up new themes, as the international group of
               scholars, artists, and programmers, and every combination therein, posted code
               critique threads to see what could be said about a menagerie of objects made out of
               code. </p>
            <p>We continue to develop new venues for critical code studies practices as well. In the
               past three years, we have launched an Anti-Racist Critical Code Studies Reading
               Group, inspired by the work of Noble, Benjamin, and Buolamwini, as well as the
               Knit&amp;Perl group co-organized with Anne Sullivan and Anastasia Salter, a sewing
               circle of scholars which looks at the intersection of coding and stitchcraft or the
               fibre arts <ptr target="#salter2022"/>. We have also launched a subgroup of the
               Humanities and Critical Code Studies (HaCCS) Lab that advocates for the public
               release of code (such as predictive policing code) that affects, governs, and shapes
               the lives of citizens. This new group is called the Sunshine Source Force, drawing
               its name from the movement for legal transparency, known as the Sunshine Laws.
               Surely, new initiatives are on the horizon. </p>
            <p>Code is never one thing and is as dynamic as any semiotic form, constantly in flux.
               As we write this, machine-learning code generators, such as Github’s Copilot, are
               emerging as a major part of programming assistance even as LLMs also assist essay
               writing. We suspect, and our recent experiments have confirmed that suspicion, that
               they will also offer assistance in the interpretation of code. Like the seas of
               natural language, the ecology of computer source code is constantly shifting and so
               there is always a need for more reading practices and of course a wider and more
               diverse set of scholarly and creative minds embarking on this endeavor. </p>
         </div>
         <div>
            <head>In this issue</head>
            <p>Before you is the first special collection of critical code studies readings. This
               landmark publication, offered in the first of two issues, presents a variety of
               interpretations and theoretical reflections that apply and extend the methods of
               critical code studies and also offer a resource for scholars looking for models of
               what these readings can accomplish. In addition to demonstrating established methods
               and best practices, scholars in this issue offer new and nuanced approaches to a wide
               range of code objects as well as developing new approaches, expanding the realm of
               what can be analyzed through critical code studies — accompanied by in-depth readings
               performed by top scholars in the field. This first issue presents three groupings of
               articles: 1) exemplary close readings of code, 2) new directions in critical code
               studies (such as code legibility and Critical AI), and 3) new work in programming
               languages and linguistics (including esoteric programming languages and indigenous
               programming languages).</p>
            <p>First, this issue contains exemplary close readings of code. In <title rend="quotes"
                  >Reverse Engineering the Gendered Design of Amazon’s Alexa: Methods in Testing
                  Closed-Source Code in Grey and Black Box Systems</title>, Lai-Tze Fan examines the
               gendered design of Amazon Alexa’s voice-driven capabilities, or, <q>skills,</q>
               (despite closed source impediments) in order to better understand how Alexa, as an AI
               assistant, mirrors traditionally feminized labour and sociocultural expectations. In
                  <title rend="quotes">BASIC FTBALL for Everyone and Computer Programming for
                  All,</title> Annette Vee puts the 1965 BASIC program FTBALL in the a historical,
               cultural, gendered context of <quote rend="inline">computer programming for
                  all</quote> while gesturing to the tension between a conception of <q>all</q> and
               FTBALL’s context in an elite, all-male college in the mid-1960s. In <title
                  rend="quotes">Computational art Explorations of Linguistic Possibility Spaces:
                  comparative translingual close readings of Daniel C. Howe’s Automatype and Radical
                  of the Vertical Heart 忄</title>, John Cayley elaborates a comparative,
               transculturally implicated, code-critical close reading of two related works, by
               Daniel C. Howe, which explore linguistic possibility spaces in English and Chinese.
               This reading engages distinct and code-critically significant programming strategies,
               and underappreciated comparative linguistic concepts with implications for the theory
               of writing systems, of text, and of language as such. In <title rend="quotes"><quote
                     rend="inline">Any Means Necessary to Refuse Erasure by Algorithm:</quote>
                  Lillian-Yvonne Bertram’s Travesty Generator</title>, Zach Whalen creates an
               expansive reading of Bertram’s <quote rend="inline">challenging, haunting, and
                  important achievement of computational literature</quote> while dig more broadly
               and deeply into how specific poems work to better appreciate the collection's
               contribution to the field of digital poetry. In <title rend="quotes">Poetry as Code
                  as Interactive Fiction: Engaging Multiple Text-Based Literacies in <title
                     rend="italic">Scarlet Portrait Parlor</title></title>, Jason Boyd examples how
               various text-based literacies (procedural, poetic, ludic) can, when used together,
               elucidate the meanings of an Inform7-programmed interactive fiction in the form of a
               sonnet. This examination suggests how critical code studies may engage in more
               nuanced discussions of natural language programming.</p>
            <p>Second, this issue contains new directions in critical code studies, pursuing areas
               such as machine learning software and the limits of code, non-code, and <quote
                  rend="inline">nonsense code</quote>. In <title rend="quotes">How to Do Things with
                  Deep Learning Code</title>, Minh Hua and Rita Raley consider the feasibility and
               critical potential of CCS as a method when the object of study is deep learning code.
               Calling for a <quote rend="inline">critical urgent</quote> need for basic
               understanding of the composition and functioning of large language models, they
               extract a representational map of OpenAI’s GPT-2 which they then verify through case
               studies of two popular GPT-2 applications: the text adventure game, <title
                  rend="italic">AI Dungeon</title>, and the language art project, <title
                  rend="italic">This Word Does Not Exist</title>. In <title rend="quotes">Tracing
                     <q>Toxicity</q> Through Code: Towards a Method of Explainability and
                  Interpretability in Software</title>, David M. Berry examines how we can use
               concepts of explainability and interpretability drawn from computer science in
               critical code studies. By examining a set of code artifacts the paper looks at how
               following conceptual traces in concrete source code layers can contribute to
               understanding and explaining them. In <title rend="quotes">Nonsense Code: A
                  Nonmaterial Performance</title>, Barry Rountree and William Condee analyze three
               case studies in which a literal reading of each program’s code is effectively
               nonsense, however, the programs generate meaning in performance. Using the framework
               of nonmaterial performance (NMP) and its four tenets (code <q>abstracts</q>,
                  <q>performs</q>, <q>acts within a network</q>, and <q>is vibrant</q>), they
               consider the 1950s Univac 1 <title rend="quotes">Happy Birthday</title>, the
               Firestarter processor stress test, and the Platypus family of side-channel attacks to
               decenter text from its privileged position and to recenter code as a performance.</p>
            <p>Finally, we offer reflections on code, language, and linguistics, in particular both
               esoteric and indigenous programming languages. In <title rend="quotes">ᐊᒐᐦᑭᐯᐦᐃᑲᓇ
                  ᒫᒥᑐᓀᔨᐦᐃᒋᑲᓂᐦᑳᓂᕽ | acahkipehikana mâmitoneyihicikanihkânihk | Programming with Cree#
                  and Ancestral Code: Nehiyawewin Spirit Markings in an Artificial Brain</title>,
               Jon Corbett discusses his project <title rend="quotes">Ancestral Code</title>, which
               consists of an integrated development environment (IDE) and the Nehiyaw (Plains Cree)
               based programming languages called Cree# (pronounced: Cree-Sharp) and ᐊᒋᒧ (âcimow).
               These languages developed in response to western perspectives on human-computer
               relationships, which Corbett challenges and reframes in Nehiyaw/Indigenous contexts.
               In <title rend="quotes">The Less Humble Programmer</title>, Daniel Temkin explores
               the aesthetics of how esoteric programming languages (esolangs) break from the norms
               of language design by explicitly refusing practicality and clarity. Through examples
               that make code disordered (e.g. Malboge) or even impossible to write (e.g.
               Unnecessary), esolangs may challenge or reaffirm wider ideas in programming culture
               and in how computer science is taught: specifically the sometimes-contradictory
               aesthetics of Humbleness and Computational Idealism.</p>

         </div>
         <div type="appendix">
            <head>Acknowledgments</head>
            <p>We are grateful to our tireless authors, reviewers, and editors, as well as to <title
                  rend="italic">Digital Humanities Quarterly</title> for their support of critical
               code studies through these special issues. We are excited to see what they
               inspire!</p>
         </div>
      </body>
      <back>
         <listBibl>

            <bibl xml:id="benjamin2019" label="Benjamin 2019"> Benjamin, Ruha. <title rend="italic"
                  >Race After Technology: Abolitionist Tools for the New Jim Code</title>. 1st
               edition, Polity, 2019. </bibl>
            <bibl xml:id="berry2011" label="Berry 2011"> Berry, David M. (David Michael). <title
                  rend="italic">The Philosophy of Software: Code and Mediation in The Digital
                  Age</title>. Palgrave Macmillan, 2011. </bibl>
            <bibl xml:id="binder2022" label="Binder 2022"> Binder, Jeffrey M. <title rend="italic"
                  >Language and the Rise of the Algorithm</title>. First edition, University of
               Chicago Press, 2022. </bibl>
            <bibl xml:id="blackwell2022" label="Blackwell 2022"> Blackwell, Alan F., et al. <title
                  rend="italic">Live Coding: A User’s Manual</title>. The MIT Press, 2022. </bibl>
            <bibl xml:id="bogost_montfort2006" label="Bogost and Montfort 2006">Bogost, Ian and Nick
               Montfort. Platform Studies website. 2006. <ref target="#http://platformstudies.com/"
                  >http://platformstudies.com/</ref>.</bibl>
            <bibl xml:id="brock2019" label="Brock 2019"> Brock, Kevin. <title rend="italic"
                  >Rhetorical Code Studies: Discovering Arguments in and around Code</title>.
               University of Michigan Press, 2019. </bibl>
            <bibl xml:id="brown2015" label="Brown 2015"> Brown, James J., Jr. <title rend="italic"
                  >Ethical Programs: Hospitality and the Rhetorics of Software</title>. U OF M Digt
               Cult Books, 2015. </bibl>
            <bibl xml:id="cardenas2022" label="cárdenas 2022"> cárdenas, micha. <title rend="italic"
                  >Poetic Operations: Trans of Color Art in Digital Media</title>. Duke University
               Press Books, 2022. </bibl>
            <bibl xml:id="cox2013" label="Cox and McLean 2013"> Cox, Geoff, and Alex McLean. <title
                  rend="italic">Speaking Code: Coding as Aesthetic and Political Expression</title>.
               The MIT Press, 2013. </bibl>
            <bibl xml:id="croll2014" label="Croll 2014"> Croll, Angus. <title rend="italic">If
                  Hemingway Wrote JavaScript</title>. No Starch Press, 2014. </bibl>
            <bibl xml:id="erwig2017" label="Erwig 2017"> Erwig, Martin. <title rend="italic">Once
                  Upon an Algorithm: How Stories Explain Computing</title>. The MIT Press, 2017. </bibl>
            <bibl xml:id="ford2019" label="Ford 2019"> Ford, Clyde W. <title rend="italic">Think
                  Black: A Memoir</title>. Amistad, 2019. </bibl>
            <bibl xml:id="fitzpatrick2011" label="Fitzpatrick 2011">Fitzpatrick, Kathleen. <title
                  rend="quotes">The Humanities, Done Digitally.</title>
               <title rend="italic">The Atlantic</title>, May 8, 2011. <ref
                  target="https://archive.ph/FNyko">https://archive.ph/FNyko</ref>.</bibl>
            <bibl xml:id="hicks2017" label="Hicks 2017"> Hicks, Marie. <title rend="italic"
                  >Programmed Inequality: How Britain Discarded Women Technologists and Lost Its
                  Edge in Computing</title>. 1st edition, The MIT Press, 2017. </bibl>
            <bibl xml:id="levin2021" label="Levin and Brain 2021"> Levin, Golan, and Tega Brain.
                  <title rend="italic">Code as Creative Medium: A Handbook for Computational Art and
                  Design</title>. Annotated edition, The MIT Press, 2021. </bibl>
            <bibl xml:id="marino2013" label="Marino 2013"> Marino, Mark C. <title rend="italic">Code
                  as Ritualized Poetry: The Tactics of the Transborder Immigrant Tool</title>. <hi
                  rend="italic">Digital Humanities Quarterly</hi>, no. 1, 2013. <ref
                  target="http://www.digitalhumanities.org/dhq/vol/7/1/000157/000157.html"
                  >http://www.digitalhumanities.org/dhq/vol/7/1/000157/000157.html</ref>. </bibl>
            <bibl xml:id="marino2006" label="Marino 2006"> Marino, Mark C. <title rend="quotes"
                  >Critical Code Studies</title>. <title rend="italic">Electronic Book
                  Review</title>, vol. electropoetics, Winter 2006, <ref
                  target="http://www.electronicbookreview.com/thread/electropoetics/codology"
                  >http://www.electronicbookreview.com/thread/electropoetics/codology</ref>. </bibl>
            <bibl xml:id="marino2020" label="Marino 2020"> Marino, Mark C. <title rend="italic"
                  >Critical Code Studies</title>. The MIT Press, 2020. </bibl>
            <bibl xml:id="marino2018" label="Marino 2018"> Marino, Mark C. <title rend="quotes"
                  >Reading Culture through Code</title>. In <title rend="italic">Routledge Companion
                  to Media Studies and Digital Humanities</title>, edited by Jentery Sayers,
               Routledge, 2018, pp. 472–82. <ref
                  target="https://hcommons.org/deposits/item/hc:19537/"
                  >https://hcommons.org/deposits/item/hc:19537/</ref>. </bibl>
            <bibl xml:id="marino2016" label="Marino 2016"> Marino, Mark C. <title rend="quotes">Why
                  We Must Read the Code: The Science Wars, Episode IV</title>. In <title
                  rend="italic">Debates in the Digital Humanities</title>, edited by Matthew K. Gold
               and Lauren F. Klein, vol. 2, U of Minnesota Press, 2016, <ref
                  target="http://dhdebates.gc.cuny.edu/debates/text/64"
                  >http://dhdebates.gc.cuny.edu/debates/text/64</ref>. </bibl>
            <bibl xml:id="montfort_etal2013" label="Montfort et al. 2013"> Montfort, Nick, et al.
                  <title rend="italic">10 PRINT CHR$(205.5+RND(1)); : GOTO 10</title>. The MIT
               Press, 2013. </bibl>
            <bibl xml:id="montfortstrickland2013" label="Montfort and Strickland 2013"> Montfort,
               Nick, and Stephanie Strickland. <title rend="quotes">Cut to Fit the Tool-Spun
                  Course</title>. <title rend="italic">Digital Humanities Quarterly</title>, vol. 7,
               no. 1, 2013, <ref
                  target="http://www.digitalhumanities.org/dhq/vol/7/1/000149/000149.html"
                  >http://www.digitalhumanities.org/dhq/vol/7/1/000149/000149.html</ref>. </bibl>
            <bibl xml:id="montfort2016" label="Montfort 2016"> Montfort, Nick. <title rend="italic"
                  >Exploratory Programming for the Arts and Humanities</title>. 1 edition, The MIT
               Press, 2016. </bibl>
            <bibl xml:id="mullaney2021" label="Mullaney et al. 2021"> Mullaney, Thomas S., et al.,
               editors. <title rend="italic">Your Computer Is on Fire</title>. MIT Press, 2021, <ref
                  target="https://doi.org/10.7551/mitpress/10993.001.0001"
                  >https://doi.org/10.7551/mitpress/10993.001.0001</ref>. </bibl>
            <bibl xml:id="noble2018" label="Noble 2018"> Noble, Safiya Umoja. <title rend="italic"
                  >Algorithms of Oppression: How Search Engines Reinforce Racism</title>.
               Illustrated edition, NYU Press, 2018. </bibl>
            <bibl xml:id="pressman2015" label="Pressman et al. 2015"> Pressman, Jessica, et al.
                  <title rend="italic">Reading Project: A Collaborative Analysis of William
                  Poundstone’s Project for Tachistoscope {Bottomless Pit}</title>. 1 edition,
               University Of Iowa Press, 2015. </bibl>
            <bibl xml:id="pmla2006" label="PMLA 2006">
               <title rend="quotes">Program of the 2006 Convention</title>. <title rend="italic"
                  >PMLA</title>, vol. 121, no. 6, 2006, pp. 1801–2000. </bibl>
            <bibl xml:id="salter2022" label="Salter and Sullivan 2022"> Salter, Anastasia, and Anne
               Sullivan. <title rend="quotes">Week 2: Of Textiles and Technology - Discussion
                  Starter</title>. <title rend="italic">2022 CCS Working Group</title>, 29 Jan.
               2022, <ref
                  target="https://wg.criticalcodestudies.com/index.php?p=/discussion/113/week-2-of-textiles-and-technology-discussion-starter"
                  >https://wg.criticalcodestudies.com/index.php?p=/discussion/113/week-2-of-textiles-and-technology-discussion-starter</ref>. </bibl>
            <bibl xml:id="shiffman2012" label="Shiffman 2012"> Shiffman, Daniel. <title
                  rend="italic">The Nature of Code: Simulating Natural Systems with
                  Processing</title>. 1st edition, The Nature of Code, 2012. </bibl>
            <bibl xml:id="soon2021" label="Soon and Cox 2021"> Soon, Winnie, and Geoff Cox. <title
                  rend="italic">Aesthetic Programming: A Handbook of Software Studies</title>. Open
               Humanities Press, 2021. </bibl>
            <bibl xml:id="vee2017" label="Vee 2017"> Vee, Annette. <title rend="italic">Coding
                  Literacy: How Computer Programming Is Changing Writing</title>. The MIT Press,
               2017. </bibl>
         </listBibl>
      </back>
   </text>
</TEI>
