<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>[PREVIEW] DHQ: Digital Humanities Quarterly: </title>
      <link href="../../common/css/dhq.css" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_screen.css" media="screen" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_print.css" media="print" type="text/css" rel="stylesheet" />
      <style type="text/css">
        #mainContent {
          float: none;
          padding-top: 2em;
          padding-left: 4em;
          padding-right: 4em;
          margin-left: 225px;
           
        }</style>
   </head>
   <body>
      <div id="mainContent">
         <div class="DHQarticle">
            <div id="pubInfo">Preview<br />Volume 017 Number 2</div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            
            <div class="DHQheader">
               
               
               
               
               <h1 class="articleTitle lang en">Introduction to
                  Critical Code Studies Special Issue 1 of DHQ</h1>
               
               
               <div class="author"><span style="color: grey">Mark C. Marino
                     </span> &lt;<a href="mailto:markcmarino_at_gmail_dot_com" onclick="javascript:window.location.href='mailto:'+deobfuscate('markcmarino_at_gmail_dot_com'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('markcmarino_at_gmail_dot_com'); return false;">markcmarino_at_gmail_dot_com</a>&gt;, University of Southern California</div>
               
               <div class="author"><span style="color: grey">Jeremy Douglass
                     </span> &lt;<a href="mailto:jeremydouglass_at_gmail_dot_com" onclick="javascript:window.location.href='mailto:'+deobfuscate('jeremydouglass_at_gmail_dot_com'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('jeremydouglass_at_gmail_dot_com'); return false;">jeremydouglass_at_gmail_dot_com</a>&gt;, University of California, Santa Barbara</div>
               
               
               
               
               
               
               
               <span class="Z3988" title="url_ver=Z39.88-2004&amp;ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rfr_id=info%3Asid%2Fzotero.org%3A2&amp;rft.genre=article&amp;rft.atitle=Introduction%20to%20Critical%20Code%20Studies%20Special%20Issue%201%20of%20DHQ&amp;rft.jtitle=Digital%20Humanities%20Quarterly&amp;rft.stitle=DHQ&amp;rft.issn=1938-4122&amp;rft.date=2023-07-19&amp;rft.volume=017&amp;rft.issue=2&amp;rft.aulast=Marino&amp;rft.aufirst=Mark C.&amp;rft.au=Mark C.%20Marino&amp;rft.au=Jeremy%20Douglass"> </span></div>
            
            <div id="DHQtext">
               
               
               <div id="abstract">
                  <h2>Abstract</h2>
                  
                  
                  <p>In this foreword from the editors we present a brief introduction to the field of
                     Critical Code Studies, a reflection on its genesis and evolution, and a summary of
                     the many and varied author contributions to Part 1 of this remarkable special
                     collection.</p>
                  </div>
               
               
               
               
               <div class="counter"><a href="#p1">1</a></div>
               <div class="ptext" id="p1">Almost two decades ago, at the start of Critical Code Studies (CCS), we asked two
                  provocative questions: “What does computer source code
                  <em class="emph">mean</em>?” and “What do we discover when we
                  read code with the interpretive tools of the humanities?”</div>
               
               <div class="counter"><a href="#p2">2</a></div>
               <div class="ptext" id="p2">At the 2006 MLA Convention in Philadelphia [<a class="ref" href="#pmla2006">PMLA 2006</a>] where we launched
                  <a href="https://electronicbookreview.com/essay/critical-code-studies/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies/'); return false" class="ref">the
                     manifesto</a>, some humanities scholars in the audience asked whether reading code
                  was a conversation better suited for a technology conference. Conversely, some computer
                  scientists reacted to our endeavor by asking why English majors were reading code
                  at
                  all. Incidentally, that MLA panel was organized by Rita Raley and one of the speakers
                  was John Cayley, both of whom are included in this collection, so you might say this
                  first volume is a bit of a reunion — appropriately so, since from the beginning CCS
                  was
                  a collaborative project, inviting and requiring a diverse group of thinkers and
                  makers.</div>
               
               <div class="counter"><a href="#p3">3</a></div>
               <div class="ptext" id="p3">On roads paved by cultural studies, semiotic analysis, science and technology studies,
                  and media archaeology, we set out on the journey to understand code. Along the way
                  we
                  launched critical explorations — sometimes alone, but more often in groups. Since
                  2010
                  we have convened seven biennial gatherings of the Critical Code Studies Working Group
                  (“the major online think tank for critical code studies, a hub of
                  dialogue and collaborative inquiry that generates major thrust in the reading of
                  code.”) Those multi-week gatherings gave rise to multi-author books such as
                  <span class="hi italic">10 PRINT CHR$(205.5+RND(1)); : GOTO 10</span>
                  [<a class="ref" href="#montfort_etal2013">Montfort et al. 2013</a>], monographs such as <span class="hi italic">Critical Code
                     Studies</span>
                  [<a class="ref" href="#marino2020">Marino 2020</a>], and numerous conference presentations and journal articles,
                  including early publications in <cite class="title italic">Digital Humanities
                     Quarterly</cite> 2013 [<a class="ref" href="#montfort_etal2013">Montfort et al. 2013</a>]
                  [<a class="ref" href="#marino2013">Marino 2013</a>].</div>
               
               <div class="counter"><a href="#p4">4</a></div>
               <div class="ptext" id="p4">Following these initial publications, we are delighted to present this sequence of
                  two
                  Digital Humanities Quarterly special issues on Critical Code Studies as the latest
                  scholarly work in the field. Their contributions extend and develop CCS through close
                  readings of code and theoretical interventions, offering new methods of reading and
                  interpretation while introducing new programming languages, expanding the scope of
                  code
                  studies even as they refine its methods and practices.</div>
               
               <div class="counter"><a href="#p5">5</a></div>
               <div class="ptext" id="p5">Critical code studies is the application of the hermeneutics of the humanities to
                  the
                  interpretation of the extra-functional significance of computer source code.
                  “Extra” here does not mean “outside of” or “apart from” but instead it
                  refers to a significance that is “growing out of” an understanding of the
                  functioning of the code. While the <a href="https://electronicbookreview.com/essay/critical-code-studies/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies/'); return false" class="ref">initial
                     manifesto</a> spoke of treating code as a “text”, in later clarification (<a href="https://hcommons.org/deposits/item/hc:19537/" onclick="window.open('https://hcommons.org/deposits/item/hc:19537/'); return false" class="ref">https://hcommons.org/deposits/item/hc:19537/</a>), Mark has explained that
                  “text” refers to a cultural object, rather than a collection of words. More
                  significantly, if early definitions positioned the code object as the <em class="emph">ends</em>,
                  over time, the code has proven instead to be an entry point, a <em class="emph">means</em> to
                  open up conversations about a wide variety of topics in techno-culture. This may be
                  part
                  of what drives the intersectionality of critical code studies with related subfields
                  in
                  cultural studies and technology. CCS is as much a field constituted by methods (code
                  reading) as it is by particular objects of study (code), and as such it can provide
                  new
                  approaches into many areas of investigation; indeed, the revealed object of study
                  is
                  often not the code <em class="emph">per se</em> but instead “the border”, “the lunar
                  lander program” et cetera.</div>
               
               <div class="counter"><a href="#p6">6</a></div>
               <div class="ptext" id="p6">Still, reading code, even *without* interpreting its cultural significance, may be
                  no
                  easy task. Ask a professional programmer who inherits legacy code to maintain or,
                  worse
                  yet, to improve, and they may tell you about the dread of sorting out just-in-time
                  code,
                  minimally documented, written with hasty patches, and full of compromises and
                  workarounds. Even those who write their code in artistic projects can be shy about
                  sharing their code out of embarrassment and self-consciousness. It is a product of
                  the
                  “encoded chauvinism” of programming culture, one that can
                  be fostered on the internet as much as it is in classrooms [<a class="ref" href="#marino2020">Marino 2020</a>, 148]. </div>
               
               <div class="counter"><a href="#p7">7</a></div>
               <div class="ptext" id="p7">Trying to interpret code, in the humanities sense of interpretation, compounds the
                  challenge of reading code, which may be why scholars so often eschew the attempt.
                  In
                  spite of the groundwork we have tried to lay in the form of methods and models,
                  workshops and working groups, most essays and books about software objects either
                  tend
                  to present code writing in functional and utilitarian terms from computer science
                  /
                  software engineering perspectives or else tend to gesture toward the existence of
                  code
                  from humanities / social sciences / cultural studies perspectives — but rarely analyze
                  it. Surely, the task may be arduous. Even we editors have admitted to feeling a sense
                  of
                  doubt when faced with a new code object to interpret, wondering whether an examination
                  will lead anywhere at all. In our classrooms, both of us have discovered the challenges
                  of teaching students how to engage in the practice. The daunting challenge of
                  interpreting code is part of what makes this collection such a milestone. </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Origins &amp; Extensions</h1>
                  
                  <div class="counter"><a href="#p8">8</a></div>
                  <div class="ptext" id="p8">Critical code studies grew out of a moment when many interconnected groups of
                     scholars were bringing new forms of attention to digital and computational objects.
                     The namings of multiple new groups, organizations, journals, conferences, and
                     subfields in the period around ~1999-2009 were often both sudden emergences and
                     simultaneously culminations: “electronic literature,”
                     “game studies,”
                     “software studies,”
                     “platform studies,”
                     “digital humanities” and more were all ascendent at this time.</div>
                  
                  <div class="counter"><a href="#p9">9</a></div>
                  <div class="ptext" id="p9">For years, scholars such as Jay David Bolter, George Landow, Kathleen Fitzpatrick,
                     Paul Saint-Amour, Janet Murray, and Brenda Laurel had examined the new media forms
                     of
                     literary hypertext and digital theatre. The Electronic Literature Organization was
                     founded in 1999, organizing conferences and ELC digital literary anthologies around
                     bringing sustained critical attention to digital literary objects. In Game Studies,
                     Espen Aarseth’s <cite class="title italic">Cybertext: Perspectives on Ergodic
                        Literature</cite> (1997), Gonzalo Frasca’s “ludology”
                     (1999), the new journal of <cite class="title italic">Game Studies</cite> (2001), and the
                     Digital Games Research Association (2003) brought a focus on the analysis of rules,
                     procedures, and processes in (often digital) games.</div>
                  
                  <div class="counter"><a href="#p10">10</a></div>
                  <div class="ptext" id="p10">After decades of “humanities computing” research, a new banner term “digital
                     humanities” was popularized by the influential anthology <cite class="title italic">A
                        Companion to Digital Humanities</cite> (2004) edited Susan Schreibman, Ray
                     Siemens, and John Unsworth, followed by the formation of The Alliance of Digital
                     Humanities Organizations (ADHO) (2005) and thereafter its first issue of this
                     journal, <cite class="title italic">Digital Humanities Quarterly</cite> 1.1 (2007) under
                     editors Julia Flanders, Wendell Piez, and Melissa Terras. In the United States,
                     funding through the NEH Digital Humanities Initiative (2006) / Office of Digital
                     Humanities (2008) further helped DH become the organizing term for what would
                     eventually become the DH “big tent” — incorporating two factions that Kathleen
                     Fitzpatrick would describe as “scholars who use digital
                     technologies in studying traditional humanities objects and those who use the
                     methods of the contemporary humanities in studying digital objects.”
                     [<a class="ref" href="#fitzpatrick2011">Fitzpatrick 2011</a>]</div>
                  
                  <div class="counter"><a href="#p11">11</a></div>
                  <div class="ptext" id="p11">Within this broader scene, an additional crucial context for the emergence of
                     critical code studies were the respective calls of both Lev Manovich (<cite class="title italic">The Language of New Media</cite>, 2001) and N. Katherine Hayles
                     (<cite class="title italic">Writing Machines</cite>, 2002) for scholars to employ
                     media-specific analysis to attend to unique features and material conditions, to
                     develop new approaches more suited to these new and emerging forms. In seeming answer
                     to those calls came a stampede of “studies,” including critical code studies,
                     software studies, and platform studies. Software studies brought interdisciplinary
                     attention to software systems and their social and cultural effects with The Software
                     Studies Workshop (2006), Software Studies Initiative (2007), and <cite class="title italic">Software Studies: a Lexicon</cite> edited by Matthew Fuller <span class="error"><a class="ref" href="#fuller2007">#fuller2007</a></span>. In 2006, Ian Bogost and Nick Montfort also announced the
                     Platform Studies book series they would edit for the MIT Press <span class="error"><a class="ref" href="#bogost_montfort2009">#bogost_montfort2009</a></span> alongside their forthcoming <cite class="title italic">Racing the Beam: The Atari Video Computer System</cite>, and defined platform
                     studies as investigating “the relationships between the hardware
                     and software design of computing systems and the creative works produced on those
                     systems.” Alongside these came the continued development of media forensics
                     as practiced by Matthew Kirschenbaum (e.g. <cite class="title italic">Mechanisms: New Media
                        and the Forensic Imagination</cite>, <span class="error"><a class="ref" href="#kirschenbaum2012">#kirschenbaum2012</a></span>), and of
                     media archaeology, whether by Kittler and his students or by Lori Emerson.</div>
                  
                  <div class="counter"><a href="#p12">12</a></div>
                  <div class="ptext" id="p12">The development in critical reading practices has been attended by an expansion in
                     the way programming itself is presented in works such as Nick Montfort’s introduction
                     to <cite class="title italic">Exploratory Programming for the Arts and Humanities</cite>
                     [<a class="ref" href="#montfort2016">Montfort 2016</a>] and in <cite class="title italic">Code as Creative
                        Medium</cite>
                     [<a class="ref" href="#levin2021">Levin and Brain 2021</a>] by Tega Brain and Golan Levin. Taking up questions of
                     cultural meaning, Geoff Cox and Winnie Soon released their <cite class="title italic">Aesthetic Programming</cite>
                     [<a class="ref" href="#soon2021">Soon and Cox 2021</a>] on Gitlab and invited readers to fork it, an invitation
                     Mark took up with Sarah Ciston when they added a chapter of their own. We would also
                     be remiss to omit Daniel Shiffman’s <cite class="title italic">The Nature of Code</cite>
                     [<a class="ref" href="#shiffman2012">Shiffman 2012</a>], which has become a staple for novice programmers.</div>
                  
                  <div class="counter"><a href="#p13">13</a></div>
                  <div class="ptext" id="p13">The number of books examining the culture of programs has also increased, beginning
                     with David Berry’s <cite class="title italic">The Philosophy of Software</cite>
                     [<a class="ref" href="#berry2011">Berry 2011</a>]. Furthermore, Annette Vee’s <cite class="title italic">Coding
                        Literacy: How Computer Programming is Changing Writing</cite> offers a cogent
                     argument about the nature of programming knowledge [<a class="ref" href="#vee2017">Vee 2017</a>]. <cite class="title italic">Speaking Code: Coding as Aesthetic and Political Expression</cite>
                     by Alex McLean and Geoff Cox offers a kind of duet with Cox reading McLean’s code
                     and
                     vice versa [<a class="ref" href="#cox2013">Cox and McLean 2013</a>]. Recent books have taken up subcultures of
                     programming, such as <cite class="title italic">Live Coding: a user's manual</cite>
                     [<a class="ref" href="#blackwell2022">Blackwell 2022</a>]. Algorithms have received their own attention, as in
                     Jeffrey M. Binder’s <cite class="title italic">Language and the Rise of the
                        Algorithm</cite>
                     [<a class="ref" href="#binder2022">Binder 2022</a>]. More recently, James Brown’s <cite class="title italic">Ethical Programs: Hospitality and the Rhetorics of Software</cite>
                     [<a class="ref" href="#brown2015">Brown 2015</a>] and Kevin Brock’s <cite class="title italic">Rhetorical Code
                        Studies</cite>
                     [<a class="ref" href="#brock2019">Brock 2019</a>] offered even more methods of interpreting code.
                     Interpreting the code of a digital object has contributed to as in <cite class="title italic">Reading Project</cite>
                     [<a class="ref" href="#pressman2015">Pressman et al. 2015</a>], our collaboration with Jessica Pressman, which
                     includes an analysis of the source code and source files of William Poundstone’s <a href="https://collection.eliterature.org/1/works/poundstone__project_for_tachistoscope_bottomless_pit.html" onclick="window.open('https://collection.eliterature.org/1/works/poundstone__project_for_tachistoscope_bottomless_pit.html'); return false" class="ref"><cite class="title italic">Project for Tachistoscope {Bottomless Pit}</cite></a>
                     <span class="error"><a class="ref" href="#poundstone2005">#poundstone2005</a></span>. </div>
                  
                  <div class="counter"><a href="#p14">14</a></div>
                  <div class="ptext" id="p14">As more critical attention takes up software, scholars have turned their attention
                     to
                     racial bias and software, following on the work of pioneers such as Alondra Nelson.
                     More recently Safiya Noble in <cite class="title italic">Algorithms of Oppression</cite>
                     [<a class="ref" href="#noble2018">Noble 2018</a>] and Joy Buolamwini with her Algorithmic Justice League
                     have worked to bring the topic of racial discrimination in software to the forefront.
                     Ruha Benjamin has, likewise, traced out bias in code with her extension of “race
                     critical code studies [<a class="ref" href="#benjamin2019">Benjamin 2019</a>].” Historians are
                     documenting the role of race in programming spaces in books such as Clyde W. Ford's
                     <cite class="title italic">Think Black: A Memoir</cite>
                     [<a class="ref" href="#ford2019">Ford 2019</a>] and with respect to gender as in Mar Hicks’ <cite class="title italic">Programmed Inequality</cite>
                     [<a class="ref" href="#hicks2017">Hicks 2017</a>]. micha cárdenas’ <cite class="title italic">Poetic Operations:
                        Trans of Color Art in Digital Media</cite>
                     [<a class="ref" href="#cardenas2022">cárdenas 2022</a>] has examined algorithms with respect to trans of color.
                     The social side of code and computers continues to be the subject of scholars as in
                     the recent collection <cite class="title italic">Your Computer is on Fire</cite>
                     [<a class="ref" href="#mullaney2021">Mullaney et al. 2021</a>] and in the groundbreaking work of Wendy Chun.</div>
                  
                  <div class="counter"><a href="#p15">15</a></div>
                  <div class="ptext" id="p15">At the same time, code poets have been publishing their code. Some examples include
                     Nick Montfort’s <cite class="title italic">#!</cite> (pronounced she-bang) and the <cite class="title italic">True List</cite>, JR Carpenter’s <cite class="title italic">Generation(s)</cite>, Lillian-Yvonne Bertram’s <cite class="title italic">Travesty
                        Generator</cite>, or Milton Laufer’s <cite class="title italic">A Noise Such as a Man
                        Might Make</cite>. Code poets have played with code from the creole of <cite class="title italic">mezangelle</cite> by Mez Breeze to the code poems of Margaret Rhee,
                     collected in <cite class="title italic">Love, Robot</cite>. And for something completely
                     different, Angus Croll’s <cite class="title italic">If Hemingway Wrote Javascript</cite>
                     offers humorous though insightful renditions of the writing styles of famous natural
                     language creative writers (from Jane Austen to Virginia Woolf) adapted into
                     programming languages [<a class="ref" href="#croll2014">Croll 2014</a>].</div>
                  
                  <div class="counter"><a href="#p16">16</a></div>
                  <div class="ptext" id="p16">This may be an odd claim to make, but not everyone who writes about code is a
                     (digital) humanities scholar. A collection called <cite class="title italic">Beautiful
                        Code: : Leading Programmers Explain How They Think</cite> asks programmers to
                     discuss their favorite lines of code <span class="error"><a class="ref" href="#oram_wilson">#oram_wilson</a></span>. In <cite class="title italic">Once Upon an Algorithm</cite>
                     [<a class="ref" href="#erwig2017">Erwig 2017</a>], Martin Erwig offers lessons in programming in the
                     language of storytelling. Books about the cultural meaning of code surely go back
                     to
                     Don Knuth’s <cite class="title italic">Literate Programming</cite>
                     <span class="error"><a class="ref" href="#knuth1992">#knuth1992</a></span> and even <cite class="title italic">The Structure and
                        Interpretation of Computer Programs</cite>
                     <span class="error"><a class="ref" href="#knuth1984">#knuth1984</a></span>. Though these authors might not write in the language of
                     critical theory or hermeneutics, the vast insight from their works drawn out of
                     lifetimes of work in the field of programming and computer science continue to direct
                     and instruct critical code studies. </div>
                  
                  <div class="counter"><a href="#p17">17</a></div>
                  <div class="ptext" id="p17">In addition to these special issues of DHQ, scholars can look to a number of
                     collections of publications on <cite class="title italic">electronic book review</cite>,
                     which has been a major outlet for critical code studies since its inception. There
                     readers can find write-ups and overviews from some of the CCS Working Groups. Among
                     other postings are the overview of <a href="https://electronicbookreview.com/essay/critical-code-studies-and-the-electronic-book-review-an-introduction/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-and-the-electronic-book-review-an-introduction/'); return false" class="ref">the original working groups</a>, the weekly discussions from 2010 (<a href="https://electronicbookreview.com/essay/critical-code-studies-conference-week-one-discussion/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-conference-week-one-discussion/'); return false" class="ref">1</a>, <a href="https://electronicbookreview.com/essay/critical-code-studies-conference-week-two-discussion" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-conference-week-two-discussion'); return false" class="ref">2</a>, <a href="https://electronicbookreview.com/essay/critical-code-studies-conference-week-three-discussion/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-conference-week-three-discussion/'); return false" class="ref">3</a>, <a href="https://electronicbookreview.com/essay/critical-code-studies-conference-week-four-discussion/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-conference-week-four-discussion/'); return false" class="ref">4</a>, <a href="https://electronicbookreview.com/essay/critical-code-studies-conference-week-five-discussion/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies-conference-week-five-discussion/'); return false" class="ref">5</a>). In <a href="https://electronicbookreview.com/gathering/gathering-critical-code-studies-working-group-2020/" onclick="window.open('https://electronicbookreview.com/gathering/gathering-critical-code-studies-working-group-2020/'); return false" class="ref">2020</a>, <cite class="title italic">ebr</cite> published <a href="https://electronicbookreview.com/essay/tldr-lessons-from-ccswg-2020/" onclick="window.open('https://electronicbookreview.com/essay/tldr-lessons-from-ccswg-2020/'); return false" class="ref">an
                        overview</a>, and intros to weekly discussions <a href="https://electronicbookreview.com/essay/week-one-introduction-to-critical-code-studies/" onclick="window.open('https://electronicbookreview.com/essay/week-one-introduction-to-critical-code-studies/'); return false" class="ref">re-introducing CCS</a>, <a href="https://electronicbookreview.com/essay/week-two-indigenous-programming/" onclick="window.open('https://electronicbookreview.com/essay/week-two-indigenous-programming/'); return false" class="ref">Indigenous Programming</a>, and <a href="https://electronicbookreview.com/essay/week-three-feminist-ai/" onclick="window.open('https://electronicbookreview.com/essay/week-three-feminist-ai/'); return false" class="ref">Feminist
                        AI</a>. Of course, <cite class="title italic">electronic book review</cite> was also
                     the publication of the <a href="https://electronicbookreview.com/essay/critical-code-studies/" onclick="window.open('https://electronicbookreview.com/essay/critical-code-studies/'); return false" class="ref">original
                        manifesto</a>. </div>
                  
                  <div class="counter"><a href="#p18">18</a></div>
                  <div class="ptext" id="p18">These special issues of DHQ are the first fruits of our work to foster the
                     development of critical code studies in conference presentations and biennial working
                     groups over these past two decades. Over the course of the six working groups so far,
                     participants have conducted fruitful investigations into several bodies of code, from
                     Joseph Weizenbaum’s ELIZA to William Crowther’s ADVENTURE. More recent working groups
                     have looked at the code for the Apollo Moon Lander. We have taken up issues of race
                     and gender, creative coding and the ethics of code. We have explored platforms for
                     annotating code, from repositories to annotation tools on Google Docs and ANVC
                     Scalar. Scalar itself has served in readings of the <a href="https://scalar.usc.edu/nehvectors/border-codes/index" onclick="window.open('https://scalar.usc.edu/nehvectors/border-codes/index'); return false" class="ref">Transborder
                        Immigrant Tool</a> and <a href="https://thedigitalreview.com/issue02/marino_entanglements/index.html" onclick="window.open('https://thedigitalreview.com/issue02/marino_entanglements/index.html'); return false" class="ref">FISHNETSTOCKINGS</a>. And we have speculated about alternatives to dominant
                     models of code, as in our discussions of feminist AI and a feminist programming
                     language. Every working group takes up new themes, as the international group of
                     scholars, artists, and programmers, and every combination therein, posted code
                     critique threads to see what could be said about a menagerie of objects made out of
                     code. </div>
                  
                  <div class="counter"><a href="#p19">19</a></div>
                  <div class="ptext" id="p19">We continue to develop new venues for critical code studies practices as well. In
                     the
                     past three years, we have launched an Anti-Racist Critical Code Studies Reading
                     Group, inspired by the work of Noble, Benjamin, and Buolamwini, as well as the
                     Knit&amp;Perl group co-organized with Anne Sullivan and Anastasia Salter, a sewing
                     circle of scholars which looks at the intersection of coding and stitchcraft or the
                     fibre arts [<a class="ref" href="#salter2022">Salter and Sullivan 2022</a>]. We have also launched a subgroup of the
                     Humanities and Critical Code Studies (HaCCS) Lab that advocates for the public
                     release of code (such as predictive policing code) that affects, governs, and shapes
                     the lives of citizens. This new group is called the Sunshine Source Force, drawing
                     its name from the movement for legal transparency, known as the Sunshine Laws.
                     Surely, new initiatives are on the horizon. </div>
                  
                  <div class="counter"><a href="#p20">20</a></div>
                  <div class="ptext" id="p20">Code is never one thing and is as dynamic as any semiotic form, constantly in flux.
                     As we write this, machine-learning code generators, such as Github’s Copilot, are
                     emerging as a major part of programming assistance even as LLMs also assist essay
                     writing. We suspect, and our recent experiments have confirmed that suspicion, that
                     they will also offer assistance in the interpretation of code. Like the seas of
                     natural language, the ecology of computer source code is constantly shifting and so
                     there is always a need for more reading practices and of course a wider and more
                     diverse set of scholarly and creative minds embarking on this endeavor. </div>
                  </div>
               
               <div class="div div0">
                  
                  <h1 class="head">In this issue</h1>
                  
                  <div class="counter"><a href="#p21">21</a></div>
                  <div class="ptext" id="p21">Before you is the first special collection of critical code studies readings. This
                     landmark publication, offered in the first of two issues, presents a variety of
                     interpretations and theoretical reflections that apply and extend the methods of
                     critical code studies and also offer a resource for scholars looking for models of
                     what these readings can accomplish. In addition to demonstrating established methods
                     and best practices, scholars in this issue offer new and nuanced approaches to a wide
                     range of code objects as well as developing new approaches, expanding the realm of
                     what can be analyzed through critical code studies — accompanied by in-depth readings
                     performed by top scholars in the field. This first issue presents three groupings
                     of
                     articles: 1) exemplary close readings of code, 2) new directions in critical code
                     studies (such as code legibility and Critical AI), and 3) new work in programming
                     languages and linguistics (including esoteric programming languages and indigenous
                     programming languages).</div>
                  
                  <div class="counter"><a href="#p22">22</a></div>
                  <div class="ptext" id="p22">First, this issue contains exemplary close readings of code. In “Reverse Engineering the Gendered Design of Amazon’s Alexa: Methods in Testing
                     Closed-Source Code in Grey and Black Box Systems”, Lai-Tze Fan examines the
                     gendered design of Amazon Alexa’s voice-driven capabilities, or, “skills,”
                     (despite closed source impediments) in order to better understand how Alexa, as an
                     AI
                     assistant, mirrors traditionally feminized labour and sociocultural expectations.
                     In
                     “BASIC FTBALL for Everyone and Computer Programming for
                     All,” Annette Vee puts the 1965 BASIC program FTBALL in the a historical,
                     cultural, gendered context of “computer programming for
                     all” while gesturing to the tension between a conception of “all” and
                     FTBALL’s context in an elite, all-male college in the mid-1960s. In “Computational art Explorations of Linguistic Possibility Spaces:
                     comparative translingual close readings of Daniel C. Howe’s Automatype and Radical
                     of the Vertical Heart 忄”, John Cayley elaborates a comparative,
                     transculturally implicated, code-critical close reading of two related works, by
                     Daniel C. Howe, which explore linguistic possibility spaces in English and Chinese.
                     This reading engages distinct and code-critically significant programming strategies,
                     and underappreciated comparative linguistic concepts with implications for the theory
                     of writing systems, of text, and of language as such. In “‘Any Means Necessary to Refuse Erasure by Algorithm:’
                     Lillian-Yvonne Bertram’s Travesty Generator”, Zach Whalen creates an
                     expansive reading of Bertram’s “challenging, haunting, and
                     important achievement of computational literature” while dig more broadly
                     and deeply into how specific poems work to better appreciate the collection's
                     contribution to the field of digital poetry. In “Poetry as Code
                     as Interactive Fiction: Engaging Multiple Text-Based Literacies in <cite class="title italic">Scarlet Portrait Parlor</cite>”, Jason Boyd examples how
                     various text-based literacies (procedural, poetic, ludic) can, when used together,
                     elucidate the meanings of an Inform7-programmed interactive fiction in the form of
                     a
                     sonnet. This examination suggests how critical code studies may engage in more
                     nuanced discussions of natural language programming.</div>
                  
                  <div class="counter"><a href="#p23">23</a></div>
                  <div class="ptext" id="p23">Second, this issue contains new directions in critical code studies, pursuing areas
                     such as machine learning software and the limits of code, non-code, and “nonsense code”. In “How to Do Things with
                     Deep Learning Code”, Minh Hua and Rita Raley consider the feasibility and
                     critical potential of CCS as a method when the object of study is deep learning code.
                     Calling for a “critical urgent” need for basic
                     understanding of the composition and functioning of large language models, they
                     extract a representational map of OpenAI’s GPT-2 which they then verify through case
                     studies of two popular GPT-2 applications: the text adventure game, <cite class="title italic">AI Dungeon</cite>, and the language art project, <cite class="title italic">This Word Does Not Exist</cite>. In “Tracing
                     ‘Toxicity’ Through Code: Towards a Method of Explainability and
                     Interpretability in Software”, David M. Berry examines how we can use
                     concepts of explainability and interpretability drawn from computer science in
                     critical code studies. By examining a set of code artifacts the paper looks at how
                     following conceptual traces in concrete source code layers can contribute to
                     understanding and explaining them. In “Nonsense Code: A
                     Nonmaterial Performance”, Barry Rountree and William Condee analyze three
                     case studies in which a literal reading of each program’s code is effectively
                     nonsense, however, the programs generate meaning in performance. Using the framework
                     of nonmaterial performance (NMP) and its four tenets (code “abstracts”,
                     “performs”, “acts within a network”, and “is vibrant”), they
                     consider the 1950s Univac 1 “Happy Birthday”, the
                     Firestarter processor stress test, and the Platypus family of side-channel attacks
                     to
                     decenter text from its privileged position and to recenter code as a performance.</div>
                  
                  <div class="counter"><a href="#p24">24</a></div>
                  <div class="ptext" id="p24">Finally, we offer reflections on code, language, and linguistics, in particular both
                     esoteric and indigenous programming languages. In “ᐊᒐᐦᑭᐯᐦᐃᑲᓇ
                     ᒫᒥᑐᓀᔨᐦᐃᒋᑲᓂᐦᑳᓂᕽ | acahkipehikana mâmitoneyihicikanihkânihk | Programming with Cree#
                     and Ancestral Code: Nehiyawewin Spirit Markings in an Artificial Brain”,
                     Jon Corbett discusses his project “Ancestral Code”, which
                     consists of an integrated development environment (IDE) and the Nehiyaw (Plains Cree)
                     based programming languages called Cree# (pronounced: Cree-Sharp) and ᐊᒋᒧ (âcimow).
                     These languages developed in response to western perspectives on human-computer
                     relationships, which Corbett challenges and reframes in Nehiyaw/Indigenous contexts.
                     In “The Less Humble Programmer”, Daniel Temkin explores
                     the aesthetics of how esoteric programming languages (esolangs) break from the norms
                     of language design by explicitly refusing practicality and clarity. Through examples
                     that make code disordered (e.g. Malboge) or even impossible to write (e.g.
                     Unnecessary), esolangs may challenge or reaffirm wider ideas in programming culture
                     and in how computer science is taught: specifically the sometimes-contradictory
                     aesthetics of Humbleness and Computational Idealism.</div>
                  
                  </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Acknowledgments</h1>
                  
                  <div class="counter"><a href="#p25">25</a></div>
                  <div class="ptext" id="p25">We are grateful to our tireless authors, reviewers, and editors, as well as to <cite class="title italic">Digital Humanities Quarterly</cite> for their support of critical
                     code studies through these special issues. We are excited to see what they
                     inspire!</div>
                  </div>
               
               
               
               
               </div>
            
            <div id="worksCited">
               <h2>Works Cited</h2>
               <div class="bibl"><span class="ref" id="benjamin2019"><!-- close -->Benjamin 2019</span>  Benjamin, Ruha. <cite class="title italic">Race After Technology: Abolitionist Tools for the New Jim Code</cite>. 1st
                  edition, Polity, 2019. </div>
               <div class="bibl"><span class="ref" id="berry2011"><!-- close -->Berry 2011</span>  Berry, David M. (David Michael). <cite class="title italic">The Philosophy of Software: Code and Mediation in The Digital
                     Age</cite>. Palgrave Macmillan, 2011. </div>
               <div class="bibl"><span class="ref" id="binder2022"><!-- close -->Binder 2022</span>  Binder, Jeffrey M. <cite class="title italic">Language and the Rise of the Algorithm</cite>. First edition, University of
                  Chicago Press, 2022. </div>
               <div class="bibl"><span class="ref" id="blackwell2022"><!-- close -->Blackwell 2022</span>  Blackwell, Alan F., et al. <cite class="title italic">Live Coding: A User’s Manual</cite>. The MIT Press, 2022. </div>
               <div class="bibl"><span class="ref" id="bogost_montfort2006"><!-- close -->Bogost and Montfort 2006</span> Bogost, Ian and Nick
                  Montfort. Platform Studies website. 2006. <span class="error"><a href="#http://platformstudies.com/">http://platformstudies.com/</a></span>.</div>
               <div class="bibl"><span class="ref" id="brock2019"><!-- close -->Brock 2019</span>  Brock, Kevin. <cite class="title italic">Rhetorical Code Studies: Discovering Arguments in and around Code</cite>.
                  University of Michigan Press, 2019. </div>
               <div class="bibl"><span class="ref" id="brown2015"><!-- close -->Brown 2015</span>  Brown, James J., Jr. <cite class="title italic">Ethical Programs: Hospitality and the Rhetorics of Software</cite>. U OF M Digt
                  Cult Books, 2015. </div>
               <div class="bibl"><span class="ref" id="cox2013"><!-- close -->Cox and McLean 2013</span>  Cox, Geoff, and Alex McLean. <cite class="title italic">Speaking Code: Coding as Aesthetic and Political Expression</cite>.
                  The MIT Press, 2013. </div>
               <div class="bibl"><span class="ref" id="croll2014"><!-- close -->Croll 2014</span>  Croll, Angus. <cite class="title italic">If
                     Hemingway Wrote JavaScript</cite>. No Starch Press, 2014. </div>
               <div class="bibl"><span class="ref" id="erwig2017"><!-- close -->Erwig 2017</span>  Erwig, Martin. <cite class="title italic">Once
                     Upon an Algorithm: How Stories Explain Computing</cite>. The MIT Press, 2017. </div>
               <div class="bibl"><span class="ref" id="fitzpatrick2011"><!-- close -->Fitzpatrick 2011</span> Fitzpatrick, Kathleen. “The Humanities, Done Digitally.”
                  <cite class="title italic">The Atlantic</cite>, May 8, 2011. <a href="https://archive.ph/FNyko" onclick="window.open('https://archive.ph/FNyko'); return false" class="ref">https://archive.ph/FNyko</a>.</div>
               <div class="bibl"><span class="ref" id="ford2019"><!-- close -->Ford 2019</span>  Ford, Clyde W. <cite class="title italic">Think
                     Black: A Memoir</cite>. Amistad, 2019. </div>
               <div class="bibl"><span class="ref" id="hicks2017"><!-- close -->Hicks 2017</span>  Hicks, Marie. <cite class="title italic">Programmed Inequality: How Britain Discarded Women Technologists and Lost Its
                     Edge in Computing</cite>. 1st edition, The MIT Press, 2017. </div>
               <div class="bibl"><span class="ref" id="levin2021"><!-- close -->Levin and Brain 2021</span>  Levin, Golan, and Tega Brain.
                  <cite class="title italic">Code as Creative Medium: A Handbook for Computational Art and
                     Design</cite>. Annotated edition, The MIT Press, 2021. </div>
               <div class="bibl"><span class="ref" id="marino2006"><!-- close -->Marino 2006</span>  Marino, Mark C. “Critical Code Studies”. <cite class="title italic">Electronic Book
                     Review</cite>, vol. electropoetics, Winter 2006, <a href="http://www.electronicbookreview.com/thread/electropoetics/codology" onclick="window.open('http://www.electronicbookreview.com/thread/electropoetics/codology'); return false" class="ref">http://www.electronicbookreview.com/thread/electropoetics/codology</a>. </div>
               <div class="bibl"><span class="ref" id="marino2013"><!-- close -->Marino 2013</span>  Marino, Mark C. <cite class="title italic">Code
                     as Ritualized Poetry: The Tactics of the Transborder Immigrant Tool</cite>. <span class="hi italic">Digital Humanities Quarterly</span>, no. 1, 2013. <a href="http://www.digitalhumanities.org/dhq/vol/7/1/000157/000157.html" onclick="window.open('http://www.digitalhumanities.org/dhq/vol/7/1/000157/000157.html'); return false" class="ref">http://www.digitalhumanities.org/dhq/vol/7/1/000157/000157.html</a>. </div>
               <div class="bibl"><span class="ref" id="marino2016"><!-- close -->Marino 2016</span>  Marino, Mark C. “Why
                  We Must Read the Code: The Science Wars, Episode IV”. In <cite class="title italic">Debates in the Digital Humanities</cite>, edited by Matthew K. Gold
                  and Lauren F. Klein, vol. 2, U of Minnesota Press, 2016, <a href="http://dhdebates.gc.cuny.edu/debates/text/64" onclick="window.open('http://dhdebates.gc.cuny.edu/debates/text/64'); return false" class="ref">http://dhdebates.gc.cuny.edu/debates/text/64</a>. </div>
               <div class="bibl"><span class="ref" id="marino2018"><!-- close -->Marino 2018</span>  Marino, Mark C. “Reading Culture through Code”. In <cite class="title italic">Routledge Companion
                     to Media Studies and Digital Humanities</cite>, edited by Jentery Sayers,
                  Routledge, 2018, pp. 472–82. <a href="https://hcommons.org/deposits/item/hc:19537/" onclick="window.open('https://hcommons.org/deposits/item/hc:19537/'); return false" class="ref">https://hcommons.org/deposits/item/hc:19537/</a>. </div>
               <div class="bibl"><span class="ref" id="marino2020"><!-- close -->Marino 2020</span>  Marino, Mark C. <cite class="title italic">Critical Code Studies</cite>. The MIT Press, 2020. </div>
               <div class="bibl"><span class="ref" id="montfort2016"><!-- close -->Montfort 2016</span>  Montfort, Nick. <cite class="title italic">Exploratory Programming for the Arts and Humanities</cite>. 1 edition, The MIT
                  Press, 2016. </div>
               <div class="bibl"><span class="ref" id="montfortstrickland2013"><!-- close -->Montfort and Strickland 2013</span>  Montfort,
                  Nick, and Stephanie Strickland. “Cut to Fit the Tool-Spun
                  Course”. <cite class="title italic">Digital Humanities Quarterly</cite>, vol. 7,
                  no. 1, 2013, <a href="http://www.digitalhumanities.org/dhq/vol/7/1/000149/000149.html" onclick="window.open('http://www.digitalhumanities.org/dhq/vol/7/1/000149/000149.html'); return false" class="ref">http://www.digitalhumanities.org/dhq/vol/7/1/000149/000149.html</a>. </div>
               <div class="bibl"><span class="ref" id="montfort_etal2013"><!-- close -->Montfort et al. 2013</span>  Montfort, Nick, et al.
                  <cite class="title italic">10 PRINT CHR$(205.5+RND(1)); : GOTO 10</cite>. The MIT
                  Press, 2013. </div>
               <div class="bibl"><span class="ref" id="mullaney2021"><!-- close -->Mullaney et al. 2021</span>  Mullaney, Thomas S., et al.,
                  editors. <cite class="title italic">Your Computer Is on Fire</cite>. MIT Press, 2021, <a href="https://doi.org/10.7551/mitpress/10993.001.0001" onclick="window.open('https://doi.org/10.7551/mitpress/10993.001.0001'); return false" class="ref">https://doi.org/10.7551/mitpress/10993.001.0001</a>. </div>
               <div class="bibl"><span class="ref" id="noble2018"><!-- close -->Noble 2018</span>  Noble, Safiya Umoja. <cite class="title italic">Algorithms of Oppression: How Search Engines Reinforce Racism</cite>.
                  Illustrated edition, NYU Press, 2018. </div>
               <div class="bibl"><span class="ref" id="pmla2006"><!-- close -->PMLA 2006</span> 
                  “Program of the 2006 Convention”. <cite class="title italic">PMLA</cite>, vol. 121, no. 6, 2006, pp. 1801–2000. </div>
               <div class="bibl"><span class="ref" id="pressman2015"><!-- close -->Pressman et al. 2015</span>  Pressman, Jessica, et al.
                  <cite class="title italic">Reading Project: A Collaborative Analysis of William
                     Poundstone’s Project for Tachistoscope {Bottomless Pit}</cite>. 1 edition,
                  University Of Iowa Press, 2015. </div>
               <div class="bibl"><span class="ref" id="salter2022"><!-- close -->Salter and Sullivan 2022</span>  Salter, Anastasia, and Anne
                  Sullivan. “Week 2: Of Textiles and Technology - Discussion
                  Starter”. <cite class="title italic">2022 CCS Working Group</cite>, 29 Jan.
                  2022, <a href="https://wg.criticalcodestudies.com/index.php?p=/discussion/113/week-2-of-textiles-and-technology-discussion-starter" onclick="window.open('https://wg.criticalcodestudies.com/index.php?p=/discussion/113/week-2-of-textiles-and-technology-discussion-starter'); return false" class="ref">https://wg.criticalcodestudies.com/index.php?p=/discussion/113/week-2-of-textiles-and-technology-discussion-starter</a>. </div>
               <div class="bibl"><span class="ref" id="shiffman2012"><!-- close -->Shiffman 2012</span>  Shiffman, Daniel. <cite class="title italic">The Nature of Code: Simulating Natural Systems with
                     Processing</cite>. 1st edition, The Nature of Code, 2012. </div>
               <div class="bibl"><span class="ref" id="soon2021"><!-- close -->Soon and Cox 2021</span>  Soon, Winnie, and Geoff Cox. <cite class="title italic">Aesthetic Programming: A Handbook of Software Studies</cite>. Open
                  Humanities Press, 2021. </div>
               <div class="bibl"><span class="ref" id="vee2017"><!-- close -->Vee 2017</span>  Vee, Annette. <cite class="title italic">Coding
                     Literacy: How Computer Programming Is Changing Writing</cite>. The MIT Press,
                  2017. </div>
               <div class="bibl"><span class="ref" id="cardenas2022"><!-- close -->cárdenas 2022</span>  cárdenas, micha. <cite class="title italic">Poetic Operations: Trans of Color Art in Digital Media</cite>. Duke University
                  Press Books, 2022. </div>
            </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            <div class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/">Creative Commons Attribution-NoDerivatives 4.0 International License</a>.
               </div>
         </div>
      </div>
   </body>
</html>