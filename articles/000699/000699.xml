<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?>
<?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dhq="http://www.digitalhumanities.org/ns/dhq">
	<teiHeader>
		<fileDesc>
			<titleStmt>
				<!-- Author should supply the title and personal information-->
				<title type="article" xml:lang="en">ᐊᒐᐦᑭᐯᐦᐃᑲᓇ ᒫᒥᑐᓀᔨᐦᐃᒋᑲᓂᐦᑳᓂᕽ | acahkipehikana
					mâmitoneyihicikanihkânihk | Programming with Cree# and <title rend="none"
						>Ancestral Code</title>: Nehiyawewin Spirit Markings in an Artificial
					Brain<!-- article title in English --></title>
				<!-- Add a <title> with appropriate @xml:lang for articles in languages other than English -->
				<dhq:authorInfo>
					<!-- Include a separate <dhq:authorInfo> element for each author -->
					<dhq:author_name>Jon <dhq:family>Corbett</dhq:family></dhq:author_name>
					<idno type="ORCID">https://orcid.org/0000-0002-3721-1640</idno>
					<dhq:affiliation/>
					<email>joncorbett@live.ca</email>
					<dhq:bio>
						<p/>
					</dhq:bio>
				</dhq:authorInfo>
			</titleStmt>
			<publicationStmt>
				<publisher>Alliance of Digital Humanities Organizations</publisher>
				<publisher>Association for Computers and the Humanities</publisher>
				<!-- This information will be completed at publication -->
				<idno type="DHQarticle-id">000699</idno>
				<idno type="volume"
					><!-- volume number, with leading zeroes as needed to make 3 digits: e.g. 006 --></idno>
				<idno type="issue"><!-- issue number, without leading zeroes: e.g. 2 --></idno>
				<date/>
				<dhq:articleType>article</dhq:articleType>
				<availability status="CC-BY-ND">
					<!-- If using a different license from the default, choose one of the following:
                  CC-BY-ND (DHQ default): <cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>     
                  CC-BY:  <cc:License rdf:about="https://creativecommons.org/licenses/by/2.5/"/>
                  CC0: <cc:License rdf:about="https://creativecommons.org/publicdomain/zero/1.0/"/>
-->
					<cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>
				</availability>
			</publicationStmt>

			<sourceDesc>
				<p>This is the source</p>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<classDecl>
				<taxonomy xml:id="dhq_keywords">
					<bibl>DHQ classification scheme; full list available at <ref
							target="http://www.digitalhumanities.org/dhq/taxonomy.xml"
							>http://www.digitalhumanities.org/dhq/taxonomy.xml</ref></bibl>
				</taxonomy>
				<taxonomy xml:id="authorial_keywords">
					<bibl>Keywords supplied by author; no controlled vocabulary</bibl>
				</taxonomy>
				<taxonomy xml:id="project_keywords">
					<bibl>DHQ project registry; full list available at <ref
							target="http://www.digitalhumanities.org/dhq/projects.xml"
							>http://www.digitalhumanities.org/dhq/projects.xml</ref></bibl>
				</taxonomy>
			</classDecl>
		</encodingDesc>
		<profileDesc>
			<langUsage>
				<language ident="en" extent="original"/>
				<!-- add <language> with appropriate @ident for any additional languages -->
			</langUsage>
			<textClass>
				<keywords scheme="#dhq_keywords">
					<!-- Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors -->
					<list type="simple">
						<item/>
					</list>
				</keywords>
				<keywords scheme="#authorial_keywords">
					<!-- Authors may include one or more keywords of their choice -->
					<list type="simple">
						<item>storytelling</item>
						<item>Indigenous culture</item>
						<item>Indigenous language</item>
						<item>nehiyawewin</item>
						<item><title rend="none">Ancestral Code</title></item>
					</list>
				</keywords>
				<keywords scheme="#project_keywords">
					<list type="simple">
						<item/>
					</list>
				</keywords>
			</textClass>
		</profileDesc>
		<revisionDesc>
			<!-- Replace "XXXXXX" in the @target of ref below with the appropriate DHQarticle-id value. -->
			<change>The version history for this file can be found on <ref
					target="https://github.com/Digital-Humanities-Quarterly/dhq-journal/commits/master/articles/000699/000699.xml"
					>GitHub </ref></change>
		</revisionDesc>
	</teiHeader>
	<!-- If a translation is added to the original article, add an enclosing <text> and <group> element -->
	<text xml:lang="en" type="original">
		<front>
			<dhq:abstract>
				<!-- Include a brief abstract of the article -->
				<!-- Editor's note: this article includes terms encoded according to ISO 639-3 standards.
				Words in the language described by the author as Nehiyaw are encoded as the individual
				language "Plains Cree" (crk) under the	macrolanguage standard of "Cree" (cre). -->
				<p>In this article, I discuss my project <title rend="quotes">Ancestral
					Code</title>, which consists of an <term>integrated development
						environment</term> (IDE) and the Nehiyaw (Plains Cree) based programming
					languages called ‘Cree#’ (pronounced: Cree-Sharp) and ‘ᐊᒋᒧ’ (<foreign
						xml:lang="crk">âcimow</foreign>). These languages developed in response to
					western perspectives on human-computer relationships, which I challenge and
					reframe in Nehiyaw/Indigenous contexts. </p>
			</dhq:abstract>
			<dhq:teaser>
				<!-- Include a brief teaser, no more than a phrase or a single sentence -->
				<p/>
			</dhq:teaser>
		</front>
		<body>
			<div>
				<head>Introduction</head>
				<p><foreign xml:lang="crk"><term>Nohkompan,</term></foreign><note><foreign
							xml:lang="crk"><term>Nohkompan</term></foreign> – grandmother who is
						passed on</note> my paternal grandmother, was Nehiyaw (Cree) and Saulteaux
					(Chippewa). After her passing and understanding the matriarchal nature of many
					Cree peoples, I found myself looking at the Nehiyaw culture of her mother,
						<foreign xml:lang="crk"><term>Nitâpân</term></foreign>,<note><foreign
							xml:lang="crk"><term>Nitâpân</term></foreign> – great-grandmother</note>
					for inspiration for my creative works. In 2014, I attempted to use <foreign
						xml:lang="crk">Nehiyawewin</foreign> (the Cree language) words as variables
					using the Unified Canadian Aboriginal Syllabics (Unicode, Inc. 2021). My early
					attempts were instantly problematic because the development environments (IDEs)
					I used would render the syllabics, like ‹ᑖ›, as empty boxes ‹⌧›. So I searched
					for other solutions. However, at that time, the platforms I was most familiar
					with, such as Processing, openFrameworks, Java, and C#, all shared this same
						<q>problem</q>. This experience sparked my desire to bring Nehiyawewin, in
					its syllabic form, into being as a programming language. In this article, I
					present the physical and abstract challenges of developing my <title rend="none"
						>Ancestral Code</title> digital toolkit that allows a programmer to insert
					code blocks into transcribed Indigenous stories that, once executed, produce a
					generative visual narrative of the transcribed story. But fo<hi>r you
						</hi><hi>to better understand this desire’s importance, it is customary in
						my heritage to first introduce myself.</hi></p>
				<p><hi>I identify as Nehiyaw-Métis and belong to the Métis Nation of Alberta. The
						Métis in Canada are federally recognized as one of the three Indigenous
						groups of peoples, the other two being First Nations and Inuit. The Métis
						have been historically referred to as half-bloods or, more derogatorily,
						half-breeds. We are a people that came to be from the blending of cultures
						and traditions of the first European visitors with the numerous Indigenous
						peoples of the <q>new world.</q> Many of these first visitors were not men
						seeking to settle; they were merely coming to seek a better living as fur
						traders. They were nomadic and travelled extensively, with many intending to
						return to their respective homelands when they retired. </hi></p>
				<p><hi>Nevertheless, these traders married into First Nation and Inuit tribal
						communities, often for financially strategic reasons.
						<!-- Original text: My 5x
						Great-Grandfather --> My Great-Grandfather five times over was a
						historically notable English fur trader named John Sayer and was one of
						these first visitors. These early relationships between European visitors
						and Indigenous peoples continued through generations, with subsequent
						mixed-racial generations raised with a blend of European knowledge and their
						original Indigenous languages and traditions. This concrescence of cultures
						and languages is how the Métis developed into a unique culture that
						privileges the cultural teachings of their respective Indigenous heritages
						without entirely rejecting their European roots. </hi></p>
				<p><hi>My research as a Métis scholar and digital media artist has since evolved
						from using computers and programming as </hi><emph>tools</emph><hi> to
						generate my artwork </hi><hi>to viewing computers as </hi><emph>animate
						creatures</emph><hi>, digital representations of my Indigenous heritage.
						Subsequently, </hi><hi>I see computer languages as digital extensions of
						Nehiyaw storywork and ceremonies that reflect the epistemological,
						ontological, and axiological concerns of my Nehiyaw beliefs and practices.
						</hi><hi>My perspectives on computer programming critique the prevalent use
						of English in coding languages and the reflection of settler/colonial
						perspectives in their design. Though I recognize that computer programming
						languages, like most technologies, are constantly evolving and changing, I
						maintain that they are also seemingly immutable and typically manifest from
						a <cit><quote rend="inline">historically-essential … colonial
								impulse</quote><ptr target="#ali2014"/></cit>. Most notably, the
						culture(s) from which modern programming languages and practices grow
								<cit><quote rend="inline">[come] with significant cultural
								baggage</quote><ptr target="#heaven2013"/></cit>. Through my own
						visual media art explorations with the popular new-media-art programming
						development environment </hi><title rend="quotes">Processing</title><hi>, I
						recognized significant challenges </hi><hi>to</hi><hi> programming in
						anything other than English. </hi></p>
				<p><hi>The detrimental legacy of colonial practices on the lives of Indigenous
						people is well documented, from forced displacement from traditional
						homelands to attempted erasure of culture, language, and practices <ptr
							target="#gca1857"/>
						<ptr target="#venne1981"/>
						<ptr target="#milloy2008"/>
						<ptr target="#milloy2017"/>. </hi><hi>As citizens of a globally connected
						techno-culture, we perpetuate this erasure by embracing a
						</hi><hi>technicism that incorporates a blind acceptance of technologies and
						the cultural systems from which they are derived as necessary to engage with
						one another in our digital lives. Yet, critical theories of technologies are
						continually demonstrating that digital technologies are neither <cit><quote
								rend="inline">socially or culturally neutral</quote><ptr
								target="#garneau2018"/></cit> nor are they <cit><quote rend="inline"
								>determinist, but rather [sites] of social struggle</quote><ptr
								target="#warschauer1998"/></cit>. Despite this technicism,
						navigating the modern technology ecosystem remains vital to Indigenous
						peoples, who actively utilize these new computing domains for <cit><quote
								rend="inline">survivance</quote><ptr target="#vizenor2008"/></cit>
						and (re)establish both individual and community identities from these
						technological relationships and their ancestral cultures <ptr
							target="#ormondparker_etal2013"/>.</hi></p>
				<p><hi>By viewing computing through a lens of my Indigenous heritage, my perceptions
						of computer languages and programming have been dramatically altered. My
						awareness of programming contexts informed by Nehiyaw language and cultural
						practices has opened new understandings of how programming languages can
						facilitate a greater sense of personal and digital identity and cultural
						belonging that go far beyond the purely functional operations of
						programming. These experiences are at the heart of what has become my <title
							rend="none">Ancestral Code</title> project.</hi></p>
				<p><hi><title rend="none">Ancestral Code</title> is a wholistic programming
						environment built upon my own Indigenous computing design theory. It
						consists of both hardware, in the form of a specialized keyboard for typing
						Nehiyawewin syllabics, and software in the forms of a programming IDE and a
						multi-form programming language. The programming language component of
							<title rend="none">Ancestral Code</title> that is the focus of this
						article aims explicitly to integrate a <cit><quote rend="inline"
								>wholistic</quote><ptr target="#absolon2010"/></cit> braiding of
						Nehiyaw language and cultural practices within its design. I use
							<term>wholistic</term> here instead of holistic because Indigenous
						learning interconnects all aspects of being that include mind, body,
						emotion, and spirit and is not merely referring to a <q>whole</q> as a sum
						of parts. In particular, <title rend="none">Ancestral Code</title> is my
						vision of how Nehiyaw culture and language can be utilized as a primary
						interface for computer programming and computing design, uniting the
						values/benefits of Nehiyaw perspectives with western programming practices.
						To begin this journey, I will first provide a brief background of what I
						frame as an Indigenous computing design theory, describing the importance of
						this framework when approaching technology and computing design development
						with an Indigenous focus. Next, I describe how this design influences a
						unique perspective that views <q>Code as Story.</q> And then, I delve into
						the challenges (and related solutions) to my ongoing efforts to bring the
							<title rend="none">Ancestral Code</title> platform for programming in
						Nehiyawewin to Nehiyaw communities. I hope this platform can open new
						opportunities for heritage language use in our modern technological context
						and further foster Indigenous cultural maintenance. Finally, I surmise and
						summarize how this work can be used or reproduced by other Indigenous
						cultures with similar cultural perspectives and language
					construction.</hi></p>
				<div>
					<head>Indigenous Wholistic Computing Design Theory</head>
					<p><hi>Computing system design theories continue to evolve and have been
							described by or compared </hi><hi>to</hi><hi> a wide range of systems
							such as mechanical <ptr target="#worden_etal2011"/>, biological <ptr
								target="#babaoglu_etal2006"/>
							<ptr target="#benenson2012"/>, and hierarchical <ptr
								target="#kleinrock_etal1980"/>
							<ptr target="#abdelbarr2009"/>, to name just a few. Similarly, the past
							decade has also seen increased interest in postcolonial computing and
							colonialism as an influencing or embedded aspect of technological
							architectures <ptr target="#irani_etal2009"/>
							<ptr target="#irani_etal2010"/>
							<ptr target="#merritt_etal2011"/>
							<ptr target="#dourish_etal2012"/>
							<ptr target="#philip_etal2012"/>
							<ptr target="#abdelnournocera_etal2013"/>
							<ptr target="#ali2014"/>. In developing an Indigenous computing theory,
							I consider common concerns from a general pan-Indigenous perspective,
							recognizing that research by Indigenous scholars commonly employs
							cultural practices and knowledge such as ceremony <ptr
								target="#wilson2008"/>
							<ptr target="#cormier_etal2018"/>, wholistic practices <ptr
								target="#absolon2010"/>, honouring of oral knowledges <ptr
								target="#thomas2005"/>, and community engagement <ptr
								target="#madden_etal2013"/>. </hi></p>
					<p><hi>From these general characteristics I also used Nehiyaw-specific knowledge
							to help shape my own approach of establishing an Indigenous computing
							framework. The English term <term>Cree</term> is an anglicized form of
							the French word </hi><foreign xml:lang="fr">cri</foreign><hi> meaning to
							shout or cry aloud, and is how early European settlers came to name the
							Cree/Nehiyaw people. However, I do not refer to myself as Cree-Métis. I
							am Nehiyaw-Métis. <foreign xml:lang="crk">Nehiyaw</foreign>, in my
							heritage language, translates as <q>four-bodied</q> or
								<q>four-spirit</q> people. We see ourselves as a people composed of
							four <q>bodies</q>: the physical, mental, emotional, and spirit.
							Therefore, specific to Nehiyaw culture, I use spiritual teachings of the
								<q>four-bodies</q> framework to inform, describe, and highlight the
							aspects of computing that are inherently Nehiyaw and reflect Nehiyaw
							understandings and knowledge development. </hi></p>
					<p><hi>Furthermore, each of these bodies has numerous cultural teachings that
							exist as living (oral) histories highlighting the cultural significance
							of their meanings and relationships between humans and the world. In
							other words, </hi><title rend="italic"><foreign xml:lang="crk"
								>kinehiyâwiwininaw nehiyawewin</foreign> / The Cree Language is our
							Identity</title>
						<ptr target="#wolfart_etal1993" loc="title"/>. <hi>The Cree language,
								<foreign xml:lang="crk">Nehiyawewin</foreign>, is an intricately
							woven fabric that unites our life, being, and identity, across
							generations of knowledge and embodies spiritual and sacred knowledge
							that spans thousands of years. Because Nehiyaw language is so integral
							to Nehiyaw life, understanding user-computer relationships in a Nehiyaw
							context requires redefining philosophical understandings of computer
							system design using Nehiyaw terms. </hi><hi>Therefore, using Nehiyawewin
							in my theoretical designs serves as a ceremonial healing practice in
							addition to its functional role of creating computational instructions.
							</hi><hi>I find these considerations crucial to the design of computing
							technologies for Nehiyaw people as they re-envision the computer as a
							member of the community and an extension of one’s cultural
							identity.</hi></p>
					<p><hi>Therefore, placing culture as the driving force behind the development of
							an <term>Indigenous Wholistic Computing Design Theory</term> can, and
							will, often be at odds with western philosophies on computer function
							and design. For instance, cultural attitudes towards concepts of time,
							order/sequencing, and efficiency can be radically different from their
							computational definitions. For example, I wrote a program to
							digitally-bead portraits of my family. The first version of this program
							used a basic loop to place pixel-beads on the screen in a sequence of
							rows, which it did in a left-to-right fashion. From a computational
							perspective, this loop was simple and efficient. However, the original
							computational instructions did not reflect my physical action of beading
							if I were to bead this image by hand. Nor did it capture the cultural
							significance of the continuous thread that connects each bead. There is
							a special meaning in the unbroken thread. As a result, I reformatted my
							code to reflect my Métis beading practice. The new code created
							alternating rows of digital beadwork that progress from left-to-right,
							then right-to-left in a continuous unbroken stream. This updated code
							better represents my physical process instead of code that created
							patterns that flowed in one direction, from left-to-right, as multiple
							individual lines instead of a continuous loop. The <emph>best</emph> or
								<emph>most efficient</emph> code fractures the image’s construction,
							resulting in digitally rendered images conforming to the technological
							tools’ design and language, favouring efficiency over cultural
							focus.</hi></p>
					<p><hi>Experiences such as these altered my perspectives on general computing
							design theories and stimulated my desire to investigate computing design
							from Indigenous wholistic perspectives. Shifting the source of computing
							design from one driven by systemic operations to one that is human and
							cultural requires a certain degree of re-prioritization. I opted to
							expand existing system design theories by creating an <term>Indigenous
								Wholistic Computing Design Theory</term>. By identifying and
							privileging Indigenous and Nehiyaw-specific perspectives within existing
							computational environments, I aim to reevaluate what aspects of
							computing design are favoured over others. </hi></p>
					<p><hi>In more concrete terms, systems design processes are vital because they
							create a clear overview intended to guide the actual development of a
							given product, whether it is hardware or software. In an Indigenously
							informed design process, this overview is still as essential but follows
							principles that promote [Indigenous] community collaboration and
							engagement over the tools and technologies that will be used; emphasizes
							interrelationships between components by establishing connections
							between Indigenous lived experience and the involved digital artifacts
							and their behaviours; and is open and flexible, or even unconcerned,
							with time and timelines in solution development. In such a theoretical
							framework western principles like Gestalt grouping or Fitt’s Law may not
							be applicable because the effects of cultural knowledge on a design may
							alter how components are typically created, or how they behave and
							interact with one another in comparison to systems focused directly at
							efficiency concerns like those found in data categorization, code flow,
							and execution and processing times.</hi></p>
				</div>
				<div>
					<head>Indigenous Story as Code</head>
					<p><hi>What is coding if not a story? At a basic level, a story consists of five
							essential components: character(s), setting, plot, conflict, and
							resolution. Scholar Annette Vee, known for her study of composition and
							rhetoric in computer programming literacy, compares narrative writing
							with computer programming stating that they <cit><quote rend="inline"
									>are not the same thing [but] have a lot in common and can even
									merge into each other</quote><ptr target="#vee2017" loc="p. 95"
								/></cit>. The relationship between story and code is particularly
							evident in esoteric computer languages such as </hi><title rend="quotes"
							>Inform 7</title>
						<ptr target="#aikin2009"/><hi> and </hi><title rend="quotes"
							>Shakespeare</title>
						<ptr target="#hasselstrom_etal2001"/><hi>, where code is literally formatted
							as stories. Moreover, I argue that <q>normal</q> programming languages
							like C/C++, C#, and Java also share storytelling’s main elements despite
							their visual structure, notation, syntax, and semantic constructions. In
								<q>normal</q> programming languages, these story elements exist in
							more abstract contexts where variables represent the <q>characters</q>,
							the <q>setting</q> is the programming environment, and the <q>plot</q>
							is the program’s function as it operates up until its <q>resolution</q>
							or termination. I first learned how to program in elementary school in
							1979 using Applesoft BASIC. My teacher explained BASIC’s syntax using
							story examples. I was so enthralled with the idea of being able to
							represent the world around me using computer code that I started writing
							my journal entries in language arts class as BASIC code. For me, coding
							is very much a form of storytelling.</hi></p>
					<p>In creating the <title rend="none">Ancestral Code</title> programming
						languages <title rend="quotes">Cree#</title> and <title rend="quotes"
							>ᐊᒋᒧ</title> (<foreign xml:lang="crk">âcimow</foreign>)<note>ᐊᒋᒧ
								<foreign xml:lang="crk">âcimow</foreign> – story</note><hi>, my
							vision arrived as a genuine dream. In this dream, I was sitting in a
							community lodge (i.e., tipi), listening to an Elder tell a story. In
							this story, an image of </hi><foreign xml:lang="crk"
							>Wîsahkecâhk</foreign><hi>, sometimes known as the </hi><q>Trickster
							Raven</q><hi> in Nehiyaw cultural teachings, was animated on the wall
							behind him. <foreign xml:lang="crk">Wîsahkecâhk</foreign> was puppeted
							through the Elder’s words, while a syllabic subtitled transcription of
							the story ran beneath the imagery. This dream revealed a path for me. It
							led me to understand that this generative virtual landscape was a
							relationship between Nehiyawewin and the computer, and though this
							landscape was digital, it was still a <q>place.</q> And here, in this
							place, I experienced my Ancestral Code project as each of the four
							</hi><q>spirits</q>:<hi> The physical experience of seeing and being
							present; the mental experience of processing and parsing the story; the
							emotional experience of being attached to an Elder and
							</hi><emph>feeling</emph><hi> the story; and the spiritual experience of
							the dream state itself.</hi></p>
					<p><hi>Furthermore, in my dream, the syllabic transcription was an
							instruction-set that manipulated the vision of <foreign xml:lang="crk"
								>Wîsahkecâhk</foreign>, thereby exposing me to the computing code.
							Thus, though this is a brief origin story of my <title rend="none"
								>Ancestral Code</title> project, I have interpreted the role of the
							four spirits in furthering its creation as a critical component of its
							development. As a result, I have found new ways of applying Nehiyaw
							cultural teachings to my computer coding practice.</hi></p>
				</div>
			</div>
			<div> <!-- RESUME ENCODING HERE -->
				<head>Challenges and Solutions</head>
				<p><hi>Though I expected to encounter obstacles in this project, I did not honestly
						foresee how deep into my coding practice and theory I would be required to
						go to design the <title rend="none">Ancestral Code</title> programming
						language. In this section, I trace out each of the challenges with working
						the Nehiyawewin orthography — including its use in the software and
						hardware, how I incorporated Nehiyaw language structures into the
						programming language, and how I see culture as being crucial to the
						programming languages I developed. </hi></p>
				<div>
					<head>Orthography</head>
					<p><hi>The Nehiyawewin orthography, called </hi><hi>ᐊᒐᐦᑲᓯᓇᐦᐃᑲᓇ</hi><hi> or
							</hi><hi rend="italic">acahkasinahikana</hi><hi>, literally translates
							into English as ‘spirit markers.’ Nehiyawewin also has a Standard Roman
							Orthographic (“SRO”) writing system in which the language can be written
							with the standard Latin alphabet to aid English speakers in
							pronunciation. Though Nehiyawewin learners frequently use SRO, many
							Nehiyaw first language speakers consider SRO an accommodation or
							adoption of western processes. They also feel this system voids much of
							the cultural significance and meaning attached to the </hi><hi
							rend="italic">spirit markers</hi><hi>. Though I prefer to use
							Nehiyawewin spirit markers, most of the Nehiyawewin in this article is
							written in SRO form for easier readability by English readers. I have
							included a glossary at the end of this article with definitions and a
							pronunciation guide using the International Phonetic Alphabet (“IPA”)
							phonetic notation system.</hi></p>
					<p><hi>My original desire to use </hi><hi rend="italic"
							>acahkasinahikana</hi><hi> exclusively in <title rend="none">Ancestral
								Code</title> was a conscious decision to combat the ‘accommodation’
							of English language constructions and representations. However,
							</hi><hi>i</hi><hi>n investigating my needs as a programmer, these
							language-based concerns revealed that support for both SRO and </hi><hi
							rend="italic">acahkasinahikana</hi>
						<hi>are required to support </hi><hi>Nehiyawewin language learners that may
							come from different dialects or communities</hi><hi>. For this reason,
							programming in <title rend="none">Ancestral Code</title> can be
							performed in its Romanized form that I call ‘Cree#’ (pronounced
							</hi><hi>Cr</hi><hi>ee-sharp) or its syllabic form
							‘</hi><hi>ᐋᒋᒧᐤ</hi><hi>’ (</hi><hi rend="italic">âcimow</hi><hi>). The
								<title rend="none">Ancestral Code</title> IDE allows the programmer
							to switch between the two styles, where </hi><hi rend="italic"
							>Cree#</hi><hi> accommodates a certain level of familiar structure to
							the C# programming language, separating it from the more story-like
							narrative structure of </hi><hi>ᐋᒋᒧᐤ </hi><hi>(</hi><hi rend="italic"
							>âcimow</hi><hi>). Switching between these modes provides unique
							alternatives to experiencing written Nehiyawewin, where representing
							code in multiple cultural forms can be done without necessarily
							favouring one over the other. Furthermore, the IDE development aspect
							revealed a couple, albeit minor, concerns, namely: 1) how to use the
							Unified Canadian Aboriginal Syllabics block of the Unicode Standard,
							that is, what font family/typeface to use for coding with syllabics, and
							2) how to address coding without, or with minimal, punctuation and
							numeracy.</hi></p>
					<div>
						<head>Software: acahkasinahikana for coding</head>
						<p><hi>Using Unicode characters in modern programming environments is
								possible if the computing system supports the desired character
								sets. The Unified Canadian Aboriginal Syllabics block of the Unicode
								Standard occupies 640 code positions from 1400</hi><hi
								rend="subscript">hex</hi><hi> to 167F</hi><hi rend="subscript"
								>hex</hi><hi>. It includes orthographic glyphs for Blackfoot,
								Carrier, Cree, Dene, Inuktitut, Ojibwe, and other Canadian
								Athabascan languages. Unfortunately, the coding environment is often
								the main obstacle in using Unicode characters, especially as
								variable names and, more problematically, as keywords or reserved
								words. Typically, this lack of support is simply because the
								environment often uses a pre-installed font that does not contain
								glyph(s) in the desired code points of the font file. By default,
								the coding environments I am familiar with, such as </hi><hi
								rend="italic">Visual Studio</hi><hi> and </hi><hi rend="italic"
								>Processing</hi><hi>, use a fixed-width font/typeface such as
								Consolas, Courier, or Monospace. These fonts are common to Windows
								OS systems but do not have the Canadian Aboriginal Syllabics block
								of glyphs. Until recently, changing this font was not easy.
								Although, as of the writing of this article, the settings or
								preferences support in some IDEs is open to changing the default
								font, some still limit the fonts that can be used. There also are
								limited fonts suitable for programming using the Unicode Canadian
								Aboriginal Syllabics, and I argue there are currently no suitable
								fonts. Though it is theoretically possible to use syllabics as
								variable names in those IDEs, reliance on English programmatic
								tokens remains. The question then becomes, which font(s) can or
								should be used for programming with </hi><hi rend="italic"
								>acahkasinahikana</hi><hi>?</hi></p>
					</div>
					<div>
						<head>Software: acahkasinahikana fonts</head>
						<p><hi>Though this may sound like a trivial topic from a western
								perspective, as it truly has little to do with actual coding and
								more to do with aesthetic preference, my critical reflection on
								coding practice makes this a necessary point of discussion. Remember
								that Nehiyaw </hi><hi rend="italic">acahkasinahikana</hi><hi> are
								visual representations and extensions of being. They are called
								</hi><hi rend="italic">spirit markers</hi><hi> for a reason. So,
								their representation in the computer must be treated with equal
								consideration. </hi></p>
						<p><hi>Most programmers would agree that fixed-width or monospaced typefaces
								are ubiquitous in coding because they align very well in rows and
								columns and generally provide a greater distinction between
								similarly shaped characters like </hi><hi>‹ </hi><hi>0, o, O
								</hi><hi>›,</hi><hi> narrow characters like </hi><hi>‹ </hi><hi>I,
								l, i </hi><hi>›</hi><hi>, as well as providing more space for
								syntactical and operational characters </hi><hi>‹</hi><hi> (, {, [,!
								› (Ardley 2014). Combining this respect for the visual aspects of
								language with the need for a monospaced coding font reveals two
								challenges. The first challenge is that, to my knowledge, only one
								monospaced font purposefully includes the Canadian Aboriginal
								Syllabics blocks, </hi>Everson Mono.<note><p><hi>
										https://www.evertype.com/emono/</hi></p></note><hi> The
								second challenge is that the physical structure of syllabics makes
								using non-fixed-width fonts challenging to navigate as code. The
								visual structure of the major glyphs (i.e., the glyphs representing
								a consonant and vowel pair) consists of reflected orientations of a
								single shape (ex. </hi><hi>‹ </hi><hi>ᒥ ᒣ ᒪ ᒧ</hi><hi>›)</hi><hi>.
								The resulting printed text is fairly consistently sized but is
								visually similar to coding in all English caps. This is not
								necessarily a negative, as my original programs written in BASIC
								were done in all caps. But a more significant point of consideration
								is how a culture perceives the visual design of its language. For
								example, in developing typefaces for Canadian syllabics, Canadian
								typography designer Kevin King worked directly with Indigenous
								communities to ensure their languages were written in the respective
								community’s preferred style. He notes that “to ignore this would
								result in a text that was neither culturally appropriate for local
								readers nor able to convey adequately the meaning and atmosphere of
								the text for that readership” (King 2022). Adding to these, the
								limited number of monospaced fonts that support Canadian syllabic
								glyphs encouraged me to develop a new code-friendly font to address
								these obstacles. This font (Figure 1), I tentatively named ‘AC
								Mono,’ was constructed using my wholistic design framework, and my
								choices in the font design process are consciously aware of
								Indigenous visual aesthetics. I want to note here that my design of
								this font was considered from a more pan-Indigenous perspective and
								not specific to Nehiyaw culture. This is because the Unified
								Canadian Aboriginal Syllabics is not Nehiyaw specific – it
								represents glyphs from various North American Indigenous languages.
								For example, as seen in the syllabic T-series glyphs like ‘tâ’
								</hi><hi>‹ </hi><hi>ᑖ</hi><hi>›</hi><hi> and ‘te’ </hi><hi>‹
								</hi><hi>ᑌ</hi><hi>›</hi><hi>, I used thicker lines, an emphasis on
								fluidity in the curves, and rounded features on the start and end
								points of the strokes. These organic geometries and gestures are
								found in numerous Indigenous art traditions in North America,
								including the ovoid traditions of Coast-Salish artforms, Inuit bone
								and stone carving, and Métis beadwork.</hi></p>
						<figure xml:id="figure01">
							<head>AC Mono Font glyphs for tā <q>ᑖ</q> and te <q>ᑌ</q>.Image by Jon
								Corbett.</head>
							<figDesc>Two glyphs of the AC Mono typeface. Each glyph fills the space
								between the ascender line and the baseline.</figDesc>
							<graphic url="resources/images/figure01.png"/>
						</figure>
						<p><hi>In the construction of AC Mono, I used the typefaces of Everson Mono
								and Consolas only as sizing templates, building my resulting font
								with the stroke weight of Consolas and the mildly rounded stroke end
								of Everson Mono. Of particular note, syllabics have no differing
								case structures. Therefore, no glyphs need to accommodate space for
								descenders that extend below the baseline. The removal of the
								descender area results in a noticeably reduced distance between the
								glyph baseline and the edge of the glyph-space in the AC Mono font
								compared to ASCII/English fonts (Figure 2), allowing for a more
								consistent line height, providing better options for vertical
								spacing between rows when coding. </hi></p>
						<figure xml:id="figure02">
							<head>Font design comparison between Everson Mono, Consolas, and AC
								Mono, the English glyphs selected here are chosen for their visual
								similarity to the Nehiyawewin syllabics, they are not representative
								of English pronunciations or linguistic function.</head>
							<figDesc>A comparison of glyphs (left to right) of the typefaces Everson
								Mono, Consolas, and AC Mono. Each of the three typefaces is shown to
								take up relatively similar vertical and horizontal space along a
								line of text.</figDesc>
							<graphic url="resources/images/figure02.png"/>
						</figure>
					</div>
					<div>
						<head>Software: acahkasinahikana punctuation and numeracy</head>
						<p><hi>A more significant challenge is how to support specific programming
								tasks using limited punctuation and, preferably, an alternative
								numeric symbology. Programming nomenclature and notation have had a
								unique evolution and, as Arawjo notes, have developed “in concert
								and conflict with discretizing infrastructure[s]” (Arawjo 2020).
								Without getting into a long history lesson on programmatic notation,
								I have seen how my own programming practice evolved from coding in
								BASIC, using very little punctuation except the double quote and
								round brackets, to today, where I predominantly use C# and Java
								that, use nearly every non-numeric and non-alpha character on the
								standard keyboard. In today’s programming culture, it is rare to see
								a programming language not use every symbol and character on the
								keyboard. Notation marks that currently have meaning and function in
								many modern programming languages can be problematic when developing
								solutions for Indigenous orthographies that traditionally do not use
								these marks. </hi></p>
						<p><hi>As I mentioned earlier, the only punctuation commonly found in
								Nehiyawewin text is the full stop syllabic that looks like a
								lowercase </hi><hi>‹ </hi><hi>x </hi><hi>›</hi><hi> but is U+166E or
								</hi><hi>‹ </hi><hi>᙮</hi><hi>›</hi><hi>; and the hyphen </hi><hi>‹
								</hi><hi>- </hi><hi>›</hi><hi> most often used to separate certain
								morphemes or break up very long sentence-word constructions when
								reading. My understanding of this lack of punctuation stems from my
								understanding of </hi><hi>Nehiyawewin morpheme structures that
								provide the necessary context and grammatical positioning in its
								word construction, making punctuation usage unnecessary, except to
								indicate the end of thought or discussion (H Christoph Wolfart 1973;
								Okimasis and Wolvengrey 2008).</hi></p>
						<p><hi>Another point of consideration between western culture and Nehiyaw
								culture is numeracy. Much of the world uses the ten symbols of the
								Hindu-Arabic decimal number system to represent numbers. Though
								Nehiyaw numeracy has become pretty much forgotten in favour of
								Hindu-Arabic numerals, Nehiyaw culture did develop a way to
								represent numbers using the syllabic glyphs (Figure 4). Furthermore,
								from a language perspective, Nehiyaw culture has developed certain
								relationships to numbers and numeric meanings that are often
								associated with Nehiyaw ontologies, as exemplified previously in my
								explanation of the meaning of Nehiyaw as the four-bodied people.
							</hi></p>
						<p>Punctuation Symbols:A simple but effective example of a
								<emph>traditional</emph> programming style that would execute a
							print-to-screen command might look like this (Figure 3): <dhq:example
								xml:id="example01">
								<head>Simple "Hello World" program in Perl</head>
								<eg lang="perl">print("hello world");</eg>
							</dhq:example>
						</p>
						<!-- <figure xml:id="figure03">
							<head>Simple "Hello World" program in Perl</head>
							<figDesc>A screenshot of a line of code in Perl which prints the phrase
								"Hello World"</figDesc>
							<graphic url="resources/images/figure03.png"/>
						</figure> -->
						<p><hi>In this example, the parentheses mark the start and end of the
								function contents, and the double quotes mark the entry and exit
								points of the text to render to the screen. </hi></p>
						<p><hi>So how would a programmer make this indication if there are no
								brackets or quotation marks? Another common symbol in modern
								programming languages is the semi-colon </hi><hi>‹ </hi><hi>;
								</hi><hi>›</hi><hi> as an instruction separator or terminator.
								Again, how does a programmer indicate where to terminate an
								instruction without this mark? These orthographic punctuation
								devices have become so commonplace in modern programming that it is
								difficult to envision not having access to them. It is precisely
								these kinds of practices that I have attempted to overcome in
								developing <title rend="none">Ancestral Code</title>. My intent here
								is not a need to use minimal punctuation. Instead, it is a
								resistance to adopting marks and practices that belong to other
								languages. To that end, one of the first steps I took was to
								inventory the Nehiyaw syllabary and functional language glyphs. I
								then established a list of necessary programmatic functions and
								decided on the syllabic symbols for my programming
							language.</hi></p>
						<p><hi>To start this investigation, I started with the most straightforward
								programming language I know — BASIC. I used a variety of dialects of
								BASIC for nearly fifteen years, and upon reflection, it was one of
								the languages that I could use with the least amount of punctuation.
								BASIC also provides a good starting point for just ‘reading’ code as
								if it were a recipe or short story. It also helped me identify the
								bare necessities I felt <title rend="none">Ancestral Code</title>
								required. In the end, I came to the following general determinations
								to make language development easier. These initial determinations
								were primarily based on my Indigenous Computing Design’s resistance
								to western computing reliance on non-alpha characters:</hi></p>
						<list type="unordered">
							<item><hi>The Unified Canadian Aboriginal Syllabics block of the Unicode
									Standard currently contains 640 symbols. However, my dialect of
									Plains Cree only uses 107 syllabics from a total block of 134
									glyphs that </hi><hi rend="italic">could</hi><hi> be used in
									Nehiyaw speech. So the remaining 533 symbols from the syllabary
									became potential candidates to fulfill those programmatic roles
									where western punctuation is usually employed.</hi></item>
							<item><hi><title rend="none">Ancestral Code</title> will be line-driven.
									In other words, the linefeed/carriage return is the primary
									instruction terminator. Using the linefeed, makes parsing of
									instructions easier. </hi></item>
							<item><hi>The full stop symbol ‹ </hi><hi
									style="font-family:Gadugi;font-size:12pt">᙮</hi><hi> › is used
									to terminate </hi><hi rend="bold">and</hi><hi> exit code
									(especially within a loop). Being the only punctuation mark, its
									function and use needed to make sense in the narrative flow of
									the source code. </hi></item>
							<item><hi>Language-based reserved words are used to mark code start and
									end positions instead of braces or other symbols. For example,
									in Visual Basic ‘IF’ and ‘END IF’ mark the start and endpoints
									of a conditional code block; similarly, </hi><hi rend="italic"
									>sipiy</hi><hi> and </hi><hi rend="italic">âniskôsîpiy</hi><hi>
									perform the same roles in <title rend="none">Ancestral
										Code</title>.</hi></item>
							<item><hi>In <title rend="none">Ancestral Code</title>, Nehiyawewin
									syllabic-numerals replace Hindu-Arabic numbers. Hindu-Arabic
									numerals will be allowed, but only in SRO mode, and a built-in
									calculator will convert Hindu-Arabic numbers to their
									appropriate syllabic representations when in syllabic
								mode.</hi></item>
						</list>
						<p><hi>With this software side of the orthography resolved, I looked at the
								next obstacle: how should the user input code?</hi></p>
						<table xml:id="table01">
							<head>Syllabic numeracy - numbers 1 to 100</head>
							<row role="label">
								<cell>Hindu-Arabic Numbers</cell>
								<cell cols="10">Nehiyawewin Syllabic-Numerals</cell>
							</row>
							<row>
								<cell style="text-align: center;">1 - 10</cell>
								<cell style="text-align: center;">l</cell>
								<cell style="text-align: center;">ll</cell>
								<cell style="text-align: center;">ᐅ</cell>
								<cell style="text-align: center;">lᐅ</cell>
								<cell style="text-align: center;">llᐅ</cell>
								<cell style="text-align: center;">ᐅᐊ</cell>
								<cell style="text-align: center;">ᐊ</cell>
								<cell style="text-align: center;">ᐊl</cell>
								<cell style="text-align: center;">ᐊll</cell>
								<cell style="text-align: center;">ᒥ</cell>
							</row>
							<row>
								<cell style="text-align: center;">11 - 20</cell>
								<cell style="text-align: center;">ᒥl</cell>
								<cell style="text-align: center;">ᒥll</cell>
								<cell style="text-align: center;">ᒥᐅ</cell>
								<cell style="text-align: center;">ᒥlᐅ</cell>
								<cell style="text-align: center;">ᒥllᐅ</cell>
								<cell style="text-align: center;">ᒥᐅᐊ</cell>
								<cell style="text-align: center;">ᒥᐊ</cell>
								<cell style="text-align: center;">ᒥᐊl</cell>
								<cell style="text-align: center;">ᒥᐊll</cell>
								<cell style="text-align: center;">ᓀ</cell>
							</row>
							<row>
								<cell style="text-align: center;">21 - 30</cell>
								<cell style="text-align: center;">ᓀl</cell>
								<cell style="text-align: center;">ᓀll</cell>
								<cell style="text-align: center;">ᓀᐅ</cell>
								<cell style="text-align: center;">ᓀlᐅ</cell>
								<cell style="text-align: center;">ᓀllᐅ</cell>
								<cell style="text-align: center;">ᓀᐅᐊ</cell>
								<cell style="text-align: center;">ᓀᐊ</cell>
								<cell style="text-align: center;">ᓀᐊl</cell>
								<cell style="text-align: center;">ᓀᐊll</cell>
								<cell style="text-align: center;">ᓂ</cell>
							</row>
							<row>
								<cell style="text-align: center;">31 - 40</cell>
								<cell style="text-align: center;">ᓂl</cell>
								<cell style="text-align: center;">ᓂll</cell>
								<cell style="text-align: center;">ᓂᐅ</cell>
								<cell style="text-align: center;">ᓂlᐅ</cell>
								<cell style="text-align: center;">ᓂllᐅ</cell>
								<cell style="text-align: center;">ᓂᐅᐊ</cell>
								<cell style="text-align: center;">ᓂᐊ</cell>
								<cell style="text-align: center;">ᓂᐊl</cell>
								<cell style="text-align: center;">ᓂᐊll</cell>
								<cell style="text-align: center;">ᓄ</cell>
							</row>
							<row>
								<cell style="text-align: center;">41 - 50</cell>
								<cell style="text-align: center;">ᓄl</cell>
								<cell style="text-align: center;">ᓄll</cell>
								<cell style="text-align: center;">ᓄᐅ</cell>
								<cell style="text-align: center;">ᓄlᐅ</cell>
								<cell style="text-align: center;">ᓄllᐅ</cell>
								<cell style="text-align: center;">ᓄᐅᐊ</cell>
								<cell style="text-align: center;">ᓄᐊ</cell>
								<cell style="text-align: center;">ᓄᐊl</cell>
								<cell style="text-align: center;">ᓄᐊll</cell>
								<cell style="text-align: center;">ᓇ</cell>
							</row>
							<row>
								<cell style="text-align: center;">51 - 60</cell>
								<cell style="text-align: center;">ᓇl</cell>
								<cell style="text-align: center;">ᓇll</cell>
								<cell style="text-align: center;">ᓇᐅ</cell>
								<cell style="text-align: center;">ᓇlᐅ</cell>
								<cell style="text-align: center;">ᓇllᐅ</cell>
								<cell style="text-align: center;">ᓇᐅᐊ</cell>
								<cell style="text-align: center;">ᓇᐊ</cell>
								<cell style="text-align: center;">ᓇᐊl</cell>
								<cell style="text-align: center;">ᓇᐊll</cell>
								<cell style="text-align: center;">ᑯ</cell>
							</row>
							<row>
								<cell style="text-align: center;">61 - 70</cell>
								<cell style="text-align: center;">ᑯl</cell>
								<cell style="text-align: center;">ᑯll</cell>
								<cell style="text-align: center;">ᑯᐅ</cell>
								<cell style="text-align: center;">ᑯlᐅ</cell>
								<cell style="text-align: center;">ᑯllᐅ</cell>
								<cell style="text-align: center;">ᑯᐅᐊ</cell>
								<cell style="text-align: center;">ᑯᐊ</cell>
								<cell style="text-align: center;">ᑯᐊl</cell>
								<cell style="text-align: center;">ᑯᐊll</cell>
								<cell style="text-align: center;">ᑲ</cell>
							</row>
							<row>
								<cell style="text-align: center;">71 - 80</cell>
								<cell style="text-align: center;">ᑲl</cell>
								<cell style="text-align: center;">ᑲll</cell>
								<cell style="text-align: center;">ᑲᐅ</cell>
								<cell style="text-align: center;">ᑲlᐅ</cell>
								<cell style="text-align: center;">ᑲllᐅ</cell>
								<cell style="text-align: center;">ᑲᐅᐊ</cell>
								<cell style="text-align: center;">ᑲᐊ</cell>
								<cell style="text-align: center;">ᑲᐊl</cell>
								<cell style="text-align: center;">ᑲᐊll</cell>
								<cell style="text-align: center;">ᑫ</cell>
							</row>
							<row>
								<cell style="text-align: center;">81 - 90</cell>
								<cell style="text-align: center;">ᑫl</cell>
								<cell style="text-align: center;">ᑫll</cell>
								<cell style="text-align: center;">ᑫᐅ</cell>
								<cell style="text-align: center;">ᑫlᐅ</cell>
								<cell style="text-align: center;">ᑫllᐅ</cell>
								<cell style="text-align: center;">ᑫᐅᐊ</cell>
								<cell style="text-align: center;">ᑫᐊ</cell>
								<cell style="text-align: center;">ᑫᐊl</cell>
								<cell style="text-align: center;">ᑫᐊll</cell>
								<cell style="text-align: center;">ᑭ</cell>
							</row>
							<row>
								<cell style="text-align: center;">91 - 100</cell>
								<cell style="text-align: center;">ᑭl</cell>
								<cell style="text-align: center;">ᑭll</cell>
								<cell style="text-align: center;">ᑭᐅ</cell>
								<cell style="text-align: center;">ᑭlᐅ</cell>
								<cell style="text-align: center;">ᑭllᐅ</cell>
								<cell style="text-align: center;">ᑭᐅᐊ</cell>
								<cell style="text-align: center;">ᑭᐊ</cell>
								<cell style="text-align: center;">ᑭᐊl</cell>
								<cell style="text-align: center;">ᑭᐊll</cell>
								<cell style="text-align: center;">lᒥᑕ</cell>
							</row>
						</table>
					</div>
					<div>
						<head>Hardware: the acahkasinahikana keyboard</head>
						<p><hi>The history of print cultures has led to privileging western
								“stories, voices, and values” (Risam 2018, 89), and modern coding
								cultures and computer language development have naturally adopted.
								Though Nehiyawewin can be typed on ‘standard’ keyboard layouts using
								a Romanized orthography, this seemingly innocuous accommodation is
								probably </hi><hi rend="bold baseline underline">the</hi><hi> number
								one contributor to the continued erosion of Indigenous culture and
								language in the digital age.</hi></p>
						<p><hi>Initially designed for English typewriters in the mid-to-late 19th
								century, the International Standards Organization officially adopted
								the QWERTY keyboard layout in 1971, becoming “the de facto Standard
								layout for Communications and computer interface keyboards” (Noyes
								1983) in 1972. Over the last 50 years, the ISO Standard has evolved
								as our communication technologies have, and ISO 9995-9:2016 now
								includes definitions for multilingual and multiscript keyboard
								layouts (International Standards Organization 2016). However, these
								standards still assume that most languages can be represented with a
								Latin alphabet. The ISO Standard clearly states that it “is intended
								to address all characters needed to write all contemporary languages
								using the Latin script, together with standardized Latin
								transliterations of some major languages using other scripts”
								(International Standards Organization 2016). This assumption that
								‘all contemporary languages’ can be written using a Latin character
								set is the type of colonial coercion that continues to institute
								western ideologies as dominant.</hi></p>
						<p><hi>Regarding computing, our experiences are configured and guided by
								technology design philosophies that do not always include a combined
								understanding of “people, technology, society, and business” (Norman
								and Tognazzini 2015). By working with members of my community, my
									<title rend="none">Ancestral Code</title> project has allowed me
								to explore keyboard designs that can better represent Nehiyawewin
								and </hi><hi>Nehiyaw culture when entering syllabics into the
								computer. I aimed my design objectives at challenging assumed
								western standards by investigating the role of the keyboard as an
								input device</hi><hi>, a</hi>
							<hi>nd how such devices can support Nehiyaw cultural pedagogy and
								improve the relationships between the user, their language
								(i.e., Nehiyawewin), and the computer. Though Nehiyaw syllabics are
								taught in several ways, one popular method is the arrangement of the
								Nehiyawewin syllabary into a star design, often referred to as a
								‘Cree syllabic star chart’ (Figure 5). This design is used often in
								teaching syllabics and contains several culturally specific
								teachings. For example, as a student at University nuhelot’ine
								thaiyots’i nistameyimâkanak Blue Quills, my favourite syllabic
								‘origin-stories’ were about the </hi><hi>‹
								</hi><hi>ᒐ</hi><hi>›</hi><hi> syllabic, described as being symbolic
								of the pipe used in Nehiyaw ceremony, </hi><hi>‹
								</hi><hi>ᐱ</hi><hi>›</hi><hi> is a medicine lodge (i.e., tipi), and
								</hi><hi>‹ </hi><hi>ᑕ</hi><hi>›</hi><hi> can be interpreted as the
								toe of a moccasin. Whether or not these story sources are the true
								inspirations for the initial syllabic creations, I recognize the
								importance the visual imagery of syllabics holds and how they are
								intricately tied to cultural representations and understandings.
								Furthermore, due to the reflected and rotational arrangement and
								orientation of Nehiyaw syllabics, these teachings cannot be
								represented using the modern four-row keyboards used for typing in
								western computing. </hi></p>
						<p><hi>I feel that a keyboard or input device that uses this Nehiyaw star
								layout is culturally significant, meaningful to a Nehiyaw user, and
								therefore appropriate for capturing Nehiyawewin. Through my
								iterative design process for the Nehiyawewin keyboard, I critically
								evaluated everything from the keycaps to the printed circuit boards
								(“PCB”). During this process, I created five distinct designs to
								retain cultural associations, allow efficient syllabic entry, and
								have practical usability for typing everyday documents. I found the
								star design keyboard was best suited as the primary interface for
								coding with Nehiyawewin in the <title rend="none">Ancestral
									Code</title> programming environment. Similarly, testing these
								designs with Nehiyawewin language-learners, users found typing
								syllabics with a ‘star’ keyboard easier than QWERTY layouts because
								of the grouping of syllabic sounds in each of the four quadrants
								establishes a mental-map making locating syllabics by sound easier.
								For example, all the ‘i’ syllabics are located in the keyboard's top
								left and top vertical. This relationship between spoken language,
								computer language, and teachings of the syllabic orthography is
								meaningful </hi><hi>a</hi><hi>nd is one that I feel is better
								supported by a device derived from Nehiyawewin pedagogy. Figure 6
								illustrates one proposed layout for the physical Nehiyaw ‘Star Chart
								Keyboard’.</hi></p>
						<figure xml:id="figure04">
							<head>My own Nehiyawewin syllabic star chart.</head>
							<figDesc>Nehiyawewin syllabic glyphs arranged in rough four-fold
								symmetry with phonetic guides printed in miniature next to each
								corresponding symbol.</figDesc>
							<graphic url="resources/images/figure04.png"/>
						</figure>
						<figure xml:id="figure05">
							<head>One of my proposed Nehiyawewin ‘Star Chart Keyboard’
								designs.</head>
							<figDesc>A radially-symmetrical image of a keyboard with eight rays of
								keys emanating from a central <q>space</q> key.</figDesc>
							<graphic url="resources/images/figure05.png"/>
						</figure>
					</div>
				</div>
				<div>
					<head>Bringing Nehiyawewin characteristics to a programming language</head>
					<p><hi>With the formalities of the orthography addressed, I progressed to
							investigating how to engage with Nehiyawewin programmatically. I
							initially approached this project with a very naive and western mindset.
							I considered common modern computing ideas and abstractions that
							included </hi><hi rend="italic">variables, data types, loops,
							conditional branching, </hi><hi>and</hi><hi rend="italic">
							linear/sequential instructions (i.e., lines of code), </hi><hi>and
							embarked on a journey to convert their English versions to Nehiyawewin.
							Thinking that some of these concepts would easily convert from English
							to Nehiyawewin, </hi><hi>I</hi><hi> quickly realized that this approach
							of language substitution in Nehiyawewin would not work. As I discovered
							on my first day as a Nehiyawewin student, Nehiyawewin technically does
							not have a word for ‘computer,’ let alone any of the programming
							concepts I was hoping to capture. Technological words in English like
							</hi><hi rend="italic">programming</hi><hi>, </hi><hi rend="italic"
							>network</hi><hi>, and </hi><hi rend="italic">protocol</hi><hi> I found
							were, for the most part, </hi><hi rend="italic"
							>non-translatable</hi><hi> to Nehiyawewin, at least not a way I could
							use in developing a programming language. Today, finding appropriate
							Nehiyaw cultural meanings that can map to technological terminology
							remains the biggest challenge in developing the <title rend="none"
								>Ancestral Code</title> project as a fully Nehiyawewin-privileged
							computing platform. Nevertheless, I took these challenges with language
							and formulated an approach that involved finding easily translatable
							concepts (if they existed)</hi><hi>,</hi><hi> and borrowing from Nehiyaw
							language construction and word forms to create a unique coding
							paradigm.</hi></p>
					<div>

						<head>Translating Nehiyawewin</head>
						<p>What is a computer? I asked the most knowledgeable person in my Nehiyaw
							class, the Elder. That conversation went something like this:</p>
						<sp>
							<speaker>Me</speaker>
							<p>How do you say <q>computer</q>?</p>
						</sp>
						<sp>
							<speaker>Elder</speaker>
							<p>Well, that depends. There really is no word for computer, but some
								people use ‘<hi rend="italic">masinatakan
								cikastepayicikanis</hi>.</p>
						</sp>
						<sp>
							<speaker>Me</speaker>
							<p>What does it mean?</p>
						</sp>
						<sp>
							<speaker>Elder</speaker>
							<p><hi rend="italic">masinatakan</hi><hi> means to type or write, but
									actually comes from words that mean ‘using a tool to create or
									stamp a mark’ and </hi><hi rend="italic"
									>cikastepayicikanis</hi><hi> is the word we use for TV, it comes
									from a word about ‘shadows’ so something like ‘making a shadow,
									or full of shadows, or a box of shadows.’ You can interpret
									these words together as ‘making marks in a box of shadows
									without a pen.’ </hi></p>
						</sp>
						<sp>
							<speaker>Me</speaker>
							<p>uh-huh… <hi rend="italic">Ayhay.</hi></p>
						</sp>


						<!-- <p><hi>Me: How do you say ‘computer’?</hi></p>
						<p><hi>Elder: Well, that depends. There really is no word for computer, but
								some people use ‘</hi><hi rend="italic">masinatakan
								cikastepayicikanis</hi><hi>.’ </hi></p>
						<p><hi>Me: What does it mean? </hi></p>
						<p><hi>Elder: </hi><hi rend="italic">masinatakan</hi><hi> means to type or
								write, but actually comes from words that mean ‘using a tool to
								create or stamp a mark’ and </hi><hi rend="italic"
								>cikastepayicikanis</hi><hi> is the word we use for TV, it comes
								from a word about ‘shadows’ so something like ‘making a shadow, or
								full of shadows, or a box of shadows.’ You can interpret these words
								together as ‘making marks in a box of shadows without a pen.’
							</hi></p>
						<p><hi>Me: uh-huh… </hi><hi rend="italic">Ayhay.</hi>
						</p> -->
						<p><hi>I note that this was not an isolated occurrence. </hi><hi
								rend="italic">“Well, that depends. There really is no word for
								[insert word],”</hi><hi> was a very common response to almost
								anything ‘western’ in my classes and applied to most modern
								technologies like radios, televisions, and cell phones. Depending on
								whom you asked, there are as many ways to describe these modern
								contraptions as there are dialects of Nehiyawewin. However, I accept
								and now use </hi><hi rend="italic">mâmitoneyihcikanihkân</hi><note
								place="foot" xml:id="ftn4" n="5"><p>
									<hi rend="italic">mâmitoneyihcikanihkân – </hi><hi>one Nehiyaw
										word for computer, mean</hi><hi>ing</hi><hi> artificial
										brain.</hi></p></note><hi>, suggested by Wayne Jackson, an
								esteemed Nehiyaw language expert and Nehiyawewin professor at
								University Blue Quills. As explained to me, this word is understood
								to mean ‘artificial thought/brain.’ I choose this definition over
								</hi><hi rend="italic">masinatakan cikastepayicikanis</hi><hi>
								because I feel it better conveys the essence of what a computer is.
								I find that </hi><hi rend="italic">masinatakan
								cikastepayicikanis</hi><note place="foot" xml:id="ftn5" n="6"><p>
									<hi rend="italic">masinatakan cikastepayicikanis –</hi><hi>
										another Nehiyaw word for computer. Roughly, a book or
										writing in a box of shadows.</hi></p></note><hi> is more
								about describing the computer as a physical, non-animate object of
								utility than the more conceptual or abstract and humanized idea of
								what a computer is. After all, we as a species have a considerably
								long history of relating technologies to aspects of being human
								(Travers 1996, 57), and </hi><hi rend="italic"
								>mâmitoneyihcikanihkân</hi><hi> suits this tradition. </hi></p>
						<p><hi>Finding suitable replacements for some of the more
								programming-specific lingo such as integer, float, string, array,
								variable, subroutine/function, do/while, for/next, and if/then
								proved to be highly problematic. These concepts either do not
								translate easily, can only be translated in a general sense, and/or
								require a broader context. And, in most cases, they cannot be
								translated without simplifying their meaning. Additionally, these
								concepts can only be translated by conversation and engagement with
								community members, fluent speakers, and Elders with the required
								experience and knowledge.</hi></p>
						<p><hi>My solution to this particular challenge was one of metaphoric
								application rather than translation. I credit Hawai’ian game
								developer and computer programmer Kari Noe for introducing me to
								this philosophical change. Noe was a member of a
								</hi><hi>Ōlelo Hawai’ian programming team engaged with translating
								C# into Hawai’ian (Muzyka 2018). She described the ‘if/then/else’
								statement as an example where the ‘if/then/else’ statement does not
								make sense when translated from English to Hawai’ian. The
								programming team consulted with native Hawai’ian speakers and
								community members to find meaningful terms that could be both
								culturally appropriate and programmatically practical. The result
								for ‘if/then/else’ becomes </hi><hi rend="italic">muliwai</hi><hi>,
								the Hawai’ian word for ‘river.’ The idea of rivers being able to
								branch from the main waterway and eventually rejoin the main river
								later provided a better conceptualization of a Hawai’ian context
								than the English ‘if/then/else’ statement. This culturally-aware
								solution in their language was not only inspirational but
								fundamentally altered how I was approaching the relationships
								between computing concepts and cultural relevance. Though I
								recognize that Hawai’ian peoples’ relationship with water is
								considerably different from those of the Indigenous peoples of the
								Americas, water is no less important. In Nehiyaw culture, water is a
								medicine, a provider of life, and is sacred. Therefore, I have come
								to use ‘river’ as a conditional branch command. In Nehiyawewin river
								is </hi><hi rend="italic">sîpiy</hi><hi>, and with this root I can
								then branch an ‘if’ into </hi><hi rend="italic">sîpîsis</hi><hi>, a
								‘small river’ or ‘creek’ in English. Therefore, a code example might
								look like the following (Figure 7):</hi></p>
						<figure xml:id="figure06">
							<figDesc/>
							<graphic url="resources/images/figure06.png"/>
						</figure>
						<p><hi>In SRO (Figure 8): </hi></p>
						<figure xml:id="figure07">
							<figDesc/>
							<graphic url="resources/images/figure07.png"/>
						</figure>
						<p><hi>The literal English translation of this code block would be (Figure
								9):</hi></p>
						<figure xml:id="figure08">
							<figDesc/>
							<graphic url="resources/images/figure08.png"/>
						</figure>
						<p><hi>In this example, the first ‘creek’ ends with ‘</hi><hi rend="italic"
								>mînisiwat</hi><hi>᙮</hi><hi>’</hi><note place="foot" xml:id="ftn6"
								n="7"><p>
									<hi rend="italic">mînisiwat – </hi><hi>a berry
								bag.</hi></p></note><hi> where </hi><hi>‹
								</hi><hi>᙮</hi><hi>›</hi><hi>terminates and subsequently ends the
								‘river-if’ statement. The second ‘creek’ ends with ‘</hi><hi
								rend="italic">âniskôsîpiy</hi><hi>’</hi><note place="foot"
								xml:id="ftn7" n="8"><p>
									<hi rend="italic">âniskôsîpiy</hi><hi> – where a river
										converges.</hi></p></note><hi> or ‘rejoin the river,’ and in
								this case, it would continue to the following statement in the ‘if’
								code block. In this way, the ‘if’ statement is fluid. It can branch,
								terminate, or rejoin the original, reflecting a natural flow or
								progression.</hi></p>
						<p><hi>Understanding computer functions in these cultural terms provides a
								more Indigenous method of relating to the machine. In addition,
								defining programmatic operations using culturally meaningful
								metaphoric terminology changes the process of keyword </hi><hi
								rend="italic">translation</hi><hi> to a process of </hi><hi
								rend="italic">knowledge adaptation</hi><hi>, ensuring that a Nehiyaw
								programmer does not need to language-switch between Nehiyawewin and
								English to have the computer perform its tasks. Looking at a
								computer’s code from this metaphoric perspective can also be
								extended to the binary level of the machine, where a Nehiyaw
								worldview can reframe the binary understanding of 1 and 0 as animate
								and inanimate.</hi></p>
					</div>
					<div>
						<head>Nehiyaw language construction</head>
						<p><hi>I felt that morphemes and free word order were characteristics of
								Nehiyawewin that offered strong potential for programmatic
								versatility though they did offer some unique challenges. </hi></p>
						<div>
							<head>Morphemes</head>
							<p><hi>Nehiyawewin is intensely metaphoric and descriptive and is a
									polysynthetic language, meaning the language combines many
									morphemes, often resulting in lengthy sentence-word
									constructions (Shirt and Wellman 2022). A morpheme is a single
									linguistic unit of meaningful speech. For an English example,
									without focusing too much on etymology, the word </hi><hi
									rend="italic">code</hi><hi> from the Latin </hi><hi
									rend="italic">codex</hi><hi> can add different suffixes to alter
									its meaning. One such ending is </hi><hi rend="italic"
									>-ing</hi><hi> to change it to </hi><hi rend="italic"
									>coding</hi><hi>, representing an active verb. Another is
									</hi><hi rend="italic">-er</hi><hi> to change it to </hi><hi
									rend="italic">coder,</hi><hi> which is a noun meaning </hi><hi
									rend="italic">a person who codes</hi><hi>, and both could be
									structured in a sentence as ‘the coder is coding.’ These
									suffixes are morphemes. </hi></p>
							<p><hi>A fun example that illustrates how Nehiyawewin morphemes are
									stringed together is the word for “hippopotamus.” Nehiyawewin
									does not have an actual word for hippopotamus because this
									animal is not native to the Americas, and therefore it is
									described in language using its most prominent features. In
									Nehiyawewin, as described by Nehiyaw Elder Solomon Ratt, a
									hippopotamus is called </hi><hi rend="italic"
									>kihci-kispakasakewi-mistipwâmi-mahkitôni-nîswâpitewi-atâmipeko-pimâtakâwi-kohkôs</hi><hi>
									or in English as </hi><hi rend="italic">great, thick-skinned,
									big-thighed, big-mouthed, two-toothed, underwater, swimming, pig
									</hi><hi>(Ogg 2019). </hi></p>
							<p><hi>Another interesting example is the Nehiyawewin translation for
									the English word </hi><hi rend="italic">pony</hi><hi>. In
									Nehiyawewin, the word </hi><hi rend="italic"
											>atim</hi><note><p><hi
											rend="italic normalweight superscript">9</hi><hi
											rend="italic">atim, mistatim, acimosis, mistacimosis
											–</hi><hi> dog, puppy, horse, pony;
										respectively</hi></p></note><hi> is the word for dog. When
									you prefix </hi><hi rend="italic">atim</hi><hi> with </hi><hi
									rend="italic">mist-</hi><hi> from the word </hi><hi
									rend="italic">mistahi-</hi><hi>, which means ‘[something] is
									great/large/big,’ the resulting word </hi><hi rend="italic"
									>mistatim</hi><hi> is formed, which can mean ‘big dog,’ but is
									more commonly used to mean ‘horse.’ Adding the diminutive suffix
									</hi><hi rend="italic">–osis,</hi><hi> meaning ‘[something] is
									small or little,’ to </hi><hi rend="italic">atim</hi><hi>, the
									result is </hi><hi rend="italic">acimosis</hi><hi> meaning
									‘little dog’ or ‘puppy.’ We can go one step further and combine
									all three of these ideas to get </hi><hi rend="italic"
									>mistacimosis</hi><hi>. The resulting understanding is a ‘small
									horse’ or ‘pony.’ Though one could argue it also means a ‘very
									big puppy,’ the context would clarify what the speaker is
									referring to. </hi></p>
							<p><hi>For <title rend="none">Ancestral Code</title>, I used these bound
									morphemes of </hi><hi rend="italic">mistahi-</hi><hi> and
									-</hi><hi rend="italic">osis</hi><hi> as ways to make variables
									increase or decrease in value (i.e., size), even though they may
									not be semantically or syntactically correct in Nehiyawewin
									speech. So, for example, using a numeric variable called
									</hi><hi rend="italic">atim</hi><hi>, you can use the following
									statement (Figure 10):</hi></p>
							<dhq:example xml:id="example02">
								<eg lang="c#">atimosis</eg>
							</dhq:example>
							<p><hi>This is equivalent to the more traditional coding representation
									of (Figure 11): <dhq:example xml:id="example03">
										<eg lang="c#">atim = atim - 1;</eg>
									</dhq:example>
								</hi></p>
							<p><hi>This usage carries the meaning of ‘increase the size of ‘</hi><hi
									rend="italic">the dog’ </hi><hi>and reduce the size of </hi><hi
									rend="italic">the dog</hi><hi>’ or ‘make </hi><hi rend="italic"
									>the dog</hi><hi> bigger then smaller.’ In this example, the
									variable </hi><hi rend="italic">atim</hi><hi> has </hi><hi
									rend="italic">some value</hi><hi> manipulated through a single
									morpheme-constructed token instead of a more </hi><hi
									rend="italic">common calculation assignment</hi><hi> in other
									programming languages delimited by spaces to separate each
									programmatic token. Not to mention the problem with translating
									the syntax of </hi><hi rend="italic">atim = atim + 1 </hi><hi>as
									an assignment command and not a logical statement into
									Nehiyawewin.</hi></p>
						</div>
						<div>
							<head>Free Word Order</head>
							<p><hi>Free word order means words in a sentence do not necessarily need
									to be in a rigid sequence. This ordering is especially apparent
									in something like ‘the cat sees the dog’; whereas, in English,
									you cannot swap ‘the cat’ and ‘the dog’ without changing its
									meaning, as in ‘the dog sees the cat.’ However, this is not the
									case in Nehiyawewin, where ‘</hi><hi rend="italic">minôs wâpamew
									atimwa</hi><hi>’</hi><note place="foot" xml:id="ftn9" n="10"><p>
										<hi rend="italic">minôs wâpamew atimwa – </hi><hi>the cate
											sees the dog.</hi></p></note><hi> and ‘</hi><hi
									rend="italic">atimwa wâpamew minôs</hi><hi>’ mean the same
									thing. This language use is because there is a 3rd person
									obviative </hi><hi rend="italic">-wa</hi><hi> attached to
									</hi><hi rend="italic">atim</hi><hi>, indicating the dog
									</hi><hi rend="italic">atim</hi><hi> is the object being acted
									on regardless of where it appears in the sentence in relation to
									the cat. To say this sentence in English requires modifying the
									verb to clarify who or what is seeing and identifying who or
									what is being seen. This sentence is a simplistic example, but
									as the coding environment for <title rend="none">Ancestral
										Code</title> was designed to be written as a narrative,
									having this flexibility is something I wanted to be able to use
									because it is non-linear and changes our perceptions of coding
									in line-by-line formats. A simple coding example would be the
									completion command for </hi><hi rend="italic">sîpiy, sîpiy
									kîsipayiw</hi><note place="foot" xml:id="ftn10" n="11"><p>
										<hi rend="italic">sîpiy, sîpiy kîsipayiw – </hi><hi>river,
											and the river ends</hi></p></note><hi>. In this case,
									</hi><hi rend="italic">sîpiy kîsipayiw</hi><hi> and </hi><hi
									rend="italic">kîsipayiw sîpiy</hi><hi> mean the same thing.
									Although, as a coder, I can use ‘end river’ or ‘river ends,’ it
									does not matter the order of the tokens as they are not fixed. A
									more expanded example uses this same idea but applies to whole
									lines or activities, as in a looping construction where a
									character such as Wîsahkecâhk might walk, hop, and talk (Figure
									12):</hi></p>
							<figure xml:id="figure09">
								<figDesc/>
								<graphic url="resources/images/figure09.png"/>
							</figure>
							<p><hi style="font-size:11pt">In SRO (with the English equivalent)
									(Figure 13),</hi></p>
							<figure xml:id="figure10">
								<figDesc/>
								<graphic url="resources/images/figure10.png"/>
							</figure>
							<p><hi>When this block of code runs, the lines that follow </hi><hi
									rend="italic">pipon</hi><hi> are ‘randomized’ as it is not
									essential which order those actions execute, as long as the
									</hi><hi rend="italic">Wîsahkecâhk</hi><hi> object variable
									performs all three actions in this block. By comparison, an
									equivalent representation of this code in C# might look like
									this (Figure 14):</hi></p>
							<figure xml:id="figure11">
								<figDesc/>
								<graphic url="resources/images/figure11.png"/>
							</figure>
							<p><hi>The <title rend="none">Ancestral Code</title> keyword for a “do
									loop” is </hi><hi rend="italic">pipon</hi><note place="foot"
									xml:id="ftn11" n="12"><p>
										<hi rend="italic">pipon </hi><hi>– winter
									</hi></p></note><hi rend="italic">, </hi><hi>which translates as
									‘a winter.’ In the next section, I will elaborate on the meaning
									and cultural significance of the reserved word </hi><hi
									rend="italic">pipon</hi><hi>. But, for this example, if I wanted
									to perform these actions in sequence and not a random order, I
									would not bother using the </hi><hi rend="italic">pipon
									</hi><hi>loop. You may also notice that the lines that direct
									the </hi><hi rend="italic">Wîsahkecâhk</hi><hi> variable to do
									an action (see Figure 11) are in free word order in the <title
										rend="none">Ancestral Code</title> example (as in </hi><hi
									rend="italic">Wîsahkecâhk walks</hi><hi> and </hi><hi
									rend="italic">hop Wîsahkecâhk</hi><hi>). Unlike many programming
									languages that must start with a command or keyword followed by
									variables or parameters, this is not necessary for <title
										rend="none">Ancestral Code</title>, as long as the variable
									and command are on the same executing line. The programming
									parser, the part of the programming environment responsible for
									separating lines of code into smaller elements and individual
									instructions, will still be able to discern the token from the
									data, regardless of the position of each in the line. In the
									next section, I will detail the reasons behind this built-in
									randomization. Still, in terms of programming language
									construction, using features of morphemic commands and free word
									order, are a means to describe the relationships between the
									programmatic structures of <title rend="none">Ancestral
										Code</title> and Nehiyaw culture.</hi><graphic n="10025"
									width="16.51cm" height="6.57225cm" url="media/image15.png"
									rend="block"/><graphic n="10026" width="16.51cm"
									height="6.57225cm" url="media/image10.png" rend="block"/></p>
						</div>
					</div>
				</div>
				<div>
					<head>Culture and language == code &amp;&amp; code == culture and
						language</head>
					<p><hi>Language plays a significant role in the enterprise of computer
							programming, and these activities are still heavily informed by western
							culture. Consequently, it is challenging to envision programming as
							anything but a socio-technical subculture populated with hordes of
							</hi><hi>Benjamin Nugent’s </hi><hi rend="italic">Lewis
							Skolnick-esque</hi><hi> Type-1 ‘nerds’ (Nugent 2008, 5).</hi><note
							place="foot" xml:id="ftn12" n="13"><p><hi> Lewis Skolnick, portrayed by
									Robert Carradine, is one of the primary characters from the 1984
									film </hi><hi rend="italic">Revenge of the
								Nerds</hi><hi>.</hi></p></note>
						<hi>This stereotyped and generalized view of programmers and programming was
							the last challenge I aimed to ‘reformulate,’ to introduce Indigenous
							cultural practices as digital metaphorical structures that view
							programming from Indigenous epistemological and ontological concerns
							that alter how programming is perceived in its current western context.
							For example, I admire how Ramsey Nasser describes the algorithms
							depicted in the Arabic calligraphic forms of
							his</hi><hi>قلب</hi><hi>programming language “as high poetry” (Nasser
							2012). I also found that describing western computing ideas in
							Nehiyawewin often resulted in algorithmically poetic word creations, as
							evidenced with the concept of ‘river’ to represent ‘if/then’ logic. I
							expand on this analogy-based token use for representing programmatic
							instructions by applying the same metaphoric treatment to culturally
							specific understandings as a way of genuinely viewing computer
							programming as a non-western endeavour. Through this reimagining of
							computing terms, I highlight how computing concepts already reflect
							Indigenous cultural teachings, practices, especially ceremony, as I
							demonstrate in the following specific examples of</hi>
						<hi rend="italic">miyâhkasike</hi><note place="foot" xml:id="ftn13" n="14"><p>
								<hi rend="italic">Miyâhkasike –</hi><hi> to smudge with sweetgrass
									or sage.</hi></p></note><hi>, </hi><hi rend="italic"
							>pipona</hi><note place="foot" xml:id="ftn14" n="15"><p>
								<hi rend="italic">pipona – </hi><hi>winters (plural of </hi><hi
									rend="italic">pipon</hi><hi>).</hi></p></note><hi>, and </hi><hi
							rend="italic">waniyaw</hi><note place="foot" xml:id="ftn15" n="16"><p>
								<hi rend="italic">waniyaw –</hi><hi> random, or
							randomly.</hi></p></note><hi>.</hi></p>
					<p rend="heading 4 heading 4">miyâhkasike and tisamân</p>
					<p><hi>One of the most common and essential cultural practices in Nehiyaw
							culture is </hi><hi rend="italic">the smudge</hi><hi>. A </hi><hi
							rend="italic">smudge</hi><hi> is a small, personal ceremonial practice
							where the burning of an Indigenous medicinal herb such as sweetgrass or
							sage is used to ‘cleanse’ and ‘purify’ the individual. When smudging,
							people pass their hands or objects to be ‘blessed’ through the rising
							smoke trails. In a normal smudge, you use your hands to draw the smoke
							towards you – blessing your head, ears, eyes, mouth, heart, and body
							with the smoke. And then, you ‘bless’ anything else you wish to be
							cleared of negative energies, such as food, tobacco, eyeglasses, or even
							your laptop. Essentially, smudging is responsible for blessing anything
							that can affect any of your four spirits. I have even heard stories from
							several Nehiyaw and Métis Elders that have physically smudged their
							laptop to purify it before ‘Googling.’ In the context of ceremony, this
							idea of ‘cleansing’ is something that computers do regularly. Whether it
							is emptying the ‘trash bin,’ clearing memory, resetting the graphics
							display, or deleting a browser’s cache, the intent of all these
							activities is to remove items that can negatively affect the system’s
							operation. Therefore, the first command in an <title rend="none"
								>Ancestral Code</title> program is </hi><hi rend="italic"
							>miyâhkasike</hi><hi> which is ‘to smudge with sage/sweetgrass,’ or
							</hi><hi rend="italic">tisamân</hi><note place="foot" xml:id="ftn16"
							n="17"><p>
								<hi rend="italic">tisamân –</hi><hi> to smudge (in
								general).</hi></p></note><hi rend="italic">,</hi><hi> which is ‘to
							smudge (in general),’ both serve the same purpose of preparing the
							system. The choice of which smudge command to use is up to the
							programmer. However, I personally feel that a program that relates a
							sacred story or contains culturally specific or significant knowledge in
							the code would start with </hi><hi rend="italic">miyâhkasike</hi><hi>,
							being more purposeful than the more generic </hi><hi rend="italic"
							>tisamân</hi><hi>. These ‘smudging’ operations include, but are not
							limited to, clearing any current output on the screen, clearing and
							readying the program’s libraries and variables, and clearing any cache
							from a previous execution.</hi></p>
					<p><hi rend="italic">Miyâhkasike</hi><hi> is an essential piece of code because
							not only does it have a very real programmatic purpose, but to have the
							system digitally mirror a user’s physical ceremonial practice transcends
							the system. It also symbolically provides the computer a ‘spirit’ that
							the user can relate to as more of a living being instead of seeing the
							computer as a subordinate spiritless instrument. From an Indigenous
							perspective, this kind of human-machine connection is one of
							collaboration and kinship, and has been explored by several Indigenous
							scholars and artists (Noori 2011; L’Hirondelle 2014; Lewis et al.
							2018).</hi></p>
					<p rend="heading 4 heading 4">Pipon</p>
					<p><hi rend="italic">Pipon</hi><hi> literally means ‘winter.’ It, and its plural
							form </hi><hi rend="italic">pipona,</hi><hi> along with the lexically
							related words </hi><hi rend="italic">pipohki</hi><hi> (next winter),
							</hi><hi rend="italic">awasipipon</hi><hi> (last winter), and </hi><hi
							rend="italic">mesakwanipipon</hi><hi> (every winter)</hi><note
							place="foot" xml:id="ftn17" n="18"><p>
								<hi rend="italic">pipohki, awasipipon, mesakwanipipon –</hi><hi>next
									winter, last winter, every winter;
							respectively.</hi></p></note><hi> are used in <title rend="none"
								>Ancestral Code</title> as ‘for loops.’ </hi><hi rend="italic"
							>Pipon</hi><hi> describes the single execution of a group of lines, and
							</hi><hi rend="italic">pipohki, awasipipon,</hi><hi> and </hi><hi
							rend="italic">mesakwanipipon</hi><hi> are sub-functions that can only
							occur inside a repeating </hi><hi rend="italic">pipona</hi><hi>
							loop.</hi></p>
					<p><hi>You may ask why use </hi><hi rend="italic">pipon</hi><hi> as a metaphor
							for the programmatic ‘loop’? Could you not use </hi><hi rend="italic"
							>nîpin</hi><hi> (summer)</hi><hi> since</hi><hi> it also occurs
							annually</hi><hi>?</hi><hi> What makes </hi><hi rend="italic"
							>pipon</hi><hi> important is its significance to aging and identity in
							Nehiyaw culture. For example, in Nehiyawewin, I say, ‘I am currently 49
							winters old.’ As heard from respected Nehiyaw culture and language
							instructor Reuben Quinn, we use ‘winter’ and not another season because
							back in the days before ‘comfortable housing’ in the northern climes of
							what is now Canada, surviving winter signified your resilience and
							survival of the most extreme elements </hi><hi>of</hi><hi> Earth Mother
							(Quinn 2021). Surviving winter is a valued and personal accomplishment.
							The symbolism in ‘winter’ as a programming keyword lies in its
							representation as a repeatable cycle and in its relationships to aging
							and resilience that naturally imply increased experience and knowledge.
							So, similar to when a western-formatted computer program loops through a
							series of instructions, it often builds upon previously executed
							statements — the loop ‘ages’ as it progresses and continues until the
							loop conditions are met or terminate.</hi></p>
					<p rend="heading 4 heading 4">Waniyaw</p>
					<p><hi rend="italic">Waniyaw</hi><hi> is a word that can be used for meaning ‘at
							random.’ In <title rend="none">Ancestral Code</title>, it is a way to
							simulate the dynamic and unpredictable forces of the natural world.
							Randomization is fundamental to <title rend="none">Ancestral
								Code</title> because of the generative nature of the outputs it
							creates. From a cultural perspective, I want the visual outputs to have
							aspects that are arbitrary and not controllable by the programmer. This
							environment of chance reflects the aspects of nature we cannot control.
							Therefore, giving the system some autonomy and decision-making is one
							way to prevent the programmer from always having complete control. In
							Nehiyaw culture, it is necessary to allow nature to run its course or
							recognize that there are elements in our world beyond the individual’s
							control.</hi></p>
					<p rend="heading 4 heading 4">Randomization</p>
					<p><hi>In addition to the reserved keyword </hi><hi rend="italic"
							>waniyaw</hi><hi>, the words </hi><hi rend="italic">pipon, mihcecis,
							mihcet, mihcetinwa</hi><note place="foot" xml:id="ftn18" n="19"><p>
								<hi rend="italic">mihcecis, mihcet, mihcetinwa – </hi><hi>a few,
									many, a lot; respectively.</hi></p></note><hi rend="italic"
							>,</hi><hi> and the bound morpheme </hi><hi rend="italic">misi-</hi><hi>
							incorporate randomization events in one form or another. </hi></p>
					<list type="ordered">
						<item><hi rend="italic">pipon</hi><hi> – is the instruction for ‘do once’ or
								literally ‘for one winter,’ and all lines of code that proceed it
								are executed in random order until the ‹ </hi><hi
								style="font-family:Gadugi;font-size:12pt">᙮</hi><hi> › full stop is
								encountered. </hi>
						</item>
						<item><hi rend="italic">mihcecis</hi><hi> – means ‘small many’ and is used
								to produce a random number between 100 and 1,000.</hi></item>
						<item><hi rend="italic">mihcet</hi><hi> – means ‘many’ and is used to
								produce a random number between 1,000 and 100,000.</hi></item>
						<item><hi rend="italic">mihcetinwa</hi><hi> – means ‘numerous’ and is used
								to produce a random number between 100,000 and 1
							million.</hi></item>
						<item><hi rend="italic">waniyaw</hi><hi> – is used in the context of the
								entire program or within a </hi><hi rend="italic">pipona</hi><hi>
								loop block. So, for example, if the programmer wants a statement or
								series of statements to execute randomly, they would write it like
								this (Figure 15):</hi>
							<figure xml:id="figure12">
								<figDesc/>
								<graphic url="resources/images/figure12.png"/>
							</figure></item>

						<item><hi><title rend="none">Ancestral Code</title> interprets this
								instruction as ‘have</hi><hi rend="italic"> Wîsahkecâhk</hi><hi>
								walk at a random interval.’ If this instruction is in the main body
								of the code, it will execute for random intervals from that point
								forward. If this instruction is inside a </hi><hi rend="italic"
								>pipona</hi><hi> block, it executes randomly only for as long as
								that loop is active and ends when the loop ends. In this use, the
								computer takes on the responsibility of ‘nature,’ and each time the
								program is executed, the randomness introduced with </hi><hi
								rend="italic">waniyaw</hi><hi> in the code guarantees the output
								will always be unique. This uniqueness is similar to how a story is
								never quite the same when repeated, even by the same
								storyteller.</hi></item>
					</list>
				</div>
			</div>
			<div>
				<head>Conclusion</head>
				<p><hi>When it comes to coding in any of the thousands of computer programming
						languages available, a programmer is obliged to subscribe to and accept the
						social, technological, and cultural attitudes that created that language.
							<title rend="none">Ancestral Code</title>, is no exception, in that it
						is formulated to be more accessible to Nehiyaw users. However, in contrast
						to other (i.e., more common/traditional) computing languages, <title
							rend="none">Ancestral Code</title> is built on specific Nehiyaw cultural
						principles and not necessarily the lineal or logical requirements defined by
						the system. This difference means that Ancestral Code’s model and
						programming paradigm can alter computing philosophies and create new
						opportunities and avenues for Indigenous computer programming
					pedagogy.</hi></p>
				<p><hi>“Survivance,” as defined by distinguished Indigenous cultural theorist Gerald
						Vizenor, is “an active sense of presence, the continuance of native stories,
						not a mere reaction, or a survivable name. Native survivance stories are
						renunciations of dominance, tragedy and victimry” (Vizenor 2008, 1). As a
						project, my intention in creating <title rend="none">Ancestral Code</title>
						was to make a system capable of collaborating with Indigenous knowledges to
						create a uniquely Indigenous experience within a digital space born from
						western computational sciences. Through a wholistic and Indigenous approach
						to computer programming, I have revealed that there can be a deep connection
						in the human-computer relationship paradigm</hi><hi>,</hi><hi> one that can
						advance programming practices to be more culturally informed while remaining
						relevant and critical to the survivance of Indigenous language and
						culture.</hi></p>
				<p><hi>Using theoretical wholistic Indigenous design frameworks and
						culturally-determined computer programming language like the ones I
						described in this article, I am encouraging deeper critical discussions on
						the socio-technical philosophies of computer programming. <title rend="none"
							>Ancestral Code</title> can be used as a template that seeks to
						harmonize cultural epistemologies and ontologies with computing by
						redefining computing philosophies through a cultural lens. It is a project
						meant to take a user on a voyage through Nehiyaw knowledges that have
						developed over millennia and have those knowledges define the relationships
						and models of modern computing. This journey then changes the relationship
						from one of </hi><hi rend="italic">human-and-computer</hi><hi> to one that
						is </hi><hi rend="italic">culture-and-computer</hi><hi>. </hi></p>
				<p><hi>I feel this change in philosophy and approach to computer programming rewards
						both Indigenous and western computing cultures. From my perspective, a
						programmer’s identity is heavily imbued with western computing practices and
						personally meaningful relationships with software and the interaction with
						computing devices. This broadening and augmenting of software and hardware
						architectures are worthy of further investigation, especially for the
						potential benefits they can provide as a template for other Indigenous
						communities who wish to advocate and explore their cultural languages and
						teachings as programmatic interfaces.</hi></p>
				<p/>
				<div type="appendix">
					<head>Glossary</head>
					<table xml:id="glossary">
						<row role="label">
							<cell>Standard Roman Orthography</cell>
							<cell>IPA (Pronunciation)</cell>
							<cell>Meaning</cell>
						</row>
						<row>
							<cell>âcimow</cell>
							<cell>ʌtʃɪmow</cell>
							<cell>[s/he] narrates [her/his] own story </cell>
						</row>
						<row>
							<cell>acimosis </cell>
							<cell>ʌtʃɪmʊsɪs</cell>
							<cell>small dog; puppy</cell>
						</row>
						<row>
							<cell>âniskôsîpiy</cell>
							<cell>aːnɪskoːsiːpij</cell>
							<cell>following the river; rejoin the river</cell>
						</row>
						<row>
							<cell>atim </cell>
							<cell>ʌtɪm</cell>
							<cell>a dog</cell>
						</row>
						<row>
							<cell>atimwa wâpamew minôs</cell>
							<cell>ʌtɪmwʌ waːpʌmew mɪnoːs</cell>
							<cell>the dog + is seen by + the cat</cell>
						</row>
						<row>
							<cell>awasipipon </cell>
							<cell>ʌwʌsɪpɪpʊn</cell>
							<cell>last winter</cell>
						</row>
						<row>
							<cell>kîsipayiw</cell>
							<cell>kiːsɪpʌyiw</cell>
							<cell>[something] ends or terminates</cell>
						</row>
						<row>
							<cell>mâmitoneyihcikanihkân</cell>
							<cell>maːmɪtonejɪhtʃikanɪhkaːn</cell>
							<cell>computer; artificial brain</cell>
						</row>
						<row>
							<cell>masinatakan cikastepayicikanis </cell>
							<cell>mʌsɪnʌtʌgʌn tʃɪkʌsteːpajɪtʃikʌnɪs</cell>
							<cell>computer; box of shadows</cell>
						</row>
						<row>
							<cell>mesakwanipipon </cell>
							<cell>meːsʌkwʌnɪpɪpʊn</cell>
							<cell>every winter or every year</cell>
						</row>
						<row>
							<cell>mihcecis </cell>
							<cell>mɪhtʃeːtʃɪs</cell>
							<cell>several</cell>
						</row>
						<row>
							<cell>mihcet </cell>
							<cell>mɪhtʃeːt</cell>
							<cell>many</cell>
						</row>
						<row>
							<cell>mihcetinwa </cell>
							<cell>mɪhtʃeːtɪnwʌ</cell>
							<cell>a lot; numerous</cell>
						</row>
						<row>
							<cell>mînisiwat</cell>
							<cell>miːnɪsɪwʌt</cell>
							<cell>a bag used for berry picking</cell>
						</row>
						<row>
							<cell>minôs</cell>
							<cell>mɪnoːs</cell>
							<cell>a cat</cell>
						</row>
						<row>
							<cell>mistacimosis</cell>
							<cell>mɪstʌtʃɪmʊsɪs</cell>
							<cell>a pony</cell>
						</row>
						<row>
							<cell>mistahi </cell>
							<cell>mɪstʌhɪ</cell>
							<cell>[something] is big or large</cell>
						</row>
						<row>
							<cell>mistatim</cell>
							<cell>mɪstʌtɪm</cell>
							<cell>a horse; or a large dog</cell>
						</row>
						<row>
							<cell>miyâhkasike </cell>
							<cell>mijaːhkʌsɪgeː</cell>
							<cell>[s/he] smudges with sweetgrass</cell>
						</row>
						<row>
							<cell>nehiyaw</cell>
							<cell>neːhɪyʌw</cell>
							<cell>a Cree person; Cree culture</cell>
						</row>
						<row>
							<cell>nehiyawewak</cell>
							<cell>neːhɪyʌweːwʌk</cell>
							<cell>Cree people (plural)</cell>
						</row>
						<row>
							<cell>nehiyawewin</cell>
							<cell>neːhɪyʌweːwɪn</cell>
							<cell>Cree Language</cell>
						</row>
						<row>
							<cell>nîpin </cell>
							<cell>niːpɪn</cell>
							<cell>summer time</cell>
						</row>
						<row>
							<cell>nitâpân</cell>
							<cell>nɪtaːbaːn</cell>
							<cell>my great grandparent (grandmother)</cell>
						</row>
						<row>
							<cell>nohkompân </cell>
							<cell>nʊhkʊmbaːn</cell>
							<cell>grandmother + passed on</cell>
						</row>
						<row>
							<cell>pipohki </cell>
							<cell>pɪpʊhkɪ</cell>
							<cell>next winter</cell>
						</row>
						<row>
							<cell>pipon </cell>
							<cell>pɪpʊn</cell>
							<cell>winter</cell>
						</row>
						<row>
							<cell>pipona</cell>
							<cell>pɪpʊnʌ</cell>
							<cell>winters (plural)</cell>
						</row>
						<row>
							<cell>sîpihkomipit</cell>
							<cell>siːpɪhkʊmɪpɪt</cell>
							<cell>bluetooth</cell>
						</row>
						<row>
							<cell>sîpîsis </cell>
							<cell>siːpiːsɪs</cell>
							<cell>creek (small river)</cell>
						</row>
						<row>
							<cell>sîpiy </cell>
							<cell>siːpij</cell>
							<cell>river</cell>
						</row>
						<row>
							<cell>tisamân</cell>
							<cell>tɪsʊmaːn</cell>
							<cell>smudge</cell>
						</row>
						<row>
							<cell>waniyaw</cell>
							<cell>wʌnɪyʌw</cell>
							<cell>at random; at a random time</cell>
						</row>
						<row>
							<cell>wâpamew</cell>
							<cell>waːpʊmew</cell>
							<cell>[s/he] sees [her/him]</cell>
						</row>
						<row>
							<cell>wîsahkecâhk</cell>
							<cell>wiːsʌhkeːtʃaːhk</cell>
							<cell>cultural teacher and legendary figure in Nehiyaw culture</cell>
						</row>
					</table>
				</div>
			</div>
		</body>
		<back>
			<listBibl>
				<bibl xml:id="abdelbarr2009" label="Abd-El-Barr 2009">Abd-El-Barr, Mostafa. 2009.
						<title rend="quotes">Topological Network Design: A Survey.</title>
					<title rend="italic">Journal of Network and Computer Applications</title> 32
					(3): 501–9.</bibl>
				<bibl xml:id="abdelnournocera_etal2013"
					label="Abdelnour-Nocera, Clemmensen, and Masaaki 2013">Abdelnour-Nocera, José,
					Torkil Clemmensen, and Masaaki Kurosu. 2013. <title rend="quotes">Reframing HCI
						Through Local and Indigenous Perspectives.</title>
					<title rend="italic">International Journal of Human–Computer Interaction</title>
					29 (4): 201–4. https://doi.org/10.1080/10447318.2013.765759.</bibl>
				<bibl xml:id="absolon2010" label="Absolon 2010">Absolon, Kathy. 2010. <title
						rend="quotes">Indigenous Wholistic Theory: A Knowledge Set for
						Practice.</title>
					<title rend="italic">First Peoples Child &amp; Family Review</title> 5 (2):
					74–87. https://doi.org/10.7202/1068933ar.</bibl>
				<bibl xml:id="aikin2009" label="Aikin 2009">Aikin, Jim. 2009. <title rend="quotes"
						>The Inform 7 Handbook.</title>
					https://www.musicwords.net/if/I7Handbook8x11.pdf.</bibl>
				<bibl xml:id="ali2014" label="Ali 2014">Ali, Mustafa. 2014. <title rend="quotes"
						>Towards a Decolonial Computing.</title> In <title rend="italic">Ambiguous
						Technologies: Philosophical Issues, Practical Solutions, Human
						Nature</title>, 28–35. Lisbon, Portugal: International Society of Ethics and
					Information Technology.</bibl>
				<bibl xml:id="arawjo2020" label="Arawjo 2020">Arawjo, Ian. 2020. <title
						rend="quotes">To Write Code: The Cultural Fabrication of Programming
						Notation and Practice.</title> In <title rend="italic">CHI ’20: Proceedings
						of the 2020 CHI Conference on Human Factors in Computing Systems</title>,
					1–15. Honolulu, HI. https://doi.org/10.1145/3313831.3376731.</bibl>
				<bibl xml:id="ardley2014" label="Ardley 2014">Ardley, Sean. 2014. <title
						rend="quotes">Why Are Monospaced Typefaces Used for Programming? (Answer (1
						of 2)).</title>
					<title rend="italic">Quora</title>.
					https://www.quora.com/Why-are-monospaced-typefaces-used-for-programming/answer/Sean-Ardley.</bibl>
				<bibl xml:id="babaoglu_etal2006" label="Babaoglu et al 2006">Babaoglu, Ozalp,
					Geoffrey Canright, Andreas Deutsch, Gianni A Di Caro, Frederick Ducatelle, Luca
					M Gambardella, Niloy Ganguly, Márk Jelasity, Roberto Montemanni, and Alberto
					Montresor. 2006. <title rend="quotes">Design Patterns from Biology for
						Distributed Computing.</title>
					<title rend="italic">ACM Transactions on Autonomous and Adaptive Systems
						(TAAS)</title> 1 (1): 26–66.</bibl>
				<bibl xml:id="benenson2012" label="Benenson 2012">Benenson, Yaakov. 2012. <title
						rend="quotes">Biomolecular Computing Systems: Principles, Progress and
						Potential.</title>
					<title rend="italic">Nature Reviews Genetics</title> 13 (7): 455–68.</bibl>
				<bibl xml:id="cormier_etal2018" label="Cormier and Ray 2018">Cormier, Paul, and Lana
					Ray. 2018. <title rend="quotes">A Tale of Two Drums: Kinoo’amaadawaad Megwaa
						Doodamawaad – ‘They Are Learning with Each Other While They Are
						Doing.’</title> In <title rend="italic">Indigenous Research: Theories,
						Practices, and Relationships</title>, edited by Deborah McGregor, Jean-Paul
					Restoule, and Rochelle Johnston, 112–25. Toronto, Canada: Canadian Scholars’
					Press.</bibl>
				<bibl xml:id="dourish_etal2012" label="Dourish and Mainwaring 2012">Dourish, Paul,
					and Scott D Mainwaring. 2012. <title rend="quotes">Ubicomp’s Colonial
						Impulse.</title> In <title rend="italic">Proceedings of the 2012 ACM
						Conference on Ubiquitous Computing</title>, 133–42. Pittsburgh, PA:
					Association for Computing Machinery, New York, NY.</bibl>
				<bibl xml:id="garneau2018" label="Garneau 2018">Garneau, David. 2018. <title
						rend="quotes">Electric Beads: On Indigenous Digital Formalism.</title>
					<title rend="italic">Visual Anthropology Review</title> 34 (1): 77–86.</bibl>
				<bibl xml:id="gca1857" label="Gradual Civilization Act 1857">Gradual Civilization
					Act. 1857. <title rend="italic">An Act to Encourage the Gradual Civilization of
						the Indian Tribes in This Province, and to Amend the Laws Respecting
						Indians</title>.</bibl>
				<bibl xml:id="hasselstrom_etal2001" label="Hasselström and Åslund 2001"
					sortKey="Hasselstrom">Hasselström, Karl, and Jon Åslund. 2001. <title
						rend="quotes">The Shakespeare Programming Language.</title> 6/6/2018.
					http://shakespearelang.sourceforge.net/.</bibl>
				<bibl xml:id="heaven2013" label="Heaven 2013">Heaven, Douglas. 2013. <title
						rend="quotes">One Minute with...Ramsey Nasser.</title>
					<title rend="italic">New Scientist</title> 217 (2909): 03–03.</bibl>
				<bibl xml:id="iso2016" label="International Standards Organization 2016"
					>International Standards Organization. 2016. <title rend="quotes">ISO/IEC
						9995-9:2016 - Information Technology — Keyboard Layouts for Text and Office
						Systems — Part 9: Multi-Lingual, Multiscript Keyboard Layouts.</title> ISO.
					2016.
					https://www.iso.org/cms/render/live/en/sites/isoorg/contents/data/standard/05/43/54374.html.</bibl>
				<bibl xml:id="irani_etal2009" label="Irani and Dourish 2009">Irani, Lilly C, and
					Paul Dourish. 2009. <title rend="quotes">Postcolonial Interculturality.</title>
					In , 249–52.</bibl>
				<bibl xml:id="irani_etal2010" label="Irani et al 2010">Irani, Lilly, Janet Vertesi,
					Paul Dourish, Kavita Philip, and Rebecca E Grinter. 2010. <title rend="quotes"
						>Postcolonial Computing: A Lens on Design and Development.</title> In <title
						rend="italic">CHI ’10: Proceedings of the SIGCHI Conference on Human Factors
						in Computing Systems</title>, 1311–20. Atlanta, GA, USA: Association for
					Computing Machinery.</bibl>
				<bibl xml:id="king2022" label="King 2022">King, Kevin. 2022. <title rend="quotes"
						>Typotheque: Syllabics Typographic Guidelines and Local Typographic
						Preferences by Kevin King.</title>
					<title rend="italic">Typotheque</title> (blog). January 24, 2022.
					https://www.typotheque.com/articles/syllabics_typographic_guidelines.</bibl>
				<bibl xml:id="kleinrock_etal1980" label="Kleinrock and Kamoun 1980">Kleinrock,
					Leonard, and Farouk Kamoun. 1980. <title rend="quotes">Optimal Clustering
						Structures for Hierarchical Topological Design of Large Computer
						Networks.</title>
					<title rend="italic">Networks</title> 10 (3): 221–48.</bibl>
				<bibl xml:id="lewis_etal2018" label="Lewis et al 2018">Lewis, Jason Edward, Noelani
					Arista, Archer Pechawis, and Suzanne Kite. 2018. <title rend="quotes">Making Kin
						with the Machines.</title>
					<title rend="italic">Journal of Design and Science</title>.
					https://doi.org/10.21428/bfafd97b.</bibl>
				<bibl xml:id="lhirondelle2014" label="L’Hirondelle 2014">L’Hirondelle, Cheryl. 2014.
						<title rend="quotes">Codetalkers Recounting Signals of Survival.</title> In
						<title rend="italic">Coded Territories: Tracing Indigenous Pathways in New
						Media Art</title>, edited by Steven Loft and Kerry Swanson, 147–68. Calgary,
					AB: University of Calgary Press.</bibl>
				<bibl xml:id="madden_etal2013" label="Madden, Higgins, and Korteweg 2013">Madden,
					Brooke, Marc Higgins, and Lisa Korteweg. 2013. <title rend="quotes">‘Role Models
						Can’t Just Be on Posters’: Re/Membering Barriers to Indigenous Community
						Engagement.</title>
					<title rend="italic">Canadian Journal of Education</title> 36 (2):
					212–47.</bibl>
				<bibl xml:id="merritt_etal2011" label="Merritt and Bardzell">Merritt, Samantha, and
					Shaowen Bardzell. 2011. <title rend="quotes">Postcolonial Language and Culture
						Theory for HCI4D.</title> In <title rend="italic">CHI’11 Extended Abstracts
						on Human Factors in Computing Systems</title>, 1675–80.</bibl>
				<bibl xml:id="milloy2008" label="Milloy 2008">Milloy, John. 2008. <title
						rend="quotes">Indian Act Colonialism: A Century Of Dishonour,
						1869-1969.</title> Research Paper. Canada: National Centre for First Nations
					Governance.</bibl>
				<bibl xml:id="milloy2017" label="Milloy 2017">Milloy, John S. 2017. <title
						rend="italic">A National Crime: The Canadian Government and the Residential
						School System</title>. Vol. 11. Univ. of Manitoba Press.</bibl>
				<bibl xml:id="muzyka2018" label="Muzyka 2018">Muzyka, Kyle. 2018. <title
						rend="quotes">A Hawaiian Team’s Mission to Translate Programming Language to
						Their Native Language | CBC Unreserved Radio.</title> CBC Unreserved Radio.
					November 30, 2018.
					https://www.cbc.ca/radio/unreserved/indigenous-language-finding-new-ways-to-connect-with-culture-1.4923962/a-hawaiian-team-s-mission-to-translate-programming-language-to-their-native-language-1.4926124.</bibl>
				<bibl xml:id="nasser2012" label="Nasser 2012">Nasser, Ramsey. 2012. <title
						rend="quotes">قلب (‘Qalb’).</title> 2012.
					https://nas.sr/%D9%82%D9%84%D8%A8/.</bibl>
				<bibl xml:id="noori2011" label="Noori 2011">Noori, Margaret. 2011. <title
						rend="quotes">Waasechibiiwaabikoonsing Nd’anami’aami," Praying through a
						Wired Window": Using Technology to Teach Anishinaabemowin.</title>
					<title rend="italic">Studies in American Indian Literatures</title> 23 (2):
					1–23.</bibl>
				<bibl xml:id="norman_etal2015" label="Norman and Tognazzini 2015">Norman, Don, and
					Bruce Tognazzini. 2015. <title rend="quotes">How Apple Is Giving Design A Bad
						Name.</title>
					<title rend="italic">Fast Company</title> (blog). November 10, 2015.
					https://www.fastcompany.com/3053406/how-apple-is-giving-design-a-bad-name.</bibl>
				<bibl xml:id="noyes1983" label="Noyes 1983">Noyes, Jan. 1983. <title rend="quotes"
						>The QWERTY Keyboard: A Review.</title>
					<title rend="italic">International Journal of Man-Machine Studies</title> 18
					(3): 265–81.</bibl>
				<bibl xml:id="nugent2008" label="Nugent 2008">Nugent, Benjamin. 2008. <title
						rend="italic">American Nerd: The Story of My People</title>. Simon and
					Schuster.</bibl>
				<bibl xml:id="ogg2019" label="Ogg 2019">Ogg, Arden. 2019. <title rend="quotes"
						>Hippopotamus in Cree: Solomon Ratt (y-Dialect).</title>
					<title rend="italic">Cree Literacy Network</title> (blog). December 16, 2019.
					https://creeliteracy.org/2019/12/16/hippopotamus-in-cree-solomon-ratt-y-dialect/.</bibl>
				<bibl xml:id="okimasis_etal2008" label="Okimasis and Wolvengrey 2008">Okimasis,
					Jean, and Arok Wolvengrey. 2008. <title rend="italic">How to Spell It in Cree:
						The Standard Roman Orthography</title>. misāskwatōminihk (Saskatoon):
					Houghton Boston, miywāsin ink.</bibl>
				<bibl xml:id="ormondparker_etal2013" label="Ormond-Parker et al 2013">Ormond-Parker,
					Lyndon, Aaron David Samuel Corn, Kazuko Obata, and Sandy O’Sullivan. 2013.
						<title rend="italic">Information Technology and Indigenous
						Communities</title>. AIATSIS Research Publications Canberra.</bibl>
				<bibl xml:id="philip_etal2012" label="Philip, Irani, and Dourish 2012">Philip,
					Kavita, Lilly Irani, and Paul Dourish. 2012. <title rend="quotes">Postcolonial
						Computing: A Tactical Survey.</title>
					<title rend="italic">Science, Technology, &amp; Human Values</title> 37 (1):
					3–29.</bibl>
				<bibl xml:id="quinn2021" label="Quinn 2021">Quinn, Ruben. 2021. Intermediate ᓀᐦᐃᔭᐤ
					Language LessonsZoom Course.</bibl>
				<bibl xml:id="risam2018" label="Risam 2018">Risam, Roopika. 2018. <title
						rend="italic">New Digital Worlds: Postcolonial Digital Humanities in Theory,
						Praxis, and Pedagogy</title>. Evanston, Illinois, US: Northwestern
					University Press.</bibl>
				<bibl xml:id="shirt_etal2022" label="Shirt and Wellman 2022">Shirt, Marilyn, and
					Tina Wellman, eds. 2022. <title rend="italic">Tânisîsi Kâ-Ôsîtahk
						Pîkiskwêwinisa : Morphology Dictionary</title>. St. Paul, AB: University
					nuhelot’ine thaiyots’i nistameyimâkanak Blue Quills.</bibl>
				<bibl xml:id="thomas2005" label="Thomas 2005">Thomas, Robina Anne. 2005. <title
						rend="quotes">Honouring the Oral Traditions of My Ancestors through
						Storytelling.</title> In <title rend="italic">Research as Resistance:
						Critical, Indigenous and Anti-Oppressive Approaches</title>, edited by
					Leslie Brown and Susan Strega, 237–54. Toronto, ON: Canadian Scholars’
					Press/Women’s Press.</bibl>
				<bibl xml:id="travers1996" label="Travers 1996">Travers, Michael David. 1996. <title
						rend="quotes">Programming with Agents: New Metaphors for Thinking About
						Computation.</title> Doctor of Philosophy, Cambridge, MA: Massachusetts
					Institute of Technology.</bibl>
				<bibl xml:id="unicode2021" label="Unicode Inc. 2021">Unicode, Inc. 2021. <title
						rend="quotes">The Unicode Standard, Version 14.0.</title> Unicode, Inc.
					https://unicode.org/charts/PDF/U1400.pdf.</bibl>
				<bibl xml:id="vee2017" label="Vee 2017">Vee, Annette. 2017. <title rend="italic"
						>Coding Literacy: How Computer Programming Is Changing Writing</title>. Mit
					Press.</bibl>
				<bibl xml:id="venne1981" label="Venne 1981">Venne, Sharon. 1981. <title
						rend="quotes">Indian Acts and Amendments, 1868-1975.</title> An indexed
					collection. University of Saskatchewan Native Law Centre, Saskatoon.</bibl>
				<bibl xml:id="vizenor2008" label="Vizenor 2008">Vizenor, Gerald Robert. 2008. <title
						rend="italic">Survivance: Narratives of Native Presence</title>. U of
					Nebraska Press.</bibl>
				<bibl xml:id="warschauer1998" label="Warschauer 1998">Warschauer, Mark. 1998. <title
						rend="quotes">Technology and Indigenous Language Revitalization: Analyzing
						the Experience of Hawai’i.</title>
					<title rend="italic">Canadian Modern Language Review</title> 55 (1):
					139–59.</bibl>
				<bibl xml:id="wilson2008" label="Wilson 2008">Wilson, Shawn. 2008. <title
						rend="italic">Research Is Ceremony: Indigenous Research Methods</title>.
					Halifax, NS: Fernwood Publishing.</bibl>
				<bibl xml:id="wolfart1973" label="Wolfart 1973">Wolfart, H Christoph. 1973. <title
						rend="quotes">Plains Cree: A Grammatical Study.</title>
					<title rend="italic">Transactions of the American Philosophical Society</title>
					63 (5): 1–90.</bibl>
				<bibl xml:id="wolfart_etal1993" label="Wolfart and Ahenakew 1993">Wolfart, H.C., and
					Freda Ahenakew, eds. 1993. <title rend="italic">Kinêhiyâwiwininaw Nêhiyawêwin.
						The Cree Language Is Our Identity: The La Ronge Lectures of Sarah
						Whitecalf</title>. Winnipeg, MB, CA: University of Manitoba Press.</bibl>
				<bibl xml:id="worden_etal2011" label="Worden, Staszewski, and Hensman 2011">Worden,
					Keith, Wieslaw J Staszewski, and James J Hensman. 2011. <title rend="quotes"
						>Natural Computing for Mechanical Systems Research: A Tutorial
						Overview.</title>
					<title rend="italic">Mechanical Systems and Signal Processing</title> 25 (1):
					4–111.</bibl>
			</listBibl>

		</back>
	</text>
</TEI>
