<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?>
<?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:dhq="http://www.digitalhumanities.org/ns/dhq"
   xmlns:mml="http://www.w3.org/1998/Math/MathML">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <!--Author should supply the title and personal information-->
            <title type="article" xml:lang="en"><!--article title in English-->Relocating
               Complexity: The Programming Historian and Multilingual Static Site Generation</title>
            <!--Add a <title> with appropriate @xml:lang for articles in languages other than English-->
            <dhq:authorInfo>
               <!--Include a separate <dhq:authorInfo> element for each author-->
               <dhq:author_name>Matthew <dhq:family>Lincoln</dhq:family>
               </dhq:author_name>
               <dhq:affiliation>JSTOR Labs</dhq:affiliation>
               <email>mlincoln@andrew.cmu.edu</email>
               <dhq:bio>
                  <p>N/A</p>
               </dhq:bio>
            </dhq:authorInfo>
            <dhq:authorInfo>
               <!--Include a separate <dhq:authorInfo> element for each author-->
               <dhq:author_name>Jennifer <dhq:family>Isasi</dhq:family>
               </dhq:author_name>
               <dhq:affiliation>Pennsylvania State University</dhq:affiliation>
               <email>jenniferbibat@gmail.com</email>
               <dhq:bio>
                  <p>N/A</p>
               </dhq:bio>
            </dhq:authorInfo>
            <dhq:authorInfo>
               <!--Include a separate <dhq:authorInfo> element for each author-->
               <dhq:author_name>Sarah <dhq:family>Melton</dhq:family>
               </dhq:author_name>
               <dhq:affiliation>Boston College</dhq:affiliation>
               <email>sarah.melton@bc.edu</email>
               <dhq:bio>
                  <p>N/A</p>
               </dhq:bio>
            </dhq:authorInfo>
            <dhq:authorInfo>
               <!--Include a separate <dhq:authorInfo> element for each author-->
               <dhq:author_name>François Dominic <dhq:family>Laramée</dhq:family>
               </dhq:author_name>
               <dhq:affiliation>University of Ottawa and Université de Montréal</dhq:affiliation>
               <email>fdl@francoisdominiclaramee.com</email>
               <dhq:bio>
                  <p>N/A</p>
               </dhq:bio>
            </dhq:authorInfo>

         </titleStmt>
         <publicationStmt>
            <publisher>Alliance of Digital Humanities Organizations</publisher>
            <publisher>Association for Computers and the Humanities</publisher>
            <!--This information will be completed at publication-->
            <idno type="DHQarticle-id"><!--including leading zeroes: e.g. 000110-->000585</idno>
            <idno type="volume"
               ><!--volume number, with leading zeroes as needed to make 3 digits: e.g. 006-->016</idno>
            <idno type="issue"><!--issue number, without leading zeroes: e.g. 2-->2</idno>
            <date when="2022-06-25">2022 June 25</date>
            <dhq:articleType>article</dhq:articleType>
            <availability status="CC-BY-ND">
               <!--If using a different license from the default, choose one of the following:
                  CC-BY-ND (DHQ default):        
                  CC-BY:    
                  CC0:  -->
               <cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>
            </availability>
         </publicationStmt>
         <sourceDesc>
            <p>This is the source</p>
         </sourceDesc>
      </fileDesc>
      <encodingDesc>
         <classDecl>
            <taxonomy xml:id="dhq_keywords">
               <bibl>DHQ classification scheme; full list available at <ref
                     target="http://www.digitalhumanities.org/dhq/taxonomy.xml"
                     >http://www.digitalhumanities.org/dhq/taxonomy.xml</ref>
               </bibl>
            </taxonomy>
            <taxonomy xml:id="authorial_keywords">
               <bibl>Keywords supplied by author; no controlled vocabulary</bibl>
            </taxonomy>
         </classDecl>
      </encodingDesc>
      <profileDesc>
         <langUsage>
            <language ident="en" extent="original"/>
            <!--add <language> with appropriate @ident for any additional languages-->
         </langUsage>
         <textClass>
            <keywords scheme="#dhq_keywords">
               <!--Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors-->
               <list type="simple">
                  <item/>
               </list>
            </keywords>
            <keywords scheme="#authorial_keywords">
               <!--Authors may include one or more keywords of their choice-->
               <list type="simple">
                  <item/>
               </list>
            </keywords>
         </textClass>
      </profileDesc>
      <revisionDesc>
         <!--Each change should include @who and @when as well as a brief note on what was done.-->
         <change when="2022-08-02" who="BRG">fixed malformed and missing tags</change>
      </revisionDesc>
   </teiHeader>
   <text xml:lang="en" type="original">
      <front>
         <dhq:abstract>
            <!--Include a brief abstract of the article-->
            <p>In this case study, we show how the challenges of maintaining a sustainable
               static-site architecture for the <title rend="italic">Programming Historian</title>
               are deeply intertwined with the logistical challenges of expanding the original
               project into a multilingual set of publications. In our desire to democratize access
               to knowledge, we constantly encounter situations where easing the complexity of one
               workflow requires increasing the complexity of another, in turn relocating complexity
               (and the labor it entails) between different members of our project team.</p>
         </dhq:abstract>
         <dhq:teaser>
            <!--Include a brief teaser, no more than a phrase or a single sentence-->
            <p>In this case study, we show how the challenges of maintaining a sustainable
               static-site architecture for the <title rend="italic">Programming Historian</title>
               are deeply intertwined with the logistical challenges of expanding the original
               project into a multilingual set of publications.</p>
         </dhq:teaser>
      </front>
      <body>
         <div>
            <head>Introduction<note> Matthew Lincoln was the technical lead for <title rend="italic"
                     >PH</title> from 2017–2020. Jennifer Isasi has been a member of the technical team
                  and <title rend="italic">PH en español </title>editorial team since 2018. François
                  Dominic Laramée was a member of the <title rend="italic">PH en francais</title>
                  editorial team 2018–2020. Sarah Melton has been the managing editor of the English
                  editorial team of <title rend="italic">PH</title> since 2019.</note></head>


            <p>Like any technologists, practitioners embracing minimal computing principles must
               grapple with the changing purposes, audiences, scales, and functionalities of the
               project they are supporting. In this case study, we explore the challenges of
               maintaining a sustainable static-site architecture during the multilingual expansion
               of <title rend="italic">The Programming Historian (PH)</title>, an open-access publication of peer-reviewed tutorials on digital tools
               and workflows geared at humanities teachers and researchers. By elucidating the deep
               intertwining of the technical, logistical, and social challenges of moving from a
               monolingual to a multilingual publication, we hope to provide other digital project
               teams with a valuable perspective on the tradeoffs of static sites when the projects
               they support are rapidly growing in size and complexity.</p>
            <p>
               <title rend="italic">PH</title> started in 2008 as a series of open access tutorials
               on Python created by William J. Turkel and Alan MacEachern. The lessons were hosted
               by the Network in Canadian History &amp; Environment (NiCHE) on a WordPress site <ptr
                  target="#niche2009"/>. In 2012, the project expanded its editorial team and became
               an open-access, peer-reviewed scholarly journal of methodology for digital
               historians. In 2014, <title rend="italic">PH</title> migrated away from WordPress in favor of a Jekyll-based
               static site hosted on GitHub Pages <ptr target="#gibbs2015"/>. The project team made
               this decision based on the benefits promised by many static-site generators: fewer
               worries about security upgrades and hosting expenses; precise customizability for our
               editorial workflow; and preservable, version-controlled, plain text files for all of
               our peer-reviewed lessons. Since this migration, we have never:</p>
            <list type="ordered">
               <item>Run out of memory, processing power, or bandwidth;<note> Based on statistics
                     provided by Cloudflare, we served 315GB of data in the month of May 2020 alone,
                     which would have incurred significant annual costs if we were running <title
                        rend="italic">PH</title> through our own dedicated server rather than
                     relying on GitHub’s (presently) free content hosting. We wish to clearly
                     acknowledge this dependency on an outside company whose ties to the United
                     States’ Immigrations and Customs Enforcement give us cause for concern <ptr
                        target="#lecher2019"/>. We have the technical capability to shift our source
                     code, site hosting, and issue tracking to another platform if need be without
                     losing data, but we balance this possibility against the renewed learning curve
                     it would demand from our editors — a critical concern for us, as we discuss
                     below.</note>
               </item>
               <item>Worried about SQL injection or external hacking;</item>
               <item>Lost data from accidental deletion or hardware failure; or</item>
               <item>Been bound by the built-in data models provided by a platform such as Open
                  Journal Systems or Janeway.</item>
            </list>
            <p>At the time, with only one team of editors managing a single publication workflow,
               this minimalistic approach seemed an excellent solution for both technical
               flexibility as well as sustainability.</p>
            <p>But <title rend="italic">PH</title> has grown radically since then. Prompted by a
               discussion about the use of <title rend="italic">PH </title>in Colombia and Mexico
               and ad-hoc translations into Spanish, the <title rend="italic">PH</title> editorial
               team decided to extend the journal to a second language <ptr target="#ph246"/>. In
               late 2016, a group of three editors began work on <title rend="italic">PH en
                  español</title>, launching the site in March 2017. A year and a half later, a
               group of French-speaking editors did the same, launching <title rend="italic">PH en
                  français</title> in April 2019. A Portuguese editorial team launched <title
                  rend="italic">PH em português</title> in January 2021. </p>
            <p>Throughout the process of onboarding new editors from multiple backgrounds and
               publishing lessons in several languages, both originals and translations, the team
               came to discuss ways to better reach our global audience and enhance language
                  accessibility.<note> Presently, working on <title rend="italic">PH</title>
                  infrastructure requires that editors know English to navigate editorial team
                  discussions, translation workflows, and internal documentation. This barrier is
                  lower for peer-reviewers of originals, but it is still a challenge for reviewers
                  of translations.</note> These goals have relied on the malleable Jekyll-based site
               to create a more accessible journal, but have also tested the limits of both the
               technology as well as our team’s processes. We frame this work as an example of
                  <q>critical making,</q> defined by Matt Ratto as <quote rend="inline">connect[ing]
                  two modes of engagement with the world that are often held separate — critical
                  thinking, typically understood as conceptually and linguistically based, and
                  physical ‘making,’ goal-based material work</quote>
               <ptr target="#ratto2011" loc="253"/>. For<title rend="italic"> PH</title>, creating
               and maintaining a multilingual publication is an act of critical making, negotiating
               the complexities of language and the constraints of our infrastructure in both
               technology and labor. A simple question on additional metadata, a request for search
               capability, or a light-bulb moment when someone asks, <q>How are we going to note if
                  someone translates a translated lesson?</q> requires sociotechnical expertise in
               different levels of our publishing workflows and technical infrastructure from a team
               of volunteer humanists. </p>
            <p>In our desire to democratize access to knowledge, we constantly encounter situations
               where easing the complexity of one workflow requires increasing the complexity of
               another, in turn relocating complexity (and the labor it entails) to different
               members of our project team.</p>
         </div>
         <div>
            <head>Language Expansion</head>
            <p>Nowhere is the shifting of complexity between team members more obvious (or
               problematic) than when the project expands by adding a publication in a new language.
               Linguistic expansion is part and parcel of <title rend="italic">PH</title>’s core
               mission of opening access to learning across geographic and cultural boundaries <ptr
                  target="#sichani2019"/>
               <ptr target="#crymble2016"/>. However, new language teams face multiple challenges,
               both before and after they start publishing content. Here, we focus on the
               experiences of the French team, which was formed in early 2018. The Portuguese team,
               which was onboarded as we wrote this article, is likely to face similar issues,
               perhaps made more acute by the expansion of the project’s infrastructure over the
               past three years. Any additional teams joining the project in the future will meet
               similar obstacles.</p>
            <p>The first hurdle, which must be cleared before any publication in a new language can
               occur, consists of translating the project’s interface, documentation, and
               accumulated wisdom. This requires that the new language team assimilate this
               knowledge, along with the technical know-how necessary to navigate the <title
                  rend="italic">PH</title>’s underlying technology. In the case of the French team,
               this process took the better part of a year. If, as Alex Gil wrote, one of the
               precepts of minimal computing is to restrict ourselves to <quote rend="inline">what
                  we need,</quote> what new <title rend="italic">PH</title> language teams need has
               proven considerable indeed <ptr target="#gil2015"/>. Of course, some of the work,
               such as the translation of menus and author guidelines, would have been necessary
               regardless of the publishing platform. However, much of the rest — including
               self-training on the somewhat arcane procedures (e.g., how to write markdown, how to
               commit a change in GitHub, how to format metadata) — that must be followed to publish
               lessons, as well as translating these procedures into the new publication’s language for the
               benefit of future editors, is considerably more involved than it would be if the
               project used a standard Content Management System (CMS). Whereas most CMS software is
               built upon user interface concepts that have long been internalized, our procedure
               requires a fairly steep learning curve that often must be climbed several times
               before the procedure becomes comfortable. Some of the complexity of a CMS has thus
               been offloaded onto editors.</p>
            <p>Language expansion also has subtle implications for project maintenance <ptr
                  target="#smithies2019"/>. When content needs to be added or modified, either in the
               site’s common infrastructure or in a lesson that has been published in more than one
               language, two options are available: publish the update in all languages at the same
               time or update each language-specific site as new content becomes available. In the
               first case, the language team with the least available bandwidth constrains the speed
               of the update. In the second case, the project’s content becomes desynchronized, and
               a backlog of tasks accumulates for one or more of the language teams. Either way,
               smaller teams experience asymmetrically heavier pressure. Since its inception, the
               French team has rarely had more than two fully active members at the same time; the
               pressures of day-to-day maintenance thus fall on few people, which in turn slows down
               the production of new content. One consequence is that some translations have been
               held up for several months, for lack of an available editor to manage peer review. As
               the project expands to more languages, pressure will increase on these smaller teams
               to keep pace, and may disrupt the smooth running of the project.</p>
            <p>A further source of complexity resides in the dual pipelines required to publish
               translated and original lessons in each language. For example, recruiting peer
               reviewers to examine translations of tutorials into French has proven challenging
               because, while the work is relatively straightforward, there are no clear norms
               within academia to reward it. (Where does one even list peer-reviewing a translation
               on their CV?) Thus, the French team’s editors have had to perform more of this work
               than perhaps would be wise, further depleting the amount of bandwidth available for
               other tasks.</p>
            <p>Finally, while language expansion provides <title rend="italic">PH</title> with opportunities to further the cause
               of global outreach and help multiple digital humanities traditions cross-pollinate,
               it also increases labor complexity for the editors.<note> For a discussion of the
                  global dimensions of digital humanities, see Alex Gil and Élika Ortega. <title
                     rend="quotes">Global Outlooks in Digital Humanities,</title> <title
                     rend="italic">Doing Digital Humanities: Practice, Training, Research</title>,
                  edited by Constance Crompton, Richard J. Lane, and Ray Siemens (NY: Routledge, 2016), pp. 22-34.</note> Our hope
               is that authors will eventually produce original content in their own languages for
               all of our publications. To further this cross-pollination, however, we will also
               need to recruit translators able to adapt source material written in multiple
               languages and reviewers able to assess this work. It seems inevitable that, as we
               advance in this direction, we will push against the limits of what is adaptable,
               which will lead our publications to diverge. Finding the right balance will present
               interesting challenges.<note> To learn more about the balance between editorial and
                  translation work that puts the needs of the audience first while shaping the
                  editorial workflow, see <ptr target="#isasi2021"/> on types of translation in PH.
               </note>
            </p>
         </div>
         <div>
            <head>Code Complexity vs. Workflow Complexity</head>
            <p>It should be clear by now that <title rend="italic">PH</title> has an involved
               publication workflow. From our experience running such an intricate publication via
               Jekyll, we would argue that static sites cannot eliminate complexity from
               already-complex publications; they can only relocate it.</p>
            <p>The database systems behind conventional content management systems (CMS) such as
               Wordpress or Drupal do more than store and serve data. They enforce crucial logical
               constraints such as type checking (<title rend="italic">Is this date valid? Is this
                  field an integer rather than a text value?</title>); uniqueness (<title
                  rend="italic">Does another page already have this URL? Does a tag with this title
                  already exist?</title>); and foreign key relationships (<title rend="italic">This
                  article is written by two different authors — do they both have corresponding
                  entries in the <title rend="quotes">authors</title> table?</title>). In the case
               of multilingual sites, some CMSs don’t provide these options and, when they do, their
               functions are not necessarily straightforward or accessible. For example, one can
               only track progress of a translation if using the paid for WordPress Multilingual
               Plugin. With Drupal, the interface has to be translated manually on individual
               pages. And other options, such as .NET, require the user to be comfortable
               editing HTML and XML to work with RESX or resource files. </p>
            <p>Static site generator systems such as Jekyll offer a pared-down version of data
               manipulation. For every article in <title rend="italic">PH</title>, some data reside
               in the lesson file (the title; the abstract; the date of publication; the original
               review ticket URL; the names of the authors, editors, reviewers, and translators;
               content tags; and a reference key from translated lessons to the original lesson)
               while other data (author biographies) sit elsewhere. Without the querying features or
               the constraints supplied by an active database, the onus of maintaining metadata
               consistency in a straightforward static site falls to its editors.</p>
            <p>At <title rend="italic">PH</title> we sought technological opportunities to transfer
               some of this burden away from our editorial team and onto our codebase instead. Our
               technical team has poured labor into creating metadata validation systems that would
               have otherwise come built-in with a database-backed CMS. As our team, metadata
               richness, and pace of publication expanded, metadata errors increased in frequency.
               And with a larger team, it was less likely that any given editor would be completely
               familiar with how the data they entered was used by the site, making it more likely
               that multiple editors would need to be pulled into a troubleshooting
               conversation.</p>
            <p>To ameliorate this, in May 2017 we wrote the first version of an internal plugin
               where we could define the kinds of data validation that a normal database would have
               provided, such as validating required fields, dates, and foreign key relationships.
               Anyone building the site on their own computer will now see informative error
               messages describing which fields are missing or which names can’t be found in the
               data file. With this plugin, we also implemented dead link checking to review all our
               pages for internal and external links that no longer resolve, alerting our editors to
               update them or to replace them with links from the Internet Archive’s Wayback Machine
               if available <ptr target="#lincoln2017"/>.</p>
            <p>Yet running this plugin means the editor needs to be able to build the Jekyll site on
               their own computer. This is a requirement we gave up on long ago, relying on most
               editors to use GitHub’s code editing interface and using GitHub Pages to actually
               build and deploy the site. To run this validation, we configured an external
               continuous integration service: a separate server that would test metadata validity
               every time an editor proposed a new change to the site and report back any errors in
               a relatively human-readable format to our editorial workflow system in GitHub’s pull
               requests. As a result, our minimal publication was no longer all that minimal.</p>
            <p>At each step of this process, we opted for increasing the amount of underlying
               complexity in the site template code, processing code, and in the number of back-end
               deployment steps. We did this to reduce the cognitive load on and demand for
               technical competencies from our editors. They now do not need to memorize all
               required data fields and do not need to be able to run Jekyll themselves but can just
               read the reports from our cloud-based testing system. </p>
            <p>We have repeated this complexity relocation several times, particularly in automating
               the cross-linking of different pages of the same language as much as possible. Adding
               hard links between all translations of every single page or lesson would require
               constant vigilance as pages are updated and new translations published. Additionally,
               the number of links would grow exponentially as we bring on new language teams. To
               avoid asking editors to do this grueling work, we instead relied on the affordances
               of Jekyll and its templating language, Liquid, to construct virtually all the links
               between our lesson translations.</p>
            <p>While this relocation saves a large amount of editor time, it significantly increases
               the complexity of our site’s source code <ptr target="#lincoln2020"/>. And any
               increase in our code complexity means a concomitant increase, however slight, in the
               cognitive load and work of the technical team in charge of maintaining and extending
                  <title rend="italic">PH</title>’s online platform. This new code was complex
               enough to require its own dedicated tutorial page. And even with that documentation,
               changes to the way we render translation links is a delicate job indeed, requiring
               skilled oversight from our technical editors.<note> See, for example, <ref
                     target="https://github.com/programminghistorian/jekyll/pull/1798">in this
                     ticket</ref> one can read
                  
                 the amount
                     of back-and-forth required for a deceptively simple change in the way
                  that we display links from one lesson to its other language versions.
               </note>
            </p>
            <p>Every choice to displace the labor away from our lesson editors onto our code base
               thus displaces further cognitive load onto our technical team in charge of
               maintaining every part of <title rend="italic">PH</title>’s technical infrastructure. This raises serious
               questions about sustaining the ongoing labor of the project. It forces us to more
               carefully consider every new feature request that comes from our larger team,
               weighing the potential advantages against the time and difficulty needed to implement
               it. As our publications continue to expand, we have an opportunity to refocus the
               energy of our entire project team onto the essentials of our publications,
               concentrating on managing the inevitable but critical logistical complexity of
               multilingual translation, while forgoing new technical features that would merely be
               nice to have.</p>
         </div>
         <div>
            <head>Conclusion</head>
            <p>Knowing what we know now, would the <title rend="italic">PH</title> project team
               still choose to publish using a static site architecture? For all the challenges that
               we have laid out in this case study, we don’t intend to warn against static sites
               altogether. Free from the task of monitoring the basics of a database-backed site,
               our technical team has instead been able to spend time on customizing our lessons’
               display and metadata to fit our exact needs and building out services such as
               publication metadata registration and DOIs, all while ensuring our publication record
               is carefully tracked and preserved in plain text. These benefits are real. But we do
               want to draw attention to the careful (and not-so-careful) choices we have made about
               how to distribute the labor of editing and maintaining our publication.</p>
            <p>In response to the stress of increasing sociotechnical complexity, the <title
                  rend="italic">PH</title> project team has pursued social changes to ensure that
               the labor required by this complexity is understood by the entire team. Among these
               changes have been formalizing sub-teams of the <title rend="italic">PH</title> to more clearly delineate roles and
               responsibilities; articulating a workflow and communication plan for managing bug
               fixes and new feature requests so that the technical experts on the project team are
               able to communicate their workload and reasons for pursuing (or not) suggested
               changes; and establishing team roles specifically for onboarding new editors and new
               language teams to help address the barriers to joining a new publication.</p>
            <p>There are no simple social or technical solutions for publications as complex as
                  <title rend="italic">PH</title>, and the choice of a static architecture still
               presents tradeoffs with real consequences for the sustainability of any project. We
               hope this case study highlights the nature of those choices, and helps other digital
               publication teams consider where (and on whom) the burden of managing complexity
               falls in their own projects.</p>
         </div>


      </body>
      <back>
         <listBibl>
            <bibl xml:id="crymble2016" label="Crymble 2016"> Crymble, Adam. <title rend="quotes"
                  >Identifying and Removing Gender Barriers in Open Learning Communities: <title
                     rend="italic">The Programming Historian,</title></title> <title rend="italic"
                  >Blended Learning in Practice</title> (2016): 49-60, <ref
                  target="http://researchprofiles.herts.ac.uk/portal/files/10476604/Blip_2016_Autumn_2016_Final_Autumn_2016.pdf"
                  >https://researchprofiles.herts.ac.uk/portal/files/10476604/Blip_2016_Autumn_2016_Final_Autumn_2016.pdf</ref>.</bibl>
               <bibl><title rend="quotes">Multilingual Guide,</title><title rend="italic"> Drupal
                  Documentation</title>. Available from: <ref
                  target="https://www.drupal.org/docs/multilingual-guide"
                  >https://www.drupal.org/docs/multilingual-guide</ref>. Date accessed: August 25,
               2021.</bibl>
            <bibl xml:id="gibbs2015" label="Gibbs 2015"> Gibbs, Fred. <title rend="quotes">Editorial
                  Sustainability and Open Peer Review at <title rend="italic">Programming
                     Historian,</title></title> <title rend="italic">DH Commons</title>, 1 (2015).
                  <ref
                  target="https://web.archive.org/web/20180713014622/http://dhcommons.org/journal/issue-1/editorial-sustainability-and-open-peer-review-programming-historian"
                  >https://web.archive.org/web/20180713014622/http://dhcommons.org/journal/issue-1/editorial-sustainability-and-open-peer-review-programming-historian.</ref>
               </bibl>
            <bibl xml:id="gil2015" label="Gil 2015"> Gil, Alex. <title rend="quotes">The User, the
                  Learner and the Machines We Make,</title> <title rend="italic">Minimal Computing: A Working Group of GO::DH</title>, May 21, 2015.<ref
                  target="https://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/"
                  >https://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/</ref>.</bibl>
            <bibl xml:id="isasi2021" label="Isasi and Rojas Castro 2021"> Isasi, Jennifer and Antonio Rojas
               Castro. <title rend="quotes">¿Sin equivalencia? Una reflexión sobre la traducción al
                  español de recursos educativos abiertos.</title>
               <title rend="italic">Hispania</title> vol. 104.4 (December 2021). <ref target="https://doi.org/10.1353/hpn.2021.0130.">https://doi.org/10.1353/hpn.2021.0130</ref>.</bibl>
            <bibl xml:id="lecher2019" label="Lecher 2019"> Lecher, Colin. <title rend="quotes"
                  >GitHub Will Keep Selling Software to ICE, Leaked Email Says.</title>
               <title rend="italic">The Verge</title>, October 9, 2019.
               <ref
                  target="https://www.theverge.com/2019/10/9/20906213/github-ice-microsoft-software-email-contract-immigration-nonprofit-donation"
                  >https://www.theverge.com/2019/10/9/20906213/github-ice-microsoft-software-email-contract-immigration-nonprofit-donation</ref>.</bibl>
            <bibl xml:id="lincoln2017" label="Lincoln 2017"> Lincoln, Matthew. <title rend="quotes"
                  >Infrastructure for Collaboration: Catching Dead Links And Errors,</title>
               <title rend="italic">The Programming Historian Blog</title>, July 31, 2017. <ref
                  target="https://programminghistorian.org/posts/infrastructure-at-ph"
                  >https://programminghistorian.org/posts/infrastructure-at-ph</ref>.</bibl>
            <bibl xml:id="lincoln2020" label="Lincoln 2020"> Lincoln, Matthew. <title rend="quotes"
                  >Multilingual Jekyll: How <title rend="italic">The Programming Historian</title>
                  Does That,</title> (personal blog) March 1, 2020. <ref
                  target="https://matthewlincoln.net/2020/03/01/multilingual-jekyll.html"
                  >https://matthewlincoln.net/2020/03/01/multilingual-jekyll.html</ref>.</bibl>
               <bibl><title rend="quotes">Localization in .NET,</title><title rend="italic"> Microsoft
                  Docs</title>. Available from: <ref
                  target="https://docs.microsoft.com/en-us/dotnet/core/extensions/localization"
                  >https://docs.microsoft.com/en-us/dotnet/core/extensions/localization</ref>. Date
               accessed: August 25, 2021.</bibl>
            <bibl xml:id="niche2009" label="NiCHE 2009">
               <title rend="quotes">The Programming Historian,</title>
               <title rend="italic">Network in Canadian History &amp; Environment</title>. Accessed April 10, 2022. <ref
                  target="http://web.archive.org/web/20091211210942/http://niche-canada.org/programming-historian"
                  >http://web.archive.org/web/20091211210942/http://niche-canada.org/programming-historian</ref>.</bibl>
            <bibl xml:id="ph246" label="PH Issue 246">
               <title rend="quotes">Spanish translation - Issue #246,</title>
               <title rend="italic">Programming Historian GitHub Repository</title>. Accessed April 10, 2022.
                  <ref target="https://github.com/programminghistorian/jekyll/issues/246"
                  >https://github.com/programminghistorian/jekyll/issues/246</ref>.</bibl>
            <bibl xml:id="ratto2011" label="Ratto 2011"> Ratto, Matt. <title rend="quotes">Critical
                  Making: Conceptual and Material Studies in Technology and Social Life,</title>
               <title rend="italic">The Information Society: An International Journal</title>, vol. 27.4
               (2011): 252-260. <ref target="https://doi.org/10.1080/01972243.2011.583819"
                  >https://doi.org/10.1080/01972243.2011.583819</ref>.</bibl>
            <bibl xml:id="sichani2019" label="Sichani et al. 2019"> Sichani, Anna-Maria, James
               Baker, Maria José Afanador Llach and Brandon Walsh. <title rend="quotes">Diversity
                  and Inclusion in Digital Scholarship and Pedagogy: The Case of The Programming
                  Historian</title>, <title rend="italic">Insights</title> (2019). <ref
                  target="https://doi.org/10.1629/uksg.465"
               >https://doi.org/10.1629/uksg.465</ref>.</bibl>
            <bibl xml:id="smithies2019" label="Smithies et al. 2019"> Smithies, James, Carina
               Westling, Anna-Maria Sichani, Pam Mellen and Arianna Ciula. <title rend="quotes"
                  >Managing 100 Digital Humanities Projects: Digital Scholarship &amp; Archiving in
                  King’s Digital Lab,</title> <title rend="italic">Digital Humanities
                  Quarterly</title>, vol. 13.1 (2019). <ref
                  target="http://www.digitalhumanities.org/dhq/vol/13/1/000411/000411.html"
                  >https://www.digitalhumanities.org/dhq/vol/13/1/000411/000411.html</ref>.</bibl>
         </listBibl>
      </back>
   </text>
</TEI>
