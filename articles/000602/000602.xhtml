<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>[PREVIEW] DHQ: Digital Humanities Quarterly: </title>
      <link href="../../common/css/dhq.css" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_screen.css" media="screen" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_print.css" media="print" type="text/css" rel="stylesheet" />
      <style type="text/css">
        #mainContent {
          float: none;
          padding-top: 2em;
          padding-left: 4em;
          padding-right: 4em;
          margin-left: 225px;
           
        }</style>
   </head>
   <body>
      <div id="mainContent">
         <div class="DHQarticle">
            <div id="pubInfo">Preview<br />Volume 016 Number 1</div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            
            <div class="DHQheader">
               
               
               
               
               <h1 class="articleTitle lang en">Tesserae Intertext
                  Service</h1>
               
               
               <div class="author"><span style="color: grey">Nozomu Okuda
                     </span> &lt;<a href="mailto:nozomuok_at_buffalo_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('nozomuok_at_buffalo_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('nozomuok_at_buffalo_dot_edu'); return false;">nozomuok_at_buffalo_dot_edu</a>&gt;, SUNY University at Buffalo, Department of Classics</div>
               
               <div class="author"><span style="color: grey">Jeffery Kinnison
                     </span> &lt;<a href="mailto:jkinniso_at_nd_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('jkinniso_at_nd_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('jkinniso_at_nd_dot_edu'); return false;">jkinniso_at_nd_dot_edu</a>&gt;, University of Notre Dame, Department of Computer Science and Engineering</div>
               
               <div class="author"><span style="color: grey">Patrick Burns
                     </span> &lt;<a href="mailto:Patrick_dot_Burns_at_austin_dot_utexas_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('Patrick_dot_Burns_at_austin_dot_utexas_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('Patrick_dot_Burns_at_austin_dot_utexas_dot_edu'); return false;">Patrick_dot_Burns_at_austin_dot_utexas_dot_edu</a>&gt;, University of Texas at Austin, Department of Classics</div>
               
               <div class="author"><span style="color: grey">Neil Coffee
                     </span> &lt;<a href="mailto:ncoffee_at_buffalo_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('ncoffee_at_buffalo_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('ncoffee_at_buffalo_dot_edu'); return false;">ncoffee_at_buffalo_dot_edu</a>&gt;, SUNY University at Buffalo, Department of Classics</div>
               
               <div class="author"><span style="color: grey">Walter Scheirer
                     </span> &lt;<a href="mailto:walter_dot_scheirer_at_nd_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('walter_dot_scheirer_at_nd_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('walter_dot_scheirer_at_nd_dot_edu'); return false;">walter_dot_scheirer_at_nd_dot_edu</a>&gt;, University of Notre Dame, Department of Computer Science and Engineering</div>
               
               
               
               
               
               
               
               <span class="Z3988" title="url_ver=Z39.88-2004&amp;ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rfr_id=info%3Asid%2Fzotero.org%3A2&amp;rft.genre=article&amp;rft.atitle=Tesserae%20Intertext%20Service&amp;rft.jtitle=Digital%20Humanities%20Quarterly&amp;rft.stitle=DHQ&amp;rft.issn=1938-4122&amp;rft.date=&amp;rft.volume=016&amp;rft.issue=1&amp;rft.aulast=Okuda&amp;rft.aufirst=Nozomu&amp;rft.au=Nozomu%20Okuda&amp;rft.au=Jeffery%20Kinnison&amp;rft.au=Patrick%20Burns&amp;rft.au=Neil%20Coffee&amp;rft.au=Walter%20Scheirer"> </span></div>
            
            <div id="DHQtext">
               
               
               <div id="abstract">
                  <h2>Abstract</h2>
                  
                  
                  <p>The Tesserae Intertext Service Application Programming Interface (TIS-API) enhances
                     the machine-accessibility of the intertext discovery capabilities of the Tesserae
                     software. Instead of requiring inputs through a human-accessible webpage, the TIS-API
                     accepts inputs according to a web development standard. Two case studies demonstrate
                     the contributions of the TIS-API to computer-assisted literary criticism,
                     particularly in increased software development and maintenance flexibility as well
                     as
                     in easier integration of Tesserae software into research workflows. Those interested
                     in integrating the TIS-API into their digital projects can find documentation at <a href="https://tesserae.caset.buffalo.edu/docs/api/" onclick="window.open('https://tesserae.caset.buffalo.edu/docs/api/'); return false" class="ref">https://tesserae.caset.buffalo.edu/docs/api/</a>. For exact implementation
                     details, the source code is available at <a href="https://github.com/tesserae/apitess" onclick="window.open('https://github.com/tesserae/apitess'); return false" class="ref">https://github.com/tesserae/apitess</a>.</p>
                  </div>
               
               
               
               
               <div class="div div0">
                  
                  <h1 class="head">Introduction</h1>
                  
                  <div class="counter"><a href="#p1">1</a></div>
                  <div class="ptext" id="p1">The term “intertext” is used to name a passage of text that gives evidence of one author
                     using another author’s words. Scholarly consensus indicates that intertexts exist
                     ([<a class="ref" href="#juvan2008">Juvan 2008</a>] [<a class="ref" href="#allen2011">Allen 2011</a>] for Latin literature, see [<a class="ref" href="#edmunds2001">Edmunds 2001</a>] [<a class="ref" href="#coffee2012a">Coffee 2012a</a>] for
                     Greek literature, see [<a class="ref" href="#berti2016">Berti 2016</a>]). While there is great variation in the motivation for
                     the use of an intertext, perhaps the reuse signals an author’s erudition or enhances
                     the
                     effect of an expression. For example, when Vergil in his epic <cite class="title italic">Aeneid</cite> describes the sound
                     of a horse galloping across the fields:</div>
                  
                  <blockquote>
                     <div class="ptext">quadrupedante putrem <span class="hi bold">sonitu quatit ungula</span> campum (Aeneid 8.596).</div>
                     
                     <div class="ptext">The horses’ hooves shake the soft-soiled plain with four-footed thunder.</div>
                  </blockquote>
                  
                  <div class="counter"><a href="#p2">2</a></div>
                  <div class="ptext" id="p2">He is adapting a line from his epic predecessor Ennius:</div>
                  
                  <blockquote>
                     <div class="ptext">. . . summo <span class="hi bold">sonitu quatit ungula</span> terram. (Ennius Annals 8.264)</div>
                     
                     <div class="ptext">The horses’ hooves shake the earth with great thunder.</div>
                  </blockquote>
                  
                  <div class="counter"><a href="#p3">3</a></div>
                  <div class="ptext" id="p3">With this recollection, Vergil is reusing available poetic materials, demonstrating
                     familiarity with his predecessor Ennius, and inviting the reader to compare the parallel
                     passages.</div>
                  
                  <div class="counter"><a href="#p4">4</a></div>
                  <div class="ptext" id="p4">Various attempts have been made at computer-assisted intertext discovery ([<a class="ref" href="#lee2007">Lee 2007</a>], [<a class="ref" href="#mastandrea2011">Mastandrea 2011</a>], [<a class="ref" href="#buchler2013">Büchler 2013</a>], [<a class="ref" href="#chaudhurri2015">Chaudhuri 2015</a>])<a class="noteRef" href="#d4e326">[1]</a>, but none have made a conscious effort to standardize
                     machine-accessibility of the intertext discovery process and results. This paper
                     presents the Tesserae Intertext Service Application Programming Interface (TIS-API),
                     which specifies the rules of machine-accessibility for the intertext discovery tool
                     known as “Tesserae”.</div>
                  
                  <div class="counter"><a href="#p5">5</a></div>
                  <div class="ptext" id="p5">We argue that machine-accessibility to Tesserae’s capabilities, as provided by the
                     TIS-API, is an enhancement to the existing Tesserae software. We first demonstrate
                     that
                     the TIS-API does, in fact, make Tesserae’s capabilities machine-accessible by showing
                     how the TIS-API is designed on standard principles in the web development community,
                     and
                     by walking through an example of how the TIS-API can be used to conduct a Tesserae
                     search in a machine-accessible way. Two case studies further explore how the TIS-API
                     enhances the Tesserae software. The first case study demonstrates how the TIS-API
                     aids
                     collaboration among members of the Tesserae project team, particularly in the
                     implementation of the new Tesserae website interface. The second case study demonstrates
                     how someone outside of the Tesserae project team sees value in the TIS-API for making
                     the software easier to integrate into research workflows that aid reproducibility
                     in
                     literary criticism research.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Tesserae</h1>
                  
                  <div class="counter"><a href="#p6">6</a></div>
                  <div class="ptext" id="p6">The Tesserae Project develops software for discovering intertexts, with particular
                     focus
                     on the intertexts that appear in ancient Greek and Latin literature [<a class="ref" href="#coffee2012b">Coffee 2012b</a>]. The
                     project’s main tool, called Tesserae (<a href="https://tesserae.caset.buffalo.edu/" onclick="window.open('https://tesserae.caset.buffalo.edu/'); return false" class="ref">https://tesserae.caset.buffalo.edu/</a>), accomplishes this by analyzing and
                     comparing two texts for regions of word reuse.</div>
                  
                  <div class="counter"><a href="#p7">7</a></div>
                  <div class="ptext" id="p7">For example, in order to find intertexts between Vergil’s <cite class="title italic">Aeneid</cite> and Lucan’s Bellum
                     Civile, Tesserae goes through both works line-by-line to find where pairs of words
                     occur
                     in lines from both works. Because the <cite class="title italic">Aeneid</cite> precedes the Bellum Civile in publication,
                     we can assume that the<cite class="title italic">Aeneid</cite>served as a source text from which the later poet could
                     draw upon for poetic raw material. Accordingly, the results from this Tesserae search
                     can help us find places where Lucan may have borrowed words from Vergil (see
                     [<a class="ref" href="#coffee2012b">Coffee 2012b</a>] for examples).</div>
                  
                  <div class="counter"><a href="#p8">8</a></div>
                  <div class="ptext" id="p8">Given the highly inflected nature of both ancient Greek and Latin, Tesserae also allows
                     for matching by stem. This allows for finding examples of Lucan reusing Vergil’s words
                     in different grammatical and morphological forms. It is also useful to exclude common
                     words, that is stopwords, from Tesserae searches, on the grounds that the reuse of
                     common words signals not so much Vergil’s influence on Lucan as much as the common
                     language available to the poets in composing their respective works. In summary, when
                     Tesserae is given (1) two texts to compare, (2) a manner in which to compare the words
                     of the texts (i.e., by exact word match or by stem), and (3) a list of stopwords to
                     ignore, instances of text reuse can be found, which in turn can serve as evidence
                     of
                     intertexts.</div>
                  
                  <div class="counter"><a href="#p9">9</a></div>
                  <div class="ptext" id="p9">Originally conceived of as a command line tool, the advent of the Tesserae website
                     interface in 2009 (<a href="https://tesseraev3.caset.buffalo.edu/" onclick="window.open('https://tesseraev3.caset.buffalo.edu/'); return false" class="ref">https://tesseraev3.caset.buffalo.edu/</a>) made the delivery of its intertext
                     discovery capabilities much more human-accessible [<a class="ref" href="#coffee2012b">Coffee 2012b</a>]. However, this same
                     interface made machine-accessibility difficult for two main reasons. First, the
                     submission of Tesserae searches relied on user input via web forms. Second, the results
                     of the Tesserae searches were returned as an HTML webpage. While these two reasons
                     did
                     not make the Tesserae results impossible to access automatically, they did present
                     difficulties with the automatic submission of search queries and the parsing of results
                     because there were no guarantees that the input forms or the results webpage would
                     remain unchanged. Any tools built on the Tesserae site looking and performing in exactly
                     one way would most likely fail in the face of website updates that changed the input
                     forms or the layout of the search results. The lack of a machine-accessible design
                     created a situation in which Tesserae could be difficult to integrate with other digital
                     projects, short of installing and hosting a standalone instance of Tesserae.</div>
                  
                  <div class="counter"><a href="#p10">10</a></div>
                  <div class="ptext" id="p10">The TIS-API eases the burden of integrating Tesserae’s intertext discovery capabilities
                     into other projects by permitting queries to Tesserae’s database of texts, submission
                     of
                     Tesserae search requests, and retrieval of search results — all in a machine-accessible
                     way. The TIS-API was designed, developed, and deployed at the SUNY University at
                     Buffalo, in collaboration with developers at the University of Notre Dame, where backend
                     libraries on which the TIS-API relies were developed. The University of Notre Dame
                     also
                     developed a web frontend powered by the TIS-API, demonstrating one instance in which
                     the
                     TIS-API eased the burden of integrating Tesserae’s intertext discovery capabilities
                     into
                     new software. As an important perspective from outside of the Tesserae Project, a
                     researcher at the Quantitative Criticism Lab (University of Texas at Austin) has tested
                     and commented on the TIS-API.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">TIS-API Design</h1>
                  
                  <div class="counter"><a href="#p11">11</a></div>
                  <div class="ptext" id="p11">Following standard practice for machine-accessible communication across the Internet,
                     the TIS-API was designed according to the five REpresentational State Transfer (REST)
                     principles [<a class="ref" href="#fielding2000">Fielding 2000</a>], [<a class="ref" href="#fielding2017">Fielding 2017</a>]. Since the basic rules for communication over
                     the Internet are already defined by the HyperText Transfer Protocol (HTTP), the five
                     REST principles provide further guidelines on how to use HTTP for effective
                     machine-to-machine communication.</div>
                  
                  <div class="counter"><a href="#p12">12</a></div>
                  <div class="ptext" id="p12">The fundamental assumption of the five REST principles is that the only thing a machine
                     can request from another machine is a resource (Figure 1).</div>
                  
                  
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure1.png" rel="external"><img src="resources/images/figure1.png" style="" alt="An image of a laptop and a file with arrows pointing from one to the other" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 1. </div>Diagram of the fundamental communication pattern in REST. The machine on the left,
                        known
                        as the “client,” makes a request for a resource. The machine on the right, called the
                        “server”, responds to the client’s request. The language used between the computers is
                        known as HTTP.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p13">13</a></div>
                  <div class="ptext" id="p13">In the original
                     vision of the five REST principles, a resource typically took the form of a webpage
                     or
                     some multimedia asset, like an image. For Tesserae’s intertextual discoveries, one
                     resource would be the discoveries themselves — the results from a Tesserae search.
                     Other
                     resources, such as text information and search options, aid in the production of those
                     discoveries. </div>
                  
                  <div class="counter"><a href="#p14">14</a></div>
                  <div class="ptext" id="p14">Starting from these basic assumptions about resources, the first REST principle is
                     to
                     have a name for every resource (Figure 2). </div>
                  
                  
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure2.png" rel="external"><img src="resources/images/figure2.png" style="height: 400px;" alt="An image of a file" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 2. </div>First
                        REST principle: every resource that a server makes available must have a name. One
                        resource that the TIS-API makes available is the catalog of texts that Tesserae has
                        access to, which can be accessed by the name “/texts/”. Furthermore, metadata for each text
                        in the catalog can also be requested. Therefore, the TIS-API assigns a name to each
                        resource. In the example figure, the name “0” is associated with <cite class="title italic">Aeneid</cite>,
                        the name “1” is associated with <cite class="title italic">Bellum Civile</cite>,
                        and so forth. Note that these example names are not the ones used in the actual deployment
                        currently running through the Tesserae project.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p15">15</a></div>
                  <div class="ptext" id="p15">This allows one machine to make a
                     request on a specific resource from another machine. For example, the name 
                     <a href="http://www.buffalo.edu/" onclick="window.open('http://www.buffalo.edu/'); return false" class="ref">http://www.buffalo.edu/</a> refers to the resource that is the main web page for the
                     University at Buffalo. The TIS-API specifies naming conventions for the resources
                     necessary to carry out Tesserae searches. For example, the naming conventions require
                     that “/texts/” be part of the name for resources referring to texts available in a
                     Tesserae database. More examples of names and the TIS-API naming conventions will
                     be
                     shown later in the paper.</div> 
                  
                  <div class="counter"><a href="#p16">16</a></div>
                  <div class="ptext" id="p16">The second REST principle is that the way one specific request behaves for one resource
                     is similar to the behavior of the same request on a different resource (Figure 3).</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure3.png" rel="external"><img src="resources/images/figure3.png" style="" alt="Two images of a laptop and a file with arrows pointing from one to the other" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 3. </div>Second REST principle: requests should behave similarly across resources. In this
                        example, the client has requested a resource named “/texts/a”. In response, the server
                        provides information on “a”. When the client requests for a resource named “/texts/b”,
                        the server responds in a similar fashion, except that it provides information on “b”
                        instead of on “a”.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p17">17</a></div>
                  <div class="ptext" id="p17">Within the rules of HTTP, there are various requests that can be made.
                     One common request is GET, which requests retrieval of the resource. Going back to
                     the
                     University at Buffalo main web page example, a computer requesting a GET for
                     <a href="http://www.buffalo.edu/" onclick="window.open('http://www.buffalo.edu/'); return false" class="ref">http://www.buffalo.edu/</a> is asking another computer to retrieve the University at
                     Buffalo main webpage. The TIS-API specifies that requesting a GET for
                     “&lt;webhost&gt;/texts/” (where “&lt;webhost&gt;” is replaced with the URL referring to
                     a server on which the TIS-API is installed) will retrieve information about the texts
                     available in a Tesserae database.</div>
                  
                  <div class="counter"><a href="#p18">18</a></div>
                  <div class="ptext" id="p18">The third REST principle is that modification of a resource is mediated through
                     instructions, which are called representations (Figure 4).</div>
                  
                  
                  
                  
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure4.png" rel="external"><img src="resources/images/figure4.png" style="" alt="an image of a laptop and a file with arrows pointing from one to the other" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 4. </div>Third REST principle: modifications to a resource are mediated through instructions,
                        known as a representation. When a client requests that a Tesserae search be run, the
                        TIS-API modifies the “parallels” resource by appending newly found intertexts. What
                        intertexts should be added to “parallels” is determined by the representation that
                        the
                        client sent (shown as the blue icon), which contains instructions specifying how the
                        search is to be run.</div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p19">19</a></div>
                  <div class="ptext" id="p19">For the
                     TIS-API, this principle is highlighted particularly in the way Tesserae searches are
                     submitted. To submit a Tesserae search, a machine must request a POST (like GET, POST
                     is
                     one of the requests that can be made through HTTP) on the “&lt;webhost&gt;/parallels/”
                     resource and provide Tesserae search options in a particular format. The particularly
                     formatted search options would be a representation to which the third REST principle
                     refers.</div>
                  
                  <div class="counter"><a href="#p20">20</a></div>
                  <div class="ptext" id="p20">The fourth REST principle is that representations are self-descriptive. Admittedly,
                     the
                     TIS-API does not conform to this principle directly. However, one way in which the
                     TIS-API adheres to the spirit of this principle is in the search results resource.
                     Search results resources are defined to contain the search options used to produce
                     the
                     results available in the resource. In this way, it would be possible to know exactly
                     what options produced these results (Figure 5). This also enables caching of
                     results, which can lead to a better user experience in the form of reduced search
                     times.</div>
                  
                  
                  
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure5.png" rel="external"><img src="resources/images/figure5.png" style="" alt="an image of a laptop and a file with arrows pointing from one to the other" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 5. </div>Fourth REST principle: representations should be self-descriptive. Although the TIS-API
                        is not strict in following this principle, one way in which it practices the spirit
                        of
                        this principle is in the server response to a request for search results. The
                        representation used in submitting the current search (shown as the blue icon) is given
                        as part of the server’s response.</div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p21">21</a></div>
                  <div class="ptext" id="p21">The fifth and final REST principle is that application state information should not
                     be
                     stored; instead, it should be passed as a representation. To unpack the meaning of
                     this,
                     it is important to consider another assumption about the REST principles: when one
                     computer communicates with another computer, the two are in a server-client
                     relationship. The server is the computer that holds the resource that a client wishes
                     to
                     make a request on. As a result, the client always initiates contact with the server.
                     Application state refers to a step in some process that the server and client navigate
                     together.</div>
                  
                  <div class="counter"><a href="#p22">22</a></div>
                  <div class="ptext" id="p22">A common server-client application is online shopping. The first step is for the client
                     to submit a set of items to purchase; then, the server needs to calculate various
                     things
                     (like whether the items are in stock, how much the order will cost, taxes to collect,
                     and other business-related tasks); then, the client needs to provide authorization
                     to
                     pay for the purchase; finally, the server should notify the client that the order
                     has
                     been placed and that the purchase has been billed. According to the fifth REST
                     principle, neither the client nor the server should store information specifying which
                     step they are on. Rather, the exchange of information they conduct as part of that
                     process should specify which step they are on.</div>
                  
                  <div class="counter"><a href="#p23">23</a></div>
                  <div class="ptext" id="p23">The TIS-API exhibits compliance with the fifth REST principle in the way it handles
                     Tesserae search submissions (Figure 6). </div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure6.png" rel="external"><img src="resources/images/figure6.png" style="" alt="two images of a laptop and a file with arrows pointing from one to the other" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 6. </div>Fifth REST principle: application state should not be stored in the API. In the example
                        of running a Tesserae search, the application is expected to 1) run a search as
                        specified and 2) display the results. The TIS-API separates these two states of the
                        application into individual requests, thereby avoiding the need to store application
                        state either on the client or the server. Instead, the application state is mediated
                        by
                        representation: the client knows how to request search results based on information
                        the
                        server has given (shown as the red icon). Note that the client is not required to
                        immediately request search results; because it is not tied to an application state,
                        it
                        can make other requests, such as requests for certain texts or for a new stopwords
                        list,
                        before requesting the search results.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p24">24</a></div>
                  <div class="ptext" id="p24">For the Tesserae search application, the
                     client first submits a Tesserae search; the server then needs to run the search and
                     store the results; finally, the client should be able to access the results. Since
                     Tesserae search may take longer than a user is willing to wait, it seemed important
                     to
                     design the search application in such a way that the client would not be stuck waiting
                     for the server to respond with search results. Designing the application so that the
                     server would first respond to the client with the resource name for completed search
                     results not only freed the client from waiting on the server but also made storing
                     application state in either the server or the client unnecessary. The client can make
                     a
                     request on the completed search results, and if the server responds that they aren’t
                     ready yet, the client can wait to make a request later.</div>
                  
                  <div class="counter"><a href="#p25">25</a></div>
                  <div class="ptext" id="p25">The previous points demonstrate that each of the five REST principles were considered
                     in
                     certain aspects of the TIS-API. While these examples do not describe all the ways
                     in
                     which the five REST principles were employed in the design of the TIS-API, these
                     examples should serve to substantiate the claim that the five REST principles were
                     important considerations during the design of the TIS-API. Because of this, the TIS-API
                     provides machine-accessibility to Tesserae’s capabilities.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Tesserae Search via the TIS-API</h1>
                  
                  <div class="counter"><a href="#p26">26</a></div>
                  <div class="ptext" id="p26">Though claims of machine-accessibility can be made through the REST principles, it
                     can
                     be more convincing to show machine-accessibility by walking through the process of
                     submitting a Tesserae search through the TIS-API (see Figure 7 for a
                     high-level workflow of the process). For those who prefer directly reading the behavior
                     prescribed by the TIS-API instead of going through this example, the TIS-API
                     documentation site is available at <a href="https://tesserae.caset.buffalo.edu/docs/api/" onclick="window.open('https://tesserae.caset.buffalo.edu/docs/api/'); return false" class="ref">https://tesserae.caset.buffalo.edu/docs/api/</a>. For those who want to know exact
                     details about how the TIS-API was implemented, source code is available at <a href="https://github.com/tesserae/apitess" onclick="window.open('https://github.com/tesserae/apitess'); return false" class="ref">https://github.com/tesserae/apitess</a>.</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure7.png" rel="external"><img src="resources/images/figure7.png" style="" alt="And image of a workflow visualization" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 7. </div>A high-level overview of the workflow used to submit a Tesserae intertext search through
                        the TIS-API. This image is also used at <a href="https://tesserae.caset.buffalo.edu/docs/api/getting-started/workflow/" onclick="window.open('https://tesserae.caset.buffalo.edu/docs/api/getting-started/workflow/'); return false" class="ref">https://tesserae.caset.buffalo.edu/docs/api/getting-started/workflow/</a>, where a
                        similar workflow is described.</div>
                  </div>
                  </div>
               
               <div class="div div0">
                  
                  
                  <h1 class="head">Anatomy of a Tesserae Search Query</h1>
                  
                  <div class="counter"><a href="#p27">27</a></div>
                  <div class="ptext" id="p27">To start the discussion of how the TIS-API can be used to perform a Tesserae search,
                     the
                     component parts of a Tesserae search query should be reviewed. Although the details
                     for
                     the Tesserae search process have already been described [<a class="ref" href="#forstall2014">Forstall 2014</a>], the focus here
                     is to have a simplified but strong conceptual grasp on the parts involved in a Tesserae
                     search. By understanding what the building blocks are for defining a search, it will
                     be
                     easier to understand how each of these blocks are addressed by the TIS-API. The aspects
                     of the Tesserae search input discussed in this paper are:</div>
                  
                  <div class="ptext">
                     <ul class="list">
                        <li class="item">source text</li>
                        <li class="item">target text</li>
                        <li class="item">type of feature used to find matches</li>
                        <li class="item">stopwords</li>
                     </ul>
                  </div>
                  
                  <div class="counter"><a href="#p28">28</a></div>
                  <div class="ptext" id="p28">To frame the discussion of these inputs, it will be helpful to state what the Tesserae
                     search is supposed to do: the objective of Tesserae search is to find intertexts between
                     two works. Thinking of Tesserae search in this way, it becomes immediately obvious
                     that
                     two works need to be specified in the input. Because Tesserae was originally developed
                     as a tool for intertext detection, a relationship between the two works is assumed:
                     namely, that one work influenced the other. For this reason, a Tesserae search query
                     is
                     formulated in terms of a “source text” (i.e., the work that influences the other) and a
                     “target text” (i.e., the work that was influenced by the other).</div>
                  
                  <div class="counter"><a href="#p29">29</a></div>
                  <div class="ptext" id="p29">Another aspect fundamental to specifying a Tesserae search query is defining what
                     counts
                     as an intertext. For purposes of the Tesserae search algorithm, an intertext is defined
                     by the matching of at least two features between two passages, where one passage comes
                     from the source text, and the other passage comes from the target text. Thus, it becomes
                     necessary to specify which type of feature to compare when looking for matching
                     features.</div>
                  
                  <div class="counter"><a href="#p30">30</a></div>
                  <div class="ptext" id="p30">One feature type is the lemma type, which can be thought of as a dictionary headword.
                     When looking up the definition of a given word in the dictionary, it is sometimes
                     necessary to change the spelling of the word to find the correct entry. For example,
                     the
                     definition for the word “love” in “I love to swim” is found in the dictionary under the
                     lemma “love”. In this example, no spelling change is necessary to find the lemma.
                     However, the definition for the word “loves” from “He loves swimming” is also found
                     under the lemma “love”. It is necessary to remove the final “s” from “loves” in order to
                     find the lemma.</div>
                  
                  <div class="counter"><a href="#p31">31</a></div>
                  <div class="ptext" id="p31">If lemmata (the plural of lemma) are used to search for intertexts, only passages
                     that
                     share at least two different lemmata will be considered a potential intertext. For
                     example, suppose we have the following passages (again):</div>
                  
                  <div class="ptext">
                     <ol class="list">
                        <li class="item">I love to swim</li>
                        <li class="item">He loves swimming</li>
                     </ol>
                  </div>
                  
                  <div class="counter"><a href="#p32">32</a></div>
                  <div class="ptext" id="p32">Note that passage 1 contains the words “love” and “swim”, both of which also look
                     identical to their lemmata. Passage 2 likewise contains the lemmata “love” (from “loves”)
                     and “swim” (from “swimming”). From this information, it can be seen that a Tesserae
                     search searching for intertexts based on the lemma feature would find that these two
                     passages are a potential intertext.</div>
                  
                  <div class="counter"><a href="#p33">33</a></div>
                  <div class="ptext" id="p33">A final aspect to consider in this simplified conception of the inputs to a Tesserae
                     search is the matter of stopwords. Often, there are features we believe will be
                     unimportant in determining whether one passage refers to another. For example, we
                     may
                     find common words like articles and prepositions to be irrelevant. In this case, we
                     would like a Tesserae search to ignore passages that match only because of articles
                     and
                     prepositions. To specify features that we think are not interesting, we can use a
                     stopwords list to prevent those features from being counted when determining whether
                     two
                     passages are a potential intertext.</div>
                  
                  <div class="counter"><a href="#p34">34</a></div>
                  <div class="ptext" id="p34">Knowing now that a source text, a target text, a feature definition, and a stopwords
                     list are important options to specify in a Tesserae search, it is clear that these
                     options will need to be specified to the TIS-API when submitting a Tesserae search
                     query.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">API Concepts</h1>
                  
                  <div class="counter"><a href="#p35">35</a></div>
                  <div class="ptext" id="p35">Before discussing how to use the TIS-API to perform Tesserae search, some terminology
                     and conventions should be noted. First, the meaning of “TIS-API” should be more
                     carefully stated. The TIS-API, in its strictest sense, is a set of rules that defines
                     server behavior in response to client requests. An implementation of the TIS-API,
                     therefore, is code that, when run, behaves in accordance with the rules that were
                     defined. When this code is running, we can say that a computer is “running an instance
                     of the TIS-API.” Since the code allows a computer to follow the rules of the TIS-API and
                     since the deployed software exhibits the behaviors defined by the rules of the TIS-API,
                     the use of “TIS-API” can slip from its strict sense into a more inclusive (and therefore
                     ambiguous) sense that may denote either the rules, the code, or the deployed
                     software.</div>
                  
                  <div class="counter"><a href="#p36">36</a></div>
                  <div class="ptext" id="p36">The angle brackets (“&lt;,” “&gt;”) convention used in resource names should also be
                     explained explicitly. Just as earlier in the paper, the angle brackets (“&lt;,” “&gt;”)
                     denote a placeholder; the word(s) within the angle brackets hint at what should replace
                     this placeholder. For example, as seen earlier, “&lt;webhost&gt;/texts/” specifies a
                     name for interacting with text resources. However, the name does not literally contain
                     “&lt;webhost&gt;”; rather, “&lt;webhost&gt;” should be replaced with an identifier to a
                     running instance of the TIS-API. For example, if
                     <a href="https://tesserae.caset.buffalo.edu/api" onclick="window.open('https://tesserae.caset.buffalo.edu/api'); return false" class="ref">https://tesserae.caset.buffalo.edu/api</a> is the URL to a running instance of the
                     TIS-API, <a href="https://tesserae.caset.buffalo.edu/api/texts/" onclick="window.open('https://tesserae.caset.buffalo.edu/api/texts/'); return false" class="ref">https://tesserae.caset.buffalo.edu/api/texts/</a> (note that “/texts/” has been
                     added to the URL) is the name referring to the text resources available in that
                     instance.</div>
                  
                  <div class="counter"><a href="#p37">37</a></div>
                  <div class="ptext" id="p37">Finally, the term “endpoint” should be defined. Note that the initial part of the URL is
                     largely irrelevant to the defined behavior for the TIS-API. In other words, whether
                     <a href="https://tesserae.caset.buffalo.edu/api" onclick="window.open('https://tesserae.caset.buffalo.edu/api'); return false" class="ref">https://tesserae.caset.buffalo.edu/api</a> or <a href="https://www.tis-api.com" onclick="window.open('https://www.tis-api.com'); return false" class="ref">https://www.tis-api.com</a> is used to work with
                     texts, the TIS-API will respond in a similar manner — and it would behave exactly
                     the
                     same if both web hosts had the same text information in their respective databases.
                     Therefore, the part of the name that distinguishes behavior is what comes after the
                     web
                     host’s identifier. These distinguishing patterns that come at the end of the URL are
                     known as “endpoints.” By convention, these endpoints are referred to not by their full
                     URL; rather, they are referred to by the portion of the URL that comes after the web
                     host’s URL. For example, “/texts/” is the TIS-API endpoint that deals with texts.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Using the TIS-API to Run a Tesserae Search</h1>
                  
                  <div class="counter"><a href="#p38">38</a></div>
                  <div class="ptext" id="p38">With a clear picture of Tesserae search options as well as the vocabulary used to
                     express APIs, it is possible to consider how the TIS-API can be used to build and
                     submit
                     a Tesserae search query. The first endpoint to consider is “/parallels/”, which accepts
                     Tesserae search requests. By performing a POST request on the “/parallels/” endpoint and
                     providing the Tesserae search options in a particular machine-readable format, a
                     Tesserae search query can be submitted. Exact details on this particular
                     machine-readable format can be found by consulting the documentation; for purposes
                     of
                     this paper, it is sufficient to know that the “/parallels/” endpoint accepts Tesserae
                     search query submissions.</div>
                  
                  <div class="counter"><a href="#p39">39</a></div>
                  <div class="ptext" id="p39">Ignoring the specifics of the Tesserae search query submission format for the
                     “/parallels/” endpoint, earlier discussion has shown that a source text, a target text,
                     a feature to search by, and a stopwords list must be specified. The TIS-API can be
                     useful in choosing these options.</div>
                  
                  <div class="counter"><a href="#p40">40</a></div>
                  <div class="ptext" id="p40">Since Tesserae can perform intertext discoveries only between texts already in its
                     database, we can only reference a source text and a target text already in the Tesserae
                     database when submitting a Tesserae search. How does the TIS-API provide access to
                     information about texts in the Tesserae database? As mentioned earlier, text information
                     can be obtained at the “/texts/” endpoint. Again, there are specific details about the
                     “/texts/” endpoint that may be useful (such as querying the Tesserae database for texts
                     written by a particular author) which can be found by consulting the documentation.
                     But
                     for purposes of this paper, it is sufficient to know that the “/texts/” endpoint can be
                     used to discover what texts are available to be used as a source or target text. From
                     the information returned by performing a GET request on the “/texts/” endpoint,
                     identification codes used by the database to refer to specific texts can be obtained.
                     These identifiers can specify a source and a target text in the information submitted
                     in
                     a POST to “/parallels/”.</div>
                  
                  <div class="counter"><a href="#p41">41</a></div>
                  <div class="ptext" id="p41">Although the TIS-API does not specify a convenient endpoint for determining which
                     search
                     features can be specified, the documentation does specify valid options. Furthermore,
                     the TIS-API defines that when an invalid option is given, the response will include
                     information indicating invalidity of the request.</div>
                  
                  <div class="counter"><a href="#p42">42</a></div>
                  <div class="ptext" id="p42">The TIS-API, however, does have a “/stopwords/” endpoint that can be useful in choosing
                     a stopwords list. Recall that stopwords lists are often composed of items that appear
                     most frequently in the language. Given the appropriate information (as defined in
                     the
                     documentation), the “/stopwords/” endpoint consults the Tesserae database and returns
                     the most frequently appearing features (Figure 8).</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure8.png" rel="external"><img src="resources/images/figure8.png" style="" alt="Image of a laptop and a server" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 8. </div>Diagram describing steps taken to obtain stopwords.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p43">43</a></div>
                  <div class="ptext" id="p43">In other words, the
                     “/stopwords/” endpoint can be used to collect the top N most frequently appearing
                     features, where N is a number that can be specified. That list can be used as the
                     stopwords list given to “/parallels/” when submitting a Tesserae search query.</div>
                  
                  <div class="counter"><a href="#p44">44</a></div>
                  <div class="ptext" id="p44">It has been shown that the TIS-API provides the “/parallels/” endpoint for submitting a
                     Tesserae search query, as well as the “/texts/” and “/stopwords/” endpoints to aid in
                     choosing Tesserae search options. To retrieve search results, the TIS-API specifies
                     the
                     “/parallels/&lt;uuid&gt;/” endpoint, where “&lt;uuid&gt;” is replaced by a search
                     submission identifier (“UUID” is an acronym for “Universally Unique IDentifier”, which
                     refers to a string of letters and numbers used to identify something). The identifier
                     for a particular search can be found in the response data given by the “/parallels/”
                     endpoint on a successful query submission. In particular, a URL that ends in
                     “/parallels/&lt;uuid&gt;/” will be specified. In other words, a successful Tesserae
                     search submission will provide the URL to retrieve the search results. Importantly,
                     that
                     URL is transmitted in a standard, machine-readable way.</div>
                  
                  <div class="counter"><a href="#p45">45</a></div>
                  <div class="ptext" id="p45">For search queries that involve very small texts, going directly to the URL as soon
                     as
                     the response from “/parallels/” comes back may permit retrieving the search results
                     immediately. However, when longer texts are chosen, Tesserae search may take more
                     time
                     to complete. In that case, results would not immediately appear. Instead, requesting
                     a
                     GET at the result URL would yield a response indicating that the resource is not
                     available. To ensure that the search has been submitted, the
                     “/parallels/&lt;uuid&gt;/status/” endpoint, which retrieves status information on the
                     search submission (such as whether the search is in process or if it failed), could
                     be
                     used. When the status indicates that the search is complete, it would be possible
                     to go
                     to the results URL and find the search results.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Case Study: Running Search on the New Tesserae Website</h1>
                  
                  <div class="counter"><a href="#p46">46</a></div>
                  <div class="ptext" id="p46">Having seen a theoretical use case for the TIS-API, it seems worthwhile to consider
                     a
                     practical use case for the TIS-API as well. To this end, we present the new Tesserae
                     website, which is available at <a href="https://tesserae.caset.buffalo.edu/" onclick="window.open('https://tesserae.caset.buffalo.edu/'); return false" class="ref">https://tesserae.caset.buffalo.edu/</a> (Figure 9 shows what the
                     website looks like at the time of writing when displaying results). This example
                     demonstrates how the TIS-API, though designed for machine-accessibility, can still
                     be
                     used to simulate the traditional human-accessible experience that Tesserae has offered
                     and that its user base in classics scholarship (of widely varying technical comfort)
                     has
                     become familiar with.</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure9.png" rel="external"><img src="resources/images/figure9.png" style="" alt="Image of a screenshot" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 9. </div>Various parts of the new Tesserae website communicate with the API.</div>
                  </div>
                  
                  
                  <div class="counter"><a href="#p47">47</a></div>
                  <div class="ptext" id="p47">In order to perform a Tesserae search, the user first needs to choose source and target
                     texts. The new website displays the source and target text options in dropdown menus,
                     found in the top left part of the interface (see Figure 10). Behind the scenes,
                     the website uses the “/texts/” endpoint to find what texts are available for comparison
                     from the TIS-API. It then populates the dropdown lists with the information received
                     from the “/texts/” endpoint. The user can then select source and target texts with
                     these
                     dropdown menus. In the example image (Figure [uiscreenshot]), the user has selected
                     Vergil’s<cite class="title italic">Aeneid</cite>as the source text and Lucan’s Bellum Civile as the target text.</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure10.png" rel="external"><img src="resources/images/figure10.png" style="" alt="Image of a screenshot" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 10. </div>Along the top-left of the page are drop down menus that communicate with the “/texts/”
                        endpoint.</div>
                  </div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure11.png" rel="external"><img src="resources/images/figure11.png" style="" alt="Image of a screenshot" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 11. </div>The widgets in the bottom-left of the page communicates with the “/stopwords/” endpoint
                        to create a stopwords list.</div>
                  </div>
                  
                  
                  
                  <div class="counter"><a href="#p48">48</a></div>
                  <div class="ptext" id="p48">The user might also wish to have stopwords for the Tesserae search. On the new website,
                     the number of stopwords to be used can be specified under the “Advanced Options” (see
                     Figure 12). Behind the scenes, the website uses the parameters specified
                     under “Advanced Options” to calculate a stopwords list using the “/stopwords/” endpoint.
                     In the example image (Figure 13), the user has left the slider bar under
                     “Stoplist Size” at the default of 10 stopwords. The example image further shows that the
                     stopwords will be calculated based on the corpus available to the TIS-API, as shown
                     by
                     the selection under “Stoplist Basis”.</div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure12.png" rel="external"><img src="resources/images/figure12.png" style="" alt="Image of a screenshot" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 12. </div>The button labeled “SEARCH” at the middle-left of the page sends the query to the
                        “/parallels/” endpoint. (In this image, the search button is greyed out because the
                        query has already been sent.)</div>
                  </div>
                  
                  
                  <div class="figure">
                     
                     
                     <div class="ptext"><a href="resources/images/figure13.png" rel="external"><img src="resources/images/figure13.png" style="" alt="Image of a screenshot" /></a></div>
                     
                     
                     <div class="caption">
                        <div class="label">Figure 13. </div>The majority of the screen has been populated with the results of a search, obtained
                        from the “/parallels/&lt;uuid&gt;/” endpoint.</div>
                  </div>
                  
                  
                  
                  
                  <div class="counter"><a href="#p49">49</a></div>
                  <div class="ptext" id="p49">To submit the Tesserae search for processing, the user simply hits the “SEARCH” button
                     (see Figure 12). This action causes the website to submit the search parameters
                     to the “/parallels/” endpoint. Once the search is complete, the website automatically
                     calls on the “/parallels/&lt;uuid&gt;/” endpoint to retrieve the results of the search
                     and displays those results on the main part of the interface (see Figure
                     13).</div>
                  
                  <div class="counter"><a href="#p50">50</a></div>
                  <div class="ptext" id="p50">One tangential benefit of defining the new website’s functionality in terms of the
                     TIS-API was development flexibility. Because the TIS-API defines expected behavior,
                     the
                     website developer could work on the website at the same time that the API developer
                     was
                     implementing the expected behavior. This allowed for important feedback informed by
                     the
                     website developer’s user experience. That feedback resulted in additional behaviors
                     (e.g., paging of the search results, more detailed search status information) that
                     improved the API and website together. As the two efforts came together for deployment
                     of the new Tesserae website, the integration of the website with the TIS-API
                     implementation required relatively little work (deployment itself, along with making
                     sure that the user interface looked right, took most of the development time). This
                     demonstrates the utility of the TIS-API internal to the Tesserae Project. Other digital
                     humanities developers may want to consider this benefit when deciding whether they
                     too
                     can afford to improve their software’s ability to integrate with other software.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Case Study: Harnessing the TIS-API for Research</h1>
                  
                  <div class="counter"><a href="#p51">51</a></div>
                  <div class="ptext" id="p51">While the new Tesserae website demonstrates the advantages of the TIS-API for members
                     of
                     the Tesserae Project, it is also important to establish the advantages conferred to
                     researchers not directly affiliated with the project. This section describes one such
                     researcher’s experience with the TIS-API.</div>
                  
                  <div class="counter"><a href="#p52">52</a></div>
                  <div class="ptext" id="p52">For writing his 2017 article “Measuring and Mapping Intergeneric Allusion using
                     Tesserae” for a special issue of the Journal of Data Mining and Digital Humanities on
                     Computer-Aided Processing of Intertextuality in Ancient Languages [<a class="ref" href="#burns2017">Burns 2017</a>], one of
                     the co-authors of this article found himself in the position of downloading the results
                     of multiple Tesserae web searches in order to analyze not just an intertextual
                     comparison of two authors, but rather an intertextual comparison of one author (the
                     Latin epic poet Lucan) against several authors representative of a specific genre
                     (the
                     Latin love elegists Propertius, Tibullus, and Ovid). The searches had to be conducted
                     individually and care needed to be taken to ensure that each search used the same
                     parameters, including stopword lists and cutoff scores, among other settings. Moreover,
                     the author needed to be sure that this consistency in parameter selection could be
                     maintained between sessions, with sometimes weeks or even months passing between
                     searches. At the time, these factors were documented by the author in research notes,
                     but from testing the TIS-API, it is clear how this process could have been improved
                     had
                     the new set-up been available: a similar paper written now could document the exact
                     TIS-API calls for all of the author-to-author comparisons in a script with parameters
                     specified upfront as constants.</div>
                  
                  <div class="counter"><a href="#p53">53</a></div>
                  <div class="ptext" id="p53">This enhancement to the research process made possible through the TIS-API could be
                     seen
                     as a variation on software development’s DRY — don’t repeat yourself — principle
                     [<a class="ref" href="#hunt2000">Hunt 2000</a>]. In programming, DRY argues for a reduction of duplicate code to increase
                     writing efficiency, reduce opportunities for errors to be introduced, and decrease
                     maintenance costs. The TIS-API allows for analogous benefits in a research context:
                     searches can be formalized and then run and rerun without duplicative effort. To
                     paraphrase Andy Hunt and Dave Thomas’s oft-cited definition of the DRY principle,
                     the
                     TIS-API makes it possible for every Tesserae search to “have a single, unambiguous,
                     authoritative representation” [<a class="ref" href="#hunt2000">Hunt 2000</a>, 27] within a study.</div>
                  
                  <div class="counter"><a href="#p54">54</a></div>
                  <div class="ptext" id="p54">Accordingly, code-based calls to the TIS-API should be considered now a best practice
                     for researchers needing to aggregate the results of multiple Tesserae searches, as
                     for
                     example papers such as [<a class="ref" href="#bernstein2015">Bernstein 2015</a>]. That said, even with respect to research making
                     use of even a single Tesserae search, the ability to document the request in the form
                     of
                     an API request is valuable. This is because, no matter the number of searches, being
                     able to document explicitly decisions made and actions taken in the course of gathering
                     data plays an important role in making that research reproducible. In other words,
                     code-based calls to the TIS-API improve researchers’ experience by making decisions
                     explicitly documented at the time of data-gathering, rather than as an afterthought.
                     It
                     has been argued that researchers should aim for well-documented and reproducible
                     workflows as part of a critical digital humanities [<a class="ref" href="#dobson2019">Dobson 2019</a>]. It can also be argued
                     that academic developers can support researchers in reaching this goal by making it
                     easier to incorporate their software tools into research workflows. The TIS-API is
                     a
                     move in this direction.</div>
                  
                  <div class="counter"><a href="#p55">55</a></div>
                  <div class="ptext" id="p55">One final point about using Tesserae searches in research workflows: at present,
                     running, say, dozens or hundreds of Tesserae searches using the web form could be
                     seen
                     as a labor-intensive proposition, enough so as to be a disincentive to exploring
                     research questions demanding this volume of web-form entry. Accessing the TIS-API
                     through a script, on the other hand, greatly improves the researcher’s experience
                     by
                     reducing the labor of specifying Tesserae searches, which in turn reduces the risk
                     of
                     inconsistent querying and related errors that add more labor in data checking and
                     correction or even having to rerun completed but unusable searches. With this in mind,
                     one can imagine that availability of the TIS-API, by reducing the difficulty of
                     collecting and collating multiple searches, will encourage more large-scale
                     Tesserae-based studies.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Future Work</h1>
                  
                  <div class="counter"><a href="#p56">56</a></div>
                  <div class="ptext" id="p56">For all of the benefits made possible through the TIS-API, we recognize that the API
                     could be improved. One improvement in particular we are considering is a way to document
                     which version of the software produced a given set of results. This will be important
                     as
                     software development continues on Tesserae’s core functionality. While such development
                     aims to improve Tesserae results, those improvements would come at the cost of
                     reproducibility. It is possible that the development improvement would cause results
                     obtained through one set of parameters on a given date to be different from the results
                     obtained through the same set of parameters on a different date. By explicitly
                     documenting which version of the Tesserae code produces a given set of results,
                     reproducibility of results could be guaranteed while also permitting incremental
                     improvements to Tesserae’s core software.</div>
                  
                  <div class="counter"><a href="#p57">57</a></div>
                  <div class="ptext" id="p57">It will also be interesting to see how the TIS-API serves the growing movement within
                     digital classics to provide better interoperability between collections and tools
                     emerging from different projects within the field [<a class="ref" href="#burns2019">Burns 2019</a>]. Such cross-project
                     collaborations within digital classics hold much promise for enabling new modes of
                     inquiry across well-known editions and newly digitized works.</div>
                  
                  <div class="counter"><a href="#p58">58</a></div>
                  <div class="ptext" id="p58">Beyond digital classics, we hope the TIS-API will serve as a helpful point of comparison
                     for other digital humanities projects. A future in digital humanities where larger
                     questions can be answered through the aggregation of data from multiple sources will
                     be
                     more easily realized when individual projects provide an API to make their data more
                     machine-accessible. The considerations made in the design and implementation of the
                     TIS-API, including the adoption of REST principles and the analysis of Tesserae’s
                     intertext discovery process, can serve as inspiration for other projects as they make
                     decisions on how to design and implement their own APIs.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Conclusion</h1>
                  
                  <div class="counter"><a href="#p59">59</a></div>
                  <div class="ptext" id="p59">The TIS-API enables machine-accessibility of Tesserae intertext discovery capabilities.
                     Machine-accessibility is achieved by following the software industry standards known
                     as
                     the REST principles, which encouraged thinking about Tesserae’s capabilities as
                     resources and considering how to act upon those resources. In particular, the REST
                     principles are evident in how Tesserae’s texts are made available, how stopwords are
                     computed from Tesserae’s text collection, and how Tesserae search is implemented without
                     saving application state either in the client or the server.</div>
                  
                  <div class="counter"><a href="#p60">60</a></div>
                  <div class="ptext" id="p60">Making Tesserae machine-accessible yields two main benefits. First, it allows for
                     parallelizing development efforts in the Tesserae software, as evidenced by the
                     simultaneous development of both the TIS-API implementation and the new Tesserae
                     website. The second benefit is in the promising possibilities for those not affiliated
                     with the Tesserae project. Specifically, the ability to document search procedures
                     exactly should lead to improved scholarly practices in computational literary criticism.
                     We expect that other digital humanities projects can likewise reap benefits from
                     upgrading their software with machine-accessibility.</div>
               </div>
               
               <div class="div div0">
                  
                  <h1 class="head">Acknowledgments</h1>
                  
                  <div class="counter"><a href="#p61">61</a></div>
                  <div class="ptext" id="p61">This work was made possible by NEH Digital Humanities Advancement Grant
                     HAA-258767-18. PJB acknowledges the support of the Quantitative Criticism Lab and
                     the
                     Institute for the Study of the Ancient World while conducting this work.
                     </div>
                  </div>
               
               
               
               
               
               </div>
            
            <div id="notes">
               <h2>Notes</h2>
               <div class="endnote" id="d4e326"><span class="noteRef lang en">[1]  Plagiarism detection has some
                     similarities to intertext detection. Both tasks fall under the more general field
                     of
                     “text reuse”.</span></div>
            </div>
            <div id="worksCited">
               <h2>Works Cited</h2>
               <div class="bibl"><span class="ref" id="allen2011"><!-- close -->Allen 2011</span>  Allen, G. <cite class="title italic">Intertextuality.</cite> Routledge, London. (2011).</div>
               <div class="bibl"><span class="ref" id="bernstein2015"><!-- close -->Bernstein 2015</span>  Bernstein, Neil, Kyle Gervais, and Wei Lin. “Comparative rates of text reuse in classical Latin hexameter poetry.” <cite class="title italic">Digital Humanities Quarterly</cite> 9.3 (2015).</div>
               <div class="bibl"><span class="ref" id="berti2016"><!-- close -->Berti 2016</span>  Berti, Monica, et al. “Documenting Homeric Text-Reuse in the Deipnosophistae
                  of Athenaeus of Naucratis.” <cite class="title italic">Bulletin of the Institute of Classical Studies</cite> 59.2 (2016):
                  121-139. <a href="https://doi.org/10.1111/j.2041-5370.2016.12042.x" onclick="window.open('https://doi.org/10.1111/j.2041-5370.2016.12042.x'); return false" class="ref">https://doi.org/10.1111/j.2041-5370.2016.12042.x</a>
                  </div>
               <div class="bibl"><span class="ref" id="burns2017"><!-- close -->Burns 2017</span>  Burns, Patrick J. “Measuring and Mapping Intergeneric Allusion in Latin
                  Poetry using Tesserae.” <cite class="title italic">Journal of Data Mining and Digital Humanities</cite> (2017). <a href="https://jdmdh.episciences.org/3821" onclick="window.open('https://jdmdh.episciences.org/3821'); return false" class="ref">https://jdmdh.episciences.org/3821</a>.</div>
               <div class="bibl"><span class="ref" id="burns2019"><!-- close -->Burns 2019</span>  Burns, Patrick J. “Building a text analysis pipeline for classical
                  languages.” In <cite class="title italic">Digital Classical Philology: Ancient Greek and Latin in the Digital
                     Revolution.</cite> Berlin: De Gruyter (2019). pp. 159–76.</div>
               <div class="bibl"><span class="ref" id="buchler2013"><!-- close -->Büchler 2013</span>  Büchler, M. “Informationstechnische Aspekte des Historical Text Re-use
                  (English: Computational Aspects of Historical Text Re-use).” Ph.D. thesis, Leipzig
                  (2013). See also
                  <a href="http://www.etrap.eu/research/tracer/" onclick="window.open('http://www.etrap.eu/research/tracer/'); return false" class="ref">http://www.etrap.eu/research/tracer/</a>.</div>
               <div class="bibl"><span class="ref" id="chaudhurri2015"><!-- close -->Chaudhuri 2015</span>  Chaudhuri, Pramit, Joseph P. Dexter, and Jorge A. Bonilla Lopez.
                  “Strings, Triangles, and Go-betweens: Intertextual Approaches to Silius’ Carthaginian
                  Debates.” <cite class="title italic">Dictynna. Revue de poétique latine</cite> 12 (2015). See also
                  <a href="https://www.qcrit.org/filum" onclick="window.open('https://www.qcrit.org/filum'); return false" class="ref">https://www.qcrit.org/filum</a>.</div>
               <div class="bibl"><span class="ref" id="coffee2012a"><!-- close -->Coffee 2012a</span>  Coffee, N. “Intertextuality in Latin Poetry.” <cite class="title italic">Oxford Bibliographies in
                     Classics.</cite> D. Clayman, (ed). Oxford University Press, New York (2012).</div>
               <div class="bibl"><span class="ref" id="coffee2012b"><!-- close -->Coffee 2012b</span>  Coffee, N., J.-P. Koenig, S. Poornima, R. Ossewarde, C. Forstall and S.
                  Jacobson. “Intertextuality in the Digital Age.” <cite class="title italic">TAPA</cite> 142, no. 2 (2012): 381-419.</div>
               <div class="bibl"><span class="ref" id="dobson2019"><!-- close -->Dobson 2019</span>  Dobson, J.E. <cite class="title italic">Critical Digital Humanities: The Search for a Methodology.</cite>
                  University of Illinois Press, Champaign, IL (2019).</div>
               <div class="bibl"><span class="ref" id="edmunds2001"><!-- close -->Edmunds 2001</span>  Edmunds, L. <cite class="title italic">Intertextuality and the Reading of Roman Poetry.</cite> Johns Hopkins
                  University Press, Baltimore (2001).</div>
               <div class="bibl"><span class="ref" id="fielding2000"><!-- close -->Fielding 2000</span>  Fielding, Roy T. “Architectural styles and the design of network-based
                  software architectures.” Vol. 7. Ph.D. thesis, University of California, Irvine
                  (2000).</div>
               <div class="bibl"><span class="ref" id="fielding2017"><!-- close -->Fielding 2017</span>  Fielding, Roy T., Richard N. Taylor, Justin R. Erenkrantz, Michael M.
                  Gorlick, Jim Whitehead, Rohit Khare, and Peyman Oreizy. “Reflections on the REST
                  architectural style and principled design of the modern web architecture (impact paper
                  award).” <cite class="title italic">Proceedings of the 2017 11th Joint Meeting on Foundations of Software
                     Engineering</cite>. ACM (2017).</div>
               <div class="bibl"><span class="ref" id="forstall2014"><!-- close -->Forstall 2014</span>  Forstall, Christopher, Neil Coffee, Thomas Buck, Katherine Roache, and
                  Sarah Jacobson. “Modeling the scholars: Detecting intertextuality through enhanced
                  word-level n-gram matching.” <cite class="title italic">Digital Scholarship in the Humanities</cite> 30, no. 4 (2014):
                  503-515. See also
                  <a href="http://tesserae.caset.buffalo.edu/" onclick="window.open('http://tesserae.caset.buffalo.edu/'); return false" class="ref">http://tesserae.caset.buffalo.edu/</a>.</div>
               <div class="bibl"><span class="ref" id="hunt2000"><!-- close -->Hunt 2000</span>  Hunt, A. and Thomas, D. <cite class="title italic">The Pragmatic Programmer: From Journeyman to Master.</cite>
                  Addison-Wesley, Boston (2000).</div>
               <div class="bibl"><span class="ref" id="juvan2008"><!-- close -->Juvan 2008</span>  Juvan, M. “Towards a History of Intertextuality in Literary and Culture
                  Studies.” <cite class="title italic">CLCweb: Comparative Literature And Culture</cite> 10, no. 3 (2008). <a href="https://doi.org/10.7771/1481-4374.1370" onclick="window.open('https://doi.org/10.7771/1481-4374.1370'); return false" class="ref">https://doi.org/10.7771/1481-4374.1370</a>.</div>
               <div class="bibl"><span class="ref" id="lee2007"><!-- close -->Lee 2007</span>  Lee, John. “A computational model of text reuse in ancient literary texts.”
                  <cite class="title italic">Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics</cite>
                  (2007).</div>
               <div class="bibl"><span class="ref" id="mastandrea2011"><!-- close -->Mastandrea 2011</span>  Mastandrea, Paolo, Massimo Manca, L. Spinazzè, L. Tessarolo, and F.
                  Boschetti. “Musisque Deoque: Text Retrieval on Critical Editions.” <cite class="title italic">Journal for Language
                     Technology and Computational Linguistics</cite> 26 (2011): 129-140. See also
                  <a href="http://mizar.unive.it/mqdq/public/" onclick="window.open('http://mizar.unive.it/mqdq/public/'); return false" class="ref">http://mizar.unive.it/mqdq/public/</a>.</div>
            </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            <div class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/">Creative Commons Attribution-NoDerivatives 4.0 International License</a>.
               </div>
         </div>
      </div>
   </body>
</html>