<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?><?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dhq="http://www.digitalhumanities.org/ns/dhq">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <!-- Author should supply the title and personal information-->
                <title type="article" xml:lang="en">SpotiBot — Turing Testing
                    Spotify<!-- article title in English --></title>
                <!-- Add a <title> with appropriate @xml:lang for articles in languages other than English -->
                <dhq:authorInfo>
                    <!-- Include a separate <dhq:authorInfo> element for each author -->
                    <dhq:author_name>Pelle <dhq:family>Snickars</dhq:family></dhq:author_name>
                    <dhq:affiliation>Umeå University</dhq:affiliation>
                    <email>pelle.snickars@umu.se</email>
                    <dhq:bio>
                        <p>Pelle Snickars is professor of media and communication studies at Umea University, Sweden, a chair directed towards the digital humanities. He is an affiliated researcher to the Humlab research centre, and his research has focused on digitisation of cultural heritage, media history, digital methods and the importance of new infrastructures for the humanities.
                        </p>
                    </dhq:bio>
                </dhq:authorInfo>
                <dhq:authorInfo>
                    <dhq:author_name>Roger <dhq:family>Mähler</dhq:family></dhq:author_name>
                    <dhq:affiliation>Umeå University</dhq:affiliation>
                    <email>roger.mahler@umu.se</email>
                    <dhq:bio>
                        <p>Roger Mähler has a degree in computer science and has currently a position as lead developer at Humlab, Umeå university. Mähler has a long background as software architect and system developer both in academia as well as in the private sector. He participates in several research projects at Humlab where his main focus is on software development and text analysis.
                        </p>
                    </dhq:bio>
                </dhq:authorInfo>
            </titleStmt>
            <publicationStmt>
                <publisher>Alliance of Digital Humanities Organizations</publisher>
                <publisher>Association of Computers and the Humanities</publisher>

                <publisher>Association for Computers and the Humanities</publisher>
                <!-- This information will be completed at publication -->
                <idno type="DHQarticle-id">000373<!-- including leading zeroes: e.g. 000110 --></idno>
                <idno type="volume">012<!-- volume number, with leading zeroes: e.g. 006 --></idno>
                <idno type="issue">1<!-- issue number, without leading zeroes: e.g. 2 --></idno>
                <date when="2018-05-04">04 May 2018</date>
                <dhq:articleType>article</dhq:articleType>
                <availability>
                    <cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>
                </availability>
            </publicationStmt>

            <sourceDesc>
                <p>This is the source</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <classDecl>
                <taxonomy xml:id="dhq_keywords">
                    <bibl>DHQ classification scheme; full list available at <ref target="http://www.digitalhumanities.org/dhq/taxonomy.xml">http://www.digitalhumanities.org/dhq/taxonomy.xml</ref></bibl>
                </taxonomy>
                <taxonomy xml:id="authorial_keywords">
                    <bibl>Keywords supplied by author; no controlled vocabulary</bibl>
                </taxonomy>
            </classDecl>
        </encodingDesc>
        <profileDesc>
            <langUsage>
                <language ident="en" extent="original"/>
                <!-- add <language> with appropriate @ident for any additional languages -->
            </langUsage>
            <textClass>
                <keywords scheme="#dhq_keywords">
                    <!-- Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors -->
                    <list type="simple">
                        <item/>
                    </list>
                </keywords>
                <keywords scheme="#authorial_keywords">
                    <!-- Authors may include one or more keywords of their choice -->
                    <list type="simple">
                        <item>intervention</item>
                        <item>Spotify</item>
                        <item>streaming music</item>
                        <item>bots</item>
                        <item>Turing test</item>
                    </list>
                </keywords>
            </textClass>
        </profileDesc>
        <revisionDesc>
            <!-- Each change should include @who and @when as well as a brief note on what was done. -->
            <change who="GP" when="2018-04-22">file created</change>
        </revisionDesc>
    </teiHeader>
    <!-- If a translation is added to the original article, add an enclosing <text> and <group> element -->
    <text xml:lang="en" type="original">
        <front>
            <dhq:abstract>
                <!-- Include a brief abstract of the article -->
                <p>Even if digitized and born-digital audiovisual material today amounts to a
                    steadily increasing body of data to work with and research, such media
                    modalities are still relatively poorly represented in the field of DH. Streaming
                    media is a case in point, and the purpose of this article is to provide some
                    findings from an ongoing audio (and music) research project, that deals with
                    experiments, interventions and the reverse engineering of Spotify’s algorithms,
                    aggregation procedures, and valuation strategies. One such research experiment,
                    the SpotiBot intervention, was set up at Humlab, Umeå University. Via multiple
                    bots running in parallel our idea was to examine if it is possible to provoke —
                    or even undermine — the Spotify business model (based on the so called
                        <soCalled>30 second royalty rule</soCalled>). Essentially, the experiment
                    resembled a Turing test, where we asked ourselves what happens when — not if —
                    streaming bots approximate human listener behavior in such a way that it becomes
                    impossible to distinguish between a human and a machine. Implemented in the
                    Python programming language, and using a web UI testing frameworks, our so
                    called SpotiBot engine automated the Spotify web client by simulating user
                    interaction within the web interface. The SpotiBot engine was instructed to play
                    a single track repeatedly (both self-produced music and Abba’s “Dancing Queen”),
                    during less and more than 30 seconds, and with a fixed repetition scheme running
                    from 100 to <hi rend="italic">n</hi> times (simultaneously with different
                    Spotify Free ‘bot accounts’). Our bots also logged all results. In short, our
                    bots demonstrated the ability (at least sometimes) to continuously play tracks,
                    indicating that the Spotify business model can be tampered with. Using a single
                    virtual machine — hidden behind only one proxy IP — the results of the
                    intervention hence stipulate that it is possible to automatically play tracks
                    for thousands of repetitions that exceeds the royalty rule.</p>
            </dhq:abstract>
            <dhq:teaser>
                <!-- Include a brief teaser, no more than a phrase or a single sentence -->
                <p>A Turing test experiment run on bots "listening" to Spotify</p>
            </dhq:teaser>
        </front>
        <body>

            <div>
                <head>Introduction</head>
                <p>Digitized and born-digital audiovisual material today amounts to a steadily
                    increasing body of data to research — and do research with <ptr target="#brügger2016"/>. Yet, other media modalities than text is still
                    relatively poorly represented in the field of DH. As is well known, the focus on
                    the modality of text is (and has remained) strong; textual scholarship has been
                    the discipline’s core concern — from Busa’s concordances, to various text
                    encoding initiatives and distant <emph>reading</emph>. Naturally, there are a
                    number of exceptions, especially regarding visual culture, and the way that
                    images as datasets have been researched within major frameworks as cultural
                    analytics, or the abilities to algorithmically use computers to read and analyze
                    a film’s formal elements. Then again, most analytical DH-frameworks are derived
                    from text, and it remains illustrative that as late as 2014, a special interest
                    group focusing on <soCalled>audiovisual material in digital
                        humanities</soCalled> was set up within ADHO. Its purpose is to expand the
                    role of audiovisual media within DH, and serve as <cit>
                        <quote rend="inline" source="#avindh2016">a venue for exchanging knowledge, expertise, methods
                            and tools by scholars who make use of audiovisual data</quote>
                        <ptr target="#avindh2016"/>
                    </cit>.</p>
                <p>Following John F. Barber’s claim, sound and music are especially <quote rend="inline" source="#x_barber2016">overlooked</quote> within DH. The <quote rend="inline" source="#x_barber2016">tilization of sound as a methodology for information representation</quote>
                    has remained odd, or at best intriguing for digital humanities research <ptr target="#barber2016"/>. As of lately, however, there seems to be an
                    increased scholarly DH-interest in the media modality of sound. As Erica
                    Robles-Anderson and Patrik Svensson has argued in their excellent piece on
                    Powerpoint in <title rend="italic">Computational Culture</title>, oral
                    presentation culture <quote rend="inline" source="#x_robles-anderson2016">is a powerful reminder that before
                        Gutenberg much reading was listening</quote>. <ptr target="#robles-anderson2016"/>. Situated within a wider cultural analysis
                    of audio collections, the first issue of the, <title rend="italic">Journal of
                        Cultural Analytics</title>, featured an intriguing article by Tanya Clement
                    and Stephen McLaughlin on how to measure applause <ptr target="#clement2016b"/>.
                    Clement has also published in this journal on the infrastructural analyses of
                    sound collections within the so called, HiPSTAS-project <ptr target="#clement2016a"/>. In addition, two of our colleagues at Humlab are
                    also pursuing research around sound, particularly regarding representational
                    strategies of oral antiquity <ptr target="#foka2016"/>.</p>
                <p>The purpose of this article is hence to make another contribution towards a
                    greater variety of media modalities within DH-research. Our article provide some
                    initial findings from an ongoing research project that deals with various
                    experiments, interventions and the reverse engineering of Spotify’s algorithms,
                    aggregation procedures, and valuation strategies. The article focuses an
                    experiment which we have called, the <emph>SpotiBot intervention</emph>. Via
                    multiple bots running in parallel our idea was, in short, to examine if it is
                    possible to provoke — or even undermine — the Spotify business model (based on
                    the so called <soCalled>30 second royalty rule</soCalled>). The intervention
                    resembled a Turing test, where we asked ourselves what happens when — not if —
                    streaming bots approximate human listener behavior in such a way that it becomes
                    impossible to distinguish between a human and a machine. As is well known, in
                    the original Turing test the question was whether a <emph>human</emph> could
                    distinguish between a person and a machine <ptr target="#turing1950"/>, whereas
                    in our case <emph>Spotify’s algorithms</emph> were implicitly
                        <soCalled>asked</soCalled> to make this distinction. Basically, the SpotiBot
                    interventions we conducted hence approximated a repetitive Turing test — i.e.
                    our bots interacted with the Spotify system, which (in one way or the other)
                    tried to decide (via various unknown fraud detection tools) if communication was
                    human or machine based.</p>
                <p>While most previous scholarship on Spotify has primarily focused the service role
                    within the music industry, its alterations of the digital music economy, or
                    causing the eventual end of piracy <ptr target="#wikström2013"/>
                    <ptr target="#wikström2016"/>
                    <ptr target="#anderson2015"/><ptr target="#galuszka2015"/>
                    <ptr target="#schwarz2013"/>, our research project on Spotify takes a software
                    studies and DH approach towards streaming media. In general, the key idea is to
                        <soCalled>follow music files</soCalled> — rather than the people making,
                    using, collecting or listening to them — on their distributive journey through
                    the Spotify streaming ecosystem <ptr target="#fleischer2017"/>.<note>The research project, <title rend="quotes">Streaming Heritage. Following Files in Digital Music
                            Distribution</title> is funded by the Swedish Research Council between
                        2014 and 2018. It involves system developers Roger Mähler and Johan von Boer
                        (at Humlab, Umeå University), as well as researchers Pelle Snickars, Maria
                        Eriksson, Anna Johansson and Rasmus Fleischer (at Umeå University), and
                        Patrick Vonderau (at Stockholm University). For more information: <ref target="http://streamingheritage.se/">http://streamingheritage.se/</ref>.</note> Basically, our scholarly purpose
                    is thus to draw a more holistic picture by using Spotify as a lens to explore
                    social, technical, and economic processes associated with digital media
                    distribution. Building on the tradition of <soCalled>breaching
                        experiments</soCalled> in ethnomethodology <ptr target="#garfinkel1967"/> —
                    where <soCalled>reactions</soCalled> are caused by disturbing or even violating
                    commonly accepted rules or norms — our project has tried (in different ways) via
                    repeated and modified interventions, to <soCalled>break into</soCalled> the
                    hidden infrastructures of digital music distribution. The interventionist
                    approach in many ways resembles the simple way a postman would follow the route
                    of a parcel — from packaging to delivery.</p>
                <p>The project also engages in reverse engineering Spotify’s algorithms and
                    aggregation procedures, all in order to study platform logics, including
                    underlying norms and structures. As is well known, reverse engineering starts
                    with the final product (the music service Spotify in our case) and tries to take
                    it apart — backwards, step by step <quote rend="inline" source="#x_gheel2014">seeking clues as to why
                        it was put together in the way it was and how it fits into an overall
                        architecture</quote>
                    <ptr target="#gheel2014" loc="10"/>. As an attempt to reveal the procedures of
                    culture and technology at work, reverse engineering can be linked to various
                    forms of hacking practices. Within studies of media reverse engineering has been
                    used both by academic scholars <ptr target="#friesinger2014"/> as well as by
                    tech journalist wanting to understand and analyze, for example, how Netflix’s
                    sorting algorithms, vocabulary and grammar work <ptr target="#madrigal2014"/>. </p>
                <p>On the one hand, we have within our project been interested in broadly studying
                    different data patterns and media processes at Spotify. On the other hand, we
                    have also been keen on producing and obtaining research data, for example by
                    documenting (and tracing) Spotify’s history through constantly changing
                    interfaces, or by tracking and archiving advertisement flows (through debugging
                    software as Fiddler or Ghostery). One point of departure is that Spotify
                    resembles a black boxed service, metaphorically as well as practically (at least
                    from an academic media studies perspective). Another, is that Spotify does not —
                    to put it bluntly — share any data. Lack of access to data today confronts both
                    media scholars, (digital) humanists and social science researchers working
                    within media studies. As a consequence, since Spotify user data is not
                    available, it has had to be acquired and compiled through other means in order
                    to perform research — for example by deploying bots as research informants <ptr target="#eriksson2018"/>.</p>
            </div>
            <div>
                <head>Bots as Informants</head>
                <p>Bots <emph>appear</emph> to be human — which is why they are interesting. Bots
                    give an impression of being able to act as a normal user and/or person. The
                    computer scientist Joseph Weizenbaum programmed what is often regarded as the
                    first bot, ELIZA in the 1960s, which could then (almost) pass for human. Today,
                    the possibilities of such intelligent machines (or rather <emph>software
                        robots</emph>) have naturally increased <ptr target="#boshmaf2011"/>. The
                    most sophisticated contemporary bots react instantly to public information, like
                    the advanced algorithmic bots on the stock option market. They seems almost like
                    disembodied cyborgs, part human and part automaton.</p>
                <p>The bots we have programmed in our research project, however, are far from
                    cyborgs. Our so called <soCalled>BOT step-by-step behavior-scheme</soCalled>
                    rather testifies to rudimentary tasks like: <soCalled>BOT requests access to
                        play.spotify.com; BOT enters credentials; BOT submits credentials; Read
                        current play position; BOT waits until search link is clickable; Enter
                        search string that identifies track to play</soCalled>, etcetera. Still, our
                    bots have proven to be <emph>very</emph> useful in order to explore,
                    investigate, mimic, and (even) subvert Spotify’s notions of usage and
                    listening.</p>
                <p>Under the computational hood of streaming music services all streams are equal,
                    yet unlike at Apple Music every stream at Spotify Free means (potentially)
                    increased revenue from advertisers. The ad supported streaming model — giving
                    away music for free — has been controversial (especially in the U.S.). Yet, it
                    has enabled Spotify to acquire a lot of customers, and the company’s conversion
                    rate (to Premium subscription) lies around 25 percent. Established in Sweden in
                    2006, Spotify is today the dominant player in the streaming music market. With a
                    user base now officially reaching more than 100 million — including 50 million
                    paying subscribers — the music streaming service is today widely recognized as
                    the solution to problems caused by recent decades of digital disruption within
                    the music and media industries. Spotify resembles Netflix, YouTube and Apple
                    Music as an epitome of streaming’s digital zeitgeist envisioned to shape our
                    future, and has during the last years emerged as <emph>the giant</emph> within
                    the streaming music business. Even outcompeting Apple Music, Spotify’s market
                    share lies above 40 percent.</p>
                <p>One success factor is arguably the ease by which a listening account can be set
                    up at Spotify. For a number of years it was, for example, extremely simple to
                    sign in to Spotify — both for humans and bots. In endless discussions with
                    record labels (around rights management) Spotify took the stance that the
                    continuous offering of a zero-price version with recurrent advertisement
                    (Spotify Free) would in the long run be the best solution as well as incentive
                    to <emph>scale</emph> businesses and attract global listeners. The importance of
                    scaling and constantly adding new listeners might hence be one reason for
                    Spotify’s low security thresholds. There is no way of knowing how many fake
                    accounts are registered among the service’s 100 million ‘users’. No CAPTCHA was
                    for example needed (for our bots) when we performed the interventions and data
                    capture for this article (during late spring 2016), and obviously, one should in
                    this context remember what the CAPTCHA abbreviation originally stands for:
                        <quote rend="inline" source="#x">Completely Automated Public Turing test to tell
                        Computers and Humans Apart</quote>. </p>
                <p>As is well known, a CAPTCHA is a program that protects websites against bots by
                    generating a simple test that humans can pass but computer programs cannot.
                    Given that different forms of <hi rend="italic">click fraud</hi> — with
                    automated bots pretending to be consumers — has been an increasing problem
                    within the online advertising industry, the lack of CAPTCHA’s at Spotify did
                    trigger discussions on the community blog, for example as a way to stop bot fake
                    listenings. In March 2016 user Jdwhicker asked if there was an <cit>
                        <quote rend="inline" source="#jdwhicker2016">issue with fraudulent plays going on. What if
                            non-premium accounts had to pass a captcha instead of listen to an
                            advertisement every so often?</quote>
                        <ptr target="#jdwhicker2016"/>
                    </cit>. As a possible consequence, during late summer of 2016, Spotify started
                    using CAPTCHAs as well as reCAPTCHAs (with image identification) — allegedly to
                    better protect their system.</p>
                <p>Prior to these altered security measures, however, within our research project we
                    used and deployed multiple bots to study the explicit and implicit logics of the
                    Spotify web client. We were even been able to automate account registration (for
                    fast bot setups). In one intervention, for instance, we deployed 288 bots,
                    within 48 parallel Spotify sessions. Departing from the idea that software is
                    normative and regulatory — and, hence, that the streaming architecture of
                    Spotify promotes and materializes certain world views (and not others) — our
                    bots have been programmed to explore (and to some extent disrupt) the
                    socio-technical protocols that endow music files with cultural meaning.</p>
                <p>While setting up our different experiments and interventions, we have asked
                    ourselves questions like: How are music files repeatedly recontextualized and
                    rearranged by Spotify? How many steps does ‘raw’ audio data have to take before
                    it can become a streamed listening experience? How is the social life of a file
                    imagined (and fostered) by this system? Another fundamental question we have
                    asked ourselves is what sounds are actually perceived as music (or not)
                    according to Spotify, and at various adjacent music aggregating services that
                    regulate content appearing on streaming platforms <ptr target="#morris2015"/>.
                    Bots, in short cannot only <soCalled>listen</soCalled> to music; they can also
                    produce content (in the form of <soCalled>music</soCalled>). Our interventionist
                    methods and explorations with uploading (more or less artificial) sounds and
                    music have, for example, resulted in different responses. The same music (or
                    sounds) pass some aggregators — while others define it not to be music content
                    at all. When principles as to what is considered music vary, and when rejection
                    criteria at music aggregators turn more or less arbitrary — usually depending on
                    whether users pay an aggregation fee or not — the line between music and
                    non-music, artist and machine, human and bot becomes increasingly blurred.</p>
                <p>In general, and arguably due to the fact that more music is usually better music
                    at Spotify, the service seems likely to include — rather than reject — various
                    forms of (semi-)automated music <ptr target="#snickars2016"/>. Even though the
                    service differs from open platforms such as SoundCloud or YouTube, it is
                    definitively ajar to (un)intentional and/or calculated musical t(h)inkering,
                    whether brought about by humans or bots. In short, what is labeled as
                        <emph>music</emph> on Spotify is quite arbitrary — machines can for example
                    produce sounds and aggregate these. Then again, what is labeled as a
                        <emph>listener</emph> on Spotify is also random — our bots have as a matter
                    of fact <soCalled>listened</soCalled> to quite a lot of music.</p>
                <p>Another major research issue we have struggled with is the type of knowledge that
                    can be gained (and gleaned) from working with bots as informants. Are they to be
                    trusted? Can they produce valid empirical data to be used in, for example,
                    scholarly publications? We do think so. Yet, as a kind of virtual informants our
                    bots do not interactively and explicitly <emph>collect</emph> information,
                    rather they have been designed and set up to acquire and log certain data via
                    the <soCalled>actions</soCalled> and different functions they have been
                    programmed to perform. Nearly all of our bots have been Spotify Free users. The
                    setup has involved a few similar steps. Firstly, bots are named (selenium44,
                    selenium45, radon17, radion18 etcetera) and each given certain specified (or
                    random) characteristics (age, nationality, gender etcetera). Secondly, the bots
                    — in the form of virtual users — have been programmed to do specific tasks and
                    hence act as research informants within the Spotify web client. Within our
                    research project these have varied depending on what scholarly issues or tasks
                    we have been interested in. Some bots have been used to massively play a single
                    track repeatedly (as the many SpotiBots), others have been programmed to test
                    music recommendations based on gender (or age), and a third category have been
                    deployed to research so called <soCalled>radio looping</soCalled>, i.e the
                    algorithmic song recommendations that follow automatically when (in our case) a
                    bot picks a song and starts a <soCalled>radio channel</soCalled> within the
                    Spotify web client <ptr target="#snickars2017"/>.</p>
                <p>A typical <soCalled>bot experiment description</soCalled> (from the Spotify Radio
                    intervention above) gives a hint as to the ways we have been trying to design
                    our bots as <emph>active research informants</emph>. Usually our bot experiments
                    have been iterative. Importantly, all bots have been instructed to
                        <emph>log</emph> all their programmable actions and outcomes. Sometimes we
                    have also recorded their actions on video.
                <eg> 
All radio looping bots sign into the web client and starts Spotify’s radio
function — based on the following specifications:
<hi rend="bold">Bot1</hi> (<hi rend="italic">the obedient listener</hi>): Starts a radio station based on Abba’s “Dancing Queen”
and passively listens to the full loop. Run time 12 hours.
If the radio loop stops playing, the bot should be prepared to restart.
<hi rend="bold">Bot2</hi> (<hi rend="italic">the skipper</hi>): Starts a radio station based on Abba’s “Dancing Queen”
and skips every fifth song. Run time 12 hours.
If the radio loop stops playing, the bot should be prepared to restart.
<hi rend="bold">Bot3</hi> (<hi rend="italic">the liker</hi>): Starts a radio station based on Abba’s “Dancing Queen”
and likes every fifth song. Run time 12 hours.
If the radio loop stops playing, the bot should be prepared to restart.
<hi rend="bold">Bot4</hi> (<hi rend="italic">the disliker</hi>): Starts a radio station based on Abba’s “Dancing Queen”
and dislikes every fifth song. Run time 12 hours.
If the radio loop stops playing, the bot should be prepared to restart.
                </eg>
                </p>
                <p>It is sometimes said that when bots can pass for humans in a conversation — it
                    will be a milestone in artificial intelligence. <quote rend="inline" source="#x_spotifyteam2017">We live in
                        a world of bots</quote>, a recently published <title rend="quotes">botifesto</title> furthermore stated. Bots — in the form of sets of
                    algorithms — this botifesto argues, are both responsible for much of what
                    happens at <quote rend="inline" source="#x_spotifyteam2017">the backend of the internet</quote>, as well <cit>
                        <quote rend="inline" source="#woolley2016c">as playing a more active role in our everyday
                            lives</quote>
                        <ptr target="#woolley2016c"/>
                    </cit>. Automated systems’ increasing (in)ability to understand humans, in
                    short, point to the fact that bots are in vogue. It has even been suggested that
                    the obsession with bots is driven by a perceived fatigue with apps. Developers
                    are hence looking for new ways to reach consumers — Facebook has, for example,
                    decided that various businesses are allowed to deliver automated customer
                    support through chatbots within their messaging application Messenger. Given
                    that Spotify’s data exchanges with Facebook go back to 2011, it should hence
                    come as no surprise that in April 2017 Spotify announced that it was now <quote rend="inline" source="#x_spotifyteam2017">easier than ever to share and discover music within Facebook
                        Messenger with the new Spotify bot for Messenger with the all-new Chat
                        Extensions feature</quote>
                    <ptr target="#spotifyteam2017"/>.</p>
                <p>Acting as informants our research bots can be perceived as a similar kind of
                    virtual assistants. In a way they resemble the digital assistants that Silicon
                    Valley currently seems to favor — with the hope that AI-powered bot assistants
                    as Siri, Alexa, Cortana etcetera “will manage more and more of our digital
                    activities”, as the hype goes <ptr target="#newton2016"/>. We are, naturally,
                    aware of that bots are today programmed for a variety of reasons. They send news
                    articles to people (and write some of these too); bots can be used to manipulate
                    likes and followers; the bot-friendly design of Twitter differs from the
                    regulated one on Facebook (even if that is likely to change), and <emph>public
                        service bots</emph> as for example @earthquakeBot — <quote rend="inline" source="#x_newton2016">I
                        am a robot that tweets about any earthquakes 5.0 or greater as they
                        happen</quote> — informs about important geological circumstances.</p>
                <p>Even if some Twitter bots can search the Web for information (as well as post
                    collected material at predetermined times), bots are not usually programmed to
                    act as informants <emph>per se</emph> — and especially not in a music
                    environment. Naturally, there are exceptions: so called <emph>political
                        bots</emph> are for example increasingly used for ideological purposes to
                    gather information, change opinion, and enhance specific political objectives
                    (for good, ill, or in-between). It has even been argued that bots could become
                    the <quote rend="inline" source="#x_woolley2016b">go-to mode for negative campaigning in the age of
                        social media</quote>
                    <ptr target="#woolley2016b"/>. In addition, <emph>undercover bots</emph> have
                    for years been deployed to act as <soCalled>insiders</soCalled> when security
                    firms have tried to outsmart hackers, literally working as semi-automatic
                    informants. Bots have also increasingly started to get integrated into various
                    forms of cloud based team collaboration tools, as for example Slack. Such
                        <emph>collaborative bots</emph> facilitate and assist conversation. Still,
                    the difference between bot users and regular users is of course that instead of
                    interacting with a team via one of Slack’s apps, bot users are controlled
                    programmatically via a bot user token.</p>
                <p>The bots described above are all sophisticated ones. Yet, given the increasing
                    interest in bots and research around them <ptr target="#wooley2016a"/>
                    <ptr target="#davis2016"/>
                    <ptr target="#abokhodair2015"/>, we have refrained from simulating and building
                        <emph>really</emph> human-like bots. If a <soCalled>social bot</soCalled> is
                    a computer algorithm that automatically <quote rend="inline" source="#x_ferrara2016">produces content
                        and interacts with humans on social media, trying to emulate and possibly
                        alter their behavior</quote>
                    <ptr target="#ferrara2016"/> — then our bots run on simpler versions of code.
                    Then again, it remains to be stressed that even if our bots are not the most
                    sophisticated on the market (or in the academy), experiments and interventions
                    with them have been informed by profound considerations around bot culture and
                    its subsequent implications.</p>
                <p>Essentially, the bots we have programmed are scripted algorithms that exhibit
                    human-like behavior (in one way or the other) when
                        <soCalled>listening</soCalled> to music. Implemented in the Python
                    programming language, and using a web UI testing frameworks, our SpotiBot engine
                    has been able to automate the Spotify web client by simulating user interaction
                    within the web interface. In the implementation to conduct experiments with the
                    Spotify web client we have used a system framework originally designed for
                    automated tests of web pages. Normally its purpose has been to validate correct
                    behavior of software. Consequently, our bots have been designed to program user
                    activities and — importantly — log and record output of these (i.e. customize
                    scheduling, actions and logging of outcomes). Initially, our research project
                    designed and developed a rudimentary virtual machine (or run time engine) with
                    the capability to execute about 15 high level machine instructions such as
                        <q>register_account</q>, <q>login</q>, <q>logout</q>, <q>play_media</q>,
                        <q>follow_artist</q> that targeted a streaming media service provider
                    (Spotify). The selected instruction set hence corresponded to the most common
                    user interactions (in a web interface), and the set has also included primitives
                    for data capture (screenshots, playlists, video), as well as loops and
                    conditional execution. Using these instructions as buildings blocks, we have
                    been able to design various user scenarios (case studies). In short, given a
                    sequence of instructions, the virtual machine can execute them in turn, until an
                    end condition is reached. The selected instruction set has thus been generic
                    enough to, in theory, target basically any streaming service provider; that is,
                    the machine uses a streaming service driver and abstracts, as well as implements
                    each instruction for targeted services (Spotify, YouTube etcetera). Importantly,
                    the machine also includes features for management of timed and repeated
                    executions (of a case study), a reporting system to view results of executions,
                    as well as features for monitoring ongoing executions. Finally, our virtual
                    machine has used the popular Web testing framework, Selenium for access and
                    control of various web browsers.</p>
            </div>
            <div>
                <head>SpotiBot — Results and Anomalies</head>
                <p>One of the major controversies regarding the transition to streaming music
                    platforms involves payouts to artists. The sometimes heated discussion has, in
                    short, been centered around the issue <emph>if</emph> streaming music will be
                    able to generate a sustainable income for musicians — or not. Statistics vary
                    (and are often very hard to find), but estimations usually state that revenue
                    per played track range from $0,0003 to $0,0013 at streaming services as Spotify,
                    Apple Music or Deezer. Within the music industry this has led to considerable
                    debate; Taylor Swift decided to remove her entire back catalogue from Spotify,
                    and lesser known artists have experimented with different music-hacks or pranks.
                    These have ranged from the funk band Vulfpeck, and their conceptual album,
                        <title rend="quotes">Sleepify</title> — containing five minutes and 16
                    seconds of pure silence; asking fans to stream the album on repeat (while
                    sleeping) — and hacks by the band Ohm &amp; Sport and their application
                    Eternify, were for a (very) short time one could enter the name of a favorite
                    artist and play songs on repeat for economic support in 31-second intervals — to
                    the music spammer Matt Farley, who has personally released over 15,000
                    songs.</p>
                <p>At Humlab (Umeå University) we therefore set up an intervention — SpotiBot — with
                    the purpose to determine if it was possible to provoke, or to some extent
                    undermine, the Spotify business model in a similar manner. Confidential
                    agreements and record label contracts with Spotify vary, but royalties are
                    usually disbursed to artists (or more precisely, record labels) once a song or
                    track is <emph>registered</emph> as a play, which happens after 30 seconds. The
                    SpotiBot engine — with the ability to run a multiple of pre-programmed user bots
                    — was hence instructed to play a single track repeatedly for more and less than
                    30 seconds, and sometimes simultaneously with different accounts. Tracks
                    consisted both of self-produced music (from our research project; the artist Fru
                    Kost with the song <title rend="quotes">Avplock</title>) and Abba’s <title rend="quotes">Dancing Queen</title>. The fixed repetition scheme ran from
                    100 to <hi rend="italic">n</hi> times. The first round of bot experiments played
                    Fru Kost, the second round played Abba, and the third round played Abba again —
                    but with increasing multiple bots at the same time. The SpotiBot engine was, in
                    short, programmed to automate the Spotify web client by simulating bot
                    interaction within the interface in the following way:</p>
                <eg>
1.1     SpotiBots plays Fru Kost “Avplock” for 25 seconds – repeat 100 times.
1.2     SpotiBots plays Fru Kost “Avplock” for 35 seconds – repeat 100 times.
1.3     SpotiBots plays Fru Kost “Avplock” for 35 seconds – repeat 1,000 times.
1.4     10 SpotiBots plays Fru Kost “Avplock” for 35 seconds – repeat n times ...
                    
2.1     SpotiBots plays Abba “Dancing Queen” for 25 seconds – repeat 100 times.
2.2     SpotiBots plays Abba “Dancing Queen” for 35 seconds – repeat 100 times.
2.3     SpotiBots plays Abba “Dancing Queen” for 35 seconds – repeat 1,000 times.
                    
3.1     10 SpotiBots plays Abba “Dancing Queen” for 25 seconds – repeat 100 times.
3.2     10 SpotiBots plays Abba “Dancing Queen” for 35 seconds – repeat 100 times.
3.3     100 SpotiBots plays Abba “Dancing Queen” for 35 seconds – repeat 100 times.
3.4     1,000 SpotiBots plays Abba “Dancing Queen” for 35 seconds – repeat n times ...            
                </eg>
                <p>From a computational perspective the Spotify web client appeared as a black box;
                    the logics that the Spotify application was governed by was, for example, not
                    known in advance, and the web page structure (in HTML) and client side scripting
                    quite complex. It was not doable within the experiment to gain a fuller
                    understanding of the dialogue between the client and the server. As a
                    consequence, the development of the SpotiBot-experiments was (to some extent)
                    based on ‘trial and error’ to find out how the client behaved, what kind of data
                    was sent from the server for different user actions etcetera. In addition, since
                    our bot experiments violated (some of) Spotify’s user agreements, a VPN
                    connection was used that hid the running clients behind a public proxy IP
                    outside of the university network. The selected VPN proxy service was very cheap
                    (used by private consumers) and the stability of the connection was not entirely
                    predictable.</p>
                <p>Figure 1 and Figure 2 give a graphic estimation of some results from our
                    experiments. In the first one, the SpotiBot engine was able to play Fru Kost’s
                    track, repeatedly for 25 and 35 seconds. The bot <soCalled>selenium57</soCalled>
                    for example played the track 229 times, and the
                        <soCalled>selenium_bot</soCalled> as many as 1,141 times repeatedly — that
                    is, after 35 seconds of <title rend="quotes">Avplock</title>, the bot started
                    the song again, and again, and again (i. e. more than eleven hundred times in a
                    row). Similarly, in the second experiment, <soCalled>selenium_bot37</soCalled>
                    was able to repeatedly play Abba’s <title rend="quotes">Dancing Queen</title>
                    for 35 seconds, at repeated intervals of 16 times, 208, 30, 1,141, 19, 20 times
                    etcetera — to repeat: after 35 seconds of <title rend="quotes">Dancing
                        Queen</title>, the bot started the song again, and again, and again.</p>
                <figure>
                    <head>Different SpotiBots playing Fru Kost <title rend="quotes">Avplock</title>,
                        repeatedly for 25 or 35 seconds (never mind negative results).</head>
                    <graphic url="resources/figure01.jpg"/>
                </figure>
                <figure>
                    <head><soCalled>selenium_bot37</soCalled> repeatedly plays Abba’s <title rend="quotes">Dancing Queen</title>” for 35 seconds — with recurrent and
                        (often) unknown Chrome browser errors (never mind negative results).</head>
                    <graphic url="resources/figure02.jpg"/>
                </figure>
                <p>Apart from the possibility of <emph>actually</emph> being able to automatically
                    (and repeatedly) play tracks on Spotify via bots, one preliminary result
                    indicate that there was no major difference between our bots playing artist like
                    Fru Kost <emph>or</emph> Abba for 25 <emph>or</emph> 35 seconds. For the Spotify
                    system, both artists were simply content. Our hypothesis was that playing tracks
                    repeatedly for 25 seconds would (at least in theory) not be a problem, since
                    such plays are not regarded as a registered play by the Spotify system. This was
                    also true. On one occasion the bot “selenium51” played Abba 550 repeated times
                    for 25 seconds, and on another the “selenium_bot” managed to play Fru Kost 100
                    repeated times for 25 seconds. Then again, we did not discover <emph>any</emph>
                    statistical difference if the same songs were played repeatedly during 35
                    seconds — even if they were then registered as a play (and subsequent royalties
                    were registered). </p>
                <p>A second preliminary result was that our third experiment (using a large number
                    of parallel bots to play Abba’s <title rend="quotes">Dancing Queen</title>)
                    could not really be executed on available hardware since it would have required
                    investment in a lot of new machines. In a lighter setup, however, we used more
                    than 20 bots running in parallel on two computers (virtual machines) each
                    interacting with a Spotify web client, repeatedly playing the same Abba track
                    hundreds of times. Chart 3. gives a graphic estimation of some of the results.
                    In theory (if we had the financial abilities) we definitively believe it would
                    be possible to perform a massive <soCalled>bot setup</soCalled> with hundreds of
                    clients running in parallel on a larger number of (possibly cloud based)
                    servers. Our simple experiments, in fact, clearly indicates the ease in which
                    hundreds of bots can be setup in parallel. In another experiment at Humlab we
                    have, for example, set up 50 parallel bots using five virtual machines (Windows
                    10 clients) on two computers running Microsoft Hyper-V server (in total ten
                    virtual machines running five bots each). It is easy to extrapolate this to
                    hundreds, perhaps even thousands, of bots running in parallel with additional
                    hardware, or the use of leaner clients, cloud services or distributed computing
                    efforts.</p>
                <figure>
                    <head>Multiple SpotiBots playing ABBA’s <title rend="quotes">Dancing
                            Queen</title>, simultaneously and repeatedly for 25 or 35 seconds (never
                        mind negative results)</head>
                    <graphic url="resources/figure03.jpg"/>
                </figure>
                <p>In fact, this type of massive music hack (seems to) have been executed
                    previously. In an article on Motherboard.com, the music journalist William
                    Bedell, for example describes how he decided to <quote rend="inline" source="#x">prototype a
                        robot with an endless appetite for music to see if Spotify could detect what
                        it was doing</quote>. His aim was to program a botnet on his <quote rend="inline" source="#x">old laptop to generate $30 a day in fake Spotify
                        listens</quote>” — and he claims to have succeeded (even if there is no
                    documentation of how he actually coded his bots). Automated streaming, following
                    Bedell, could thus be seen as <quote rend="inline" source="#x">a lucrative heist involving
                        robots emulating humans</quote>. Performing his hack he did not <quote rend="inline" source="#x">encounter many Turing tests … There wasn’t even a CAPTCHA or
                        email verification when creating accounts</quote>. His conclusion was hence
                    similar to ours: <cit>
                        <quote rend="inline" source="#bedell2015">The barriers to entry are clearly minimal.</quote>
                        <ptr target="#bedell2015"/>
                    </cit></p>
                <p>Bedell’s hack resembles a similar one made in 2013 by Peter Filmore. As a
                    payments security expert, Filmore wanted to test the robustness of
                    music-streaming services, and particularly if they had any fraud detection
                    systems in place — which it turned out, they hadn’t. Apparently, Fillmore made
                    around a thousand dollar (he claims he was repeatedly playing his own
                        <soCalled>music</soCalled>) on the streaming service Rdio. One of his
                    conclusions was that many music streaming services lacked automated analysis
                    regarding suspected fraudulent plays <ptr target="#fiveash2013"/>. </p>
                <p>Basically, the results from our experiments with the SpotiBot engine, confirm
                    Bedell’s and Filmore’s hacks. The defense mechanisms used by Spotify to prevent
                    our experiments have been insufficient — or remained unknown. In fact, it has
                    proven more or less impossible in advance to predict how, or when, different
                    kind of fraud detection systems have been activated (or not). It is worth
                    stressing, however, that our bots are more advanced than the ones Bedell and
                    Filmore programmed. They appear to have been <soCalled>fixed
                        programmed</soCalled> with the purpose to <emph>only</emph> play songs — not
                    register and log any outcomes, nor <soCalled>interact</soCalled> with a web
                    client or be able to perform different tasks. Filmore’s bots were programmed in
                    Bash, a command-line interface in Linux — indeed scalable, yet without any form
                    of web interface interaction.</p>
                <p>One of the core assumptions in our research project has been to use bots as
                    informants in multiple ways. As a consequence, they have been designed as
                        <soCalled>programmable bots</soCalled> with the ability to receive
                    instructions to perform different task (depending on the purpose of the
                    intervention or experiment). Then again, even if our programmable bots were
                    arguably more sophisticated than Bedell’s and Filmore’s, an important result
                    from our SpotiBot interventions is still that a huge number of deviations did
                    interrupt the Spotify web client, causing a number of our bots to stop playing.
                    The SpotiBot setup was based on an <emph>ideal</emph> bot usage flow, and
                        <emph>all</emph> deviations would in practice interrupt the client
                    execution. This is the main reason (we believe) why so many of our bots did not
                    perform the exact amount of repeated plays they were programmed to perform. If
                    truth be told, nearly <emph>all</emph> of our bots — within the three rounds of
                    experiments — stopped at random occasions. Most frequently deviations were
                    caused by wrong behavior by the bot, due to lack of knowledge of client logic. A
                    lot of the interrupts were, in addition, caused by synchronization problems,
                    where a bot tried to access parts of the user interface not yet loaded (or not
                    yet visible). A number of fixes for synchronization issues were, consequently,
                    added to various actions in order to compensate for waits or components/features
                    to become available. Still, even though the used framework, Selenium, had a good
                    support for these kind of errors, the software didn’t always behave as we
                    expected. Bot ‘clicking’ on a component not visible on the screen (that is, not
                    within the scroll region) caused a number of errors with the Chrome browser, for
                    instance — something that would almost never happen for a <emph>real</emph> user
                    since it would be impossible to click outside a visible window area. Other
                    problems were even harder to counteract, as for example network problems,
                    performance problems related to used hardware, or unexpected resource usage of
                    the Spotify web clients.</p>
                <p>Our setup used the same IP for all clients which also made it difficult to
                    determine if interruptions were caused by the actual setup, or by high volume
                    originating from the same IP. Given more resources, it would however (in theory)
                    be simple to use multiple VPN proxies to distribute the net load over several
                    IP’s. Some Spotify web client interrupts were also (most likely) caused by
                    network problems at the VPN service provider. The client VPN, in short,
                    sometimes refused to reconnect automatically after disconnects, which caused the
                    SpotiBots to halt execution. Furthermore, a single virtual machine (under
                    Microsoft-V system) was used for all of our SpotiBot experiments. The VM ran in
                    a shared environment with several other virtual machine on a host machine
                    running Microsoft Server 2012. Some interrupts of the experiments were caused by
                    inappropriate system configuration (automated software updates on both host
                    server and client), system maintenance that unexpectedly disconnected the VPN, a
                    couple of power outages (badly configured UPS), as well as limited resources
                    (physical memory) assigned to the client virtual machine.</p>
                <p>To sum up our problems, the bots we programmed to listen to the Spotify web
                    client were not only disobedient — they were inserted into a non-compliant
                    system full of latent errors. As a consequence, our SpotiBots stopped
                        <soCalled>listening</soCalled> on (in)numerous occasions. This led to a
                    situation where much more supervision and program correction than anticipated
                    was needed. In addition, lots of interrupts in our experiments occurred off
                    hour, when the SpotiBot engine was without supervision at Humlab. It caused
                    repeated restarts of interventions as well as delays in the execution. All in
                    all, our bots weren’t really ‘battle-tested’ before our experiments began, and a
                    lot of bugs were constantly found that needed fixing. Certain aspects of the
                    bots logic also needed fine-tuning, most often related to waits for element to
                    be present, visible, clickable etcetera. Bots focused on the single task of
                    playing music could have been designed in much simpler way like Bedell’s and
                    Filmore’s bots. But we kept our design — mainly due to the data capture features
                    that was a crucial part of the <soCalled>bot tasks</soCalled>. In later
                    experiments and interventions within our project, however, our bots have shown a
                    high level of stability.</p>
            </div>
            <div>
                <head>Conclusion</head>
                <p>It has sometimes been argued that digitization <quote rend="inline" source="#x_hwang2012">drives
                        botification</quote>, where the use of technology in <quote rend="inline" source="#x_hwang2012">a
                        realm of human activity enables the creation of software to act in lieu of
                        humans</quote>. When bots become sufficiently sophisticated and numerous, as
                    well as embedded within the systems within which they operate, <quote rend="inline" source="#x_hwang2012">these automated scripts can significantly shape</quote> human
                    systems <ptr target="#hwang2012"/>. These are considerations and reflections
                    around the relationship between man and machine worth thinking twice about.
                    Within our project we have, for example, repeatedly asked ourselves if
                    aggregated <soCalled>music</soCalled> or <soCalled>listeners</soCalled> at
                    Spotify <quote rend="inline" source="#x_hwang2012">drive botification</quote> as some have assumed —
                    and if so: how do these automated scripts feedback and reshape listening
                    behaviors? We have basically, deployed our bots in a <emph>single</emph> manner
                    — yet, naturally, a more intricate situation would occur if one started looking
                    at our bots <emph>collectively</emph>, and in a more systematic manner. That is,
                    not as isolated units of code, but as a kind of <emph>complex of bots</emph>, a
                    botnet <soCalled>acting</soCalled> together within the Spotify environment,
                    shaping and tuning the system, evolving and transforming over time. The relation
                    between listener and system in a streaming music environment as Spotify is hence
                    complicated — not the least due to the vast amount of available music.
                    Estimations vary, but roughly one-fifth of Spotify’s catalogue of some 30
                    million songs haven’t once been listened to by anyone (neither man, nor
                    machine). In fact, the main reason for purchasing manipulated <emph>bot
                        promotion</emph> in the form of fake likes, followers or listeners are due
                    to Spotify’s swelling back catalogue — of unheard music.</p>
                <p>Working with bots as research informants, this article has suggested a set of
                    concrete methodologies for performing humanist inquiry on black-boxed media
                    services (as Spotify) that today increasingly serve as key delivery mechanisms
                    for cultural materials. Essentially, we used uncomplicated bots in order to test
                    a streaming music environment — again, one of the used system frameworks
                    (Selenium) originally deals with automations of web pages. Yet, even if we
                    encountered a number of problems within our SpotiBot intervention, our bots
                    demonstrated an ability to continuously play tracks, indicating that the Spotify
                    business model can indeed be tampered with. One finding from our intervention is
                    hence that that Spotify’s algorithms (at least at the time of our experiment)
                    could not tell human and bot listening apart. Later experiments within our
                    research project — for example around measurements of loop patterns and
                    repetitiveness on Spotify Radio <ptr target="#snickars2017"/> — has also gained
                    a lot of insights from the ironing out of bugs within the SpotiBot intervention,
                    which consequently has made our bot engine much more stable. Even if we
                    encountered a number of problems and random deviations that interrupted client
                    execution, the general results from our SpotiBot intervention do indicate that
                    it is possible to automatically play tracks for thousands of repetitions that
                    exceeds the royalty rule at Spotify. Admittedly, a more robust setup, with
                    frequent and repeated testing — based on increased knowledge around client logic
                    — would have made our bots less disobedient, and more successful in their
                    listening habits. Still, since our experiments do raise a number of research
                    ethical issues <ptr target="#eriksson2018"/>, such a resilient intervention infrastructure would all likely
                    have increased our hesitations around musical manipulation. In the end, Abba
                    become a tiny fraction wealthier — and we also made (a very, very small amount
                    of) money ourselves. Research can be rewarding.</p>
            </div>

        </body>
        <back>
            <listBibl>
                <bibl xml:id="abokhodair2015" label="Abokhodair et al. 2015">N. Abokhodair, D. Yoo,
                    &amp; D.W. McDonald. Dissecting a social botnet: Growth, content and influence
                    in Twitter. <title rend="italic">CSCW ’15: Proceedings of the 18th ACM
                        Conference on Computer Supported Cooperative Work &amp; Social
                        Computing</title>, 839–851.</bibl>
                <bibl xml:id="anderson2015" label="Anderson 2015">Anderson, P.A. <title rend="quotes">Neo-Muzak and the Business of Mood</title>. <title rend="italic">Critical Inquiry</title> 41(4), 811-840.</bibl>
                <bibl xml:id="avindh2016" label="AVinDH 2016">
                    <title rend="quotes">AVinDH SIG | Special Interest Group AudioVisual material in
                        Digital Humanities</title>. Available at: <ref target="https://avindhsig.wordpress.com/">https://avindhsig.wordpress.com/</ref> [Accessed 20 April 2017].</bibl>
                <bibl xml:id="barber2016" label="Barber 2016">Barber, J.F.<title rend="quotes">Sound
                        and Digital Humanities: reflecting on a DHSI course.</title>
                    <title rend="italic">Digital Humanities Quarterly</title> 10.1. Available at:
                        <ref target="http://digitalhumanities.org/dhq/vol/10/1/000239/000239.html">http://digitalhumanities.org/dhq/vol/10/1/000239/000239.html</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="bedell2015" label="Bedell 2015">Bedell, W. <title rend="quotes">I
                        Built a Botnet that Could Destroy Spotify with Fake Listens</title>. <title rend="italic">The Motherboard</title> October 16. Available at: <ref target="http://motherboard.vice.com/read/i-built-a-botnet-that-could-destroy-spotify-with-fake-listens">http://motherboard.vice.com/read/i-built-a-botnet-that-could-destroy-spotify-with-fake-listens</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="boshmaf2011" label="Boshmaf et al. 2011"> Boshmaf, Y., Muslukhov, I.,
                    Beznosov, K. &amp; Ripeanu, M. <title rend="quotes">The socialbot network: When
                        bots socialize for fame and money</title>. <title rend="italic">ACSAC ’11:
                        Proceedings of the 27th Annual Computer Security Applications
                        Conference</title>, 93–102.</bibl>
                <bibl xml:id="brügger2016" label="Brügger 2016">Brügger, N. <title rend="quotes">Digital Humanities in the 21st Century: Digital Material as a Driving
                        Force</title>. <title rend="italic">Digital Humanities Quarterly</title>
                    10.2. Available at: <ref target="http://www.digitalhumanities.org/dhq/vol/10/3/000256/000256.html">http://www.digitalhumanities.org/dhq/vol/10/3/000256/000256.html</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="clement2016a" label="Clement 2016">Clement, T. <title rend="quotes">Towards a Rationale of Audio-Text</title>. <title rend="italic">Digital
                        Humanities Quarterly</title> 10.2. Available at: <ref target="http://www.digitalhumanities.org/dhq/vol/10/2/000254/000254.html">http://www.digitalhumanities.org/dhq/vol/10/2/000254/000254.html
                    </ref>[Accessed 20 April 2017].</bibl>
                <bibl xml:id="clement2016b" label="Clement and McLaughlin 2016">Clement, T. &amp;
                    McLauglin, S. <title rend="quotes">Measured Applause: Toward a Cultural Analysis
                        of Audio Collections</title>
                    <title rend="italic">Journal of Cultural Analytics</title> 1.1. Available at:
                        <ref target="http://culturalanalytics.org/2016/05/measured-applause-toward-a-cultural-analysis-of-audio-collections/">http://culturalanalytics.org/2016/05/measured-applause-toward-a-cultural-analysis-of-audio-collections/</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="davis2016" label="Davis et al. 2016">Davis, C. A., Varol O. &amp;
                    Ferrara, E. BotOrNot. <title rend="quotes">A System to Evaluate Social
                        Bots</title>. <title rend="italic">WWW ‘16 Companion Proceedings of the 25th
                        International Conference Companion on World Wide Web</title>, 273-274.
                    Available at: <ref target="http://dl.acm.org/citation.cfm?id=2889302">http://dl.acm.org/citation.cfm?id=2889302</ref> [Accessed 20 April 2017].</bibl>
                <bibl xml:id="eriksson2018" label="Eriksson 2018 (forthcoming)">M. Eriksson, R. Fleischer, A. Johansson, P. Snickars and P. Vonderau. <title rend="italic">Spotify Teardown. Inside the Black Box of Streaming Music</title>. Cambridge, Mass. MIT Press (forthcoming). </bibl>
                <bibl xml:id="fleischer2017" label="Fleischer and Snickars 2017">Snickars, P. <title rend="quotes">Discovering Spotify</title>. <title rend="italic">Culture Unbound</title> 9.2, 130-221 (thematic issue)</bibl>
                <bibl xml:id="ferrara2016" label="Ferrara et al. 2016">E. Ferrara, O. Varol, C.B. Davis, F. Menczer and A. Flammini. <title rend="quotes">The Rise of Social Bots</title>.
                    <title rend="italic">Communications of the ACM</title> 59 (7), 96-104.
                </bibl>
                <bibl xml:id="fiveash2013" label="Fiveash 2013"><title rend="quotes">Aussie bloke
                        hacks way to top of music charts with MIDI-based tunes</title>.<title rend="italic">The Register</title>. 11 May. Available at: <ref target="http://www.theregister.co.uk/2013/11/05/peter_fillmore_hacks_into_online_charts/">http://www.theregister.co.uk/2013/11/05/peter_fillmore_hacks_into_online_charts/</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="foka2016" label="Foka and Arvidsson 2016">Foka, A. &amp; Arvidsson, V.
                        <title rend="quotes">Experiential Analogies: A Sonic Digital Ekphrasis as a
                        Digital Humanities Project</title>. <title rend="italic">Digital Humanities
                        Quarterly</title> 10.2. Available at: <ref target="http://www.digitalhumanities.org/dhq/vol/10/2/000246/000246.html">http://www.digitalhumanities.org/dhq/vol/10/2/000246/000246.html</ref>
                    [Accessed 20 April 2017]. </bibl>
                <bibl xml:id="friesinger2014" label="Friesinger and Herwig 2014">Friesinger, G.
                    &amp; Herwig, J. (eds.).- <title rend="italic">The Art of Reverse
                        Engineering.</title> Bielefeld: Transcript.</bibl>
                <bibl xml:id="galuszka2015" label="Galuszka 2015">Galuszka, P. <title rend="quotes">Music Aggregators and Intermediation of the Digital Music Market</title>.
                        <hi rend="italic">International Journal of Communication</hi> 9,
                    254–273.</bibl>
                <bibl xml:id="garfinkel1967" label="Garfinkel 1967">Garfinkel, H. <title rend="italic">Studies in Ethnomethodology</title>. Englewood Cliffs,
                    Prentice Hall.</bibl>
                <bibl xml:id="gheel2014" label="Gheel 2014">Gheel, R. W. <title rend="italic">Reverse Engineering Social Media. Software, Culture, and Political Economy
                        in New Media Capitalism</title> Philadelphia: Temple University
                    Press.</bibl>
                <bibl xml:id="hwang2012" label="Hwang et al. 2012">Hwang, T, Pearce, I. &amp; Nanis,
                    M. <title rend="quotes">Socialbots: voices from the fronts</title>. <title rend="italic">Interactions</title> 19.2. Available at: <ref target="http://dl.acm.org/citation.cfm?id=2090161">http://dl.acm.org/citation.cfm?id=2090161</ref> [Accessed 20 April
                    2017].</bibl>
                <bibl xml:id="jdwhicker2016" label="Jdwhicker 2016"><title rend="quotes">[All
                        Platforms][Other] Stop the spam bots</title>. <title rend="italic">Spotify
                        Community Blog</title>. 16 March 2016. Available at: <ref target="https://community.spotify.com/t5/Closed-Ideas/All-Platforms-Other-Stop-the-spam-bots/idi-p/1308638">https://community.spotify.com/t5/Closed-Ideas/All-Platforms-Other-Stop-the-spam-bots/idi-p/1308638</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="madrigal2014" label="Madrigal 2014">Madrigal, A. C. <title rend="quotes">How Netflix Reverse Engineered Hollywood</title>. <title rend="italic">The Atlantic</title> January 2. <ref target="https://www.theatlantic.com/technology/archive/2014/01/how-netflix-reverse-engineered-hollywood/282679/">https://www.theatlantic.com/technology/archive/2014/01/how-netflix-reverse-engineered-hollywood/282679/</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="morris2015" label="Morris and Powers 2015">Morris, JW. J and D.
                    Powers. <title rend="quotes">Control, Curation and Musical Experience in
                        Streaming Music Services</title>. <title rend="italic">Creative Industries
                        Journal</title> 8.2., 106-22.</bibl>
                <bibl xml:id="newton2016" label="Newton 2016">Newton, C. <title rend="quotes">The
                        Search for the Killer Bot</title>. <title rend="italic">The Verge</title> 6
                    January. Available at: <ref target="http://www.theverge.com/2016/1/6/10718282/internet-bots-messaging-slack-facebook-m">http://www.theverge.com/2016/1/6/10718282/internet-bots-messaging-slack-facebook-m</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="robles-anderson2016" label="Robles-Anderson and Svensson 2016">Robles-Anderson, E. &amp; Svensson, P. <title rend="quotes">One Damn Slide
                        After Another: PowerPoint at Every Occasion for Speech</title>. <title rend="italic">Computational Culture</title>. 15 January. Available at: <ref target="http://computationalculture.net/article/one-damn-slide-after-another-powerpoint-at-every-occasion-for-speech">http://computationalculture.net/article/one-damn-slide-after-another-powerpoint-at-every-occasion-for-speech</ref>
                    [Accessed 20 April 2017].</bibl>
                <bibl xml:id="schwarz2013" label="Schwarz 2013"> Schwarz, J. A. <title rend="italic">Online File Sharing: Innovations in Media Consumption</title>. London:
                    Routledge.</bibl>
                <bibl xml:id="snickars2016" label="Snickars 2016">Snickars, P. <title rend="quotes">More music is better music</title>. In P. Wikström &amp; R. DeFillippi
                    (eds), <title rend="italic">Business Innovation and Disruption in the Music
                        Industry</title>. London, Edgar Elgar.</bibl>
                <bibl xml:id="snickars2017" label="Snickars 2017">Snickars, P. <title rend="quotes">More of the Same — On
                    Spotify Radio</title>. <title rend="italic">Culture Unbound</title> 9.2, 184-211.</bibl>
                <bibl xml:id="spotifyteam2017" label="Spotify Team 2017">Spotify Team. <title rend="quotes">Find, Share and Listen to Spotify Song Clips with Friends
                        Directly within Messenger</title>. <title rend="italic">Spotify
                    Blog</title>. 18 April. Available at: <ref target="https://news.spotify.com/us/2017/04/18/find-share-and-listen-to-spotify-song-clips-with-friends-directly-within-messenger/                         ">https://news.spotify.com/us/2017/04/18/find-share-and-listen-to-spotify-song-clips-with-friends-directly-within-messenger/
                    </ref> [Accessed 20 April 2017].</bibl>
                <bibl xml:id="turing1950" label="Turing 1950">Turing, A. <title rend="quotes">Computing Machinery and Intelligence</title>. <title rend="italic">Mind</title> 49, 433–460. Available at:
                    http://www.csee.umbc.edu/courses/471/papers/turing.pdf [Accessed 20 April
                    2017].</bibl>
                <bibl xml:id="wikström2013" label="Wikström 2013">Wikström, P. <title rend="italic">The Music Industry</title>. Cambridge: Polity Press.</bibl>
                <bibl xml:id="wikström2016" label="Wikström and DeFilippi 2016">Wikström, P. &amp;
                    DeFillippi, R. (eds). <title rend="italic">Business Innovation and Disruption in
                        the Music Industry</title>. London, Edgar Elgar.</bibl>
                <bibl xml:id="wooley2016a" label="Woolley 2016">Woolley, S. <title rend="quotes">Automating Power: Social Bot Interference in Global Politics</title>.
                        <title rend="italic">First Monday</title> (21) 4. Available at: <ref target="http://firstmonday.org/ojs/index.php/fm/article/view/6161/5300#author">http://firstmonday.org/ojs/index.php/fm/article/view/6161/5300#author</ref>
                    [Accessed 20 April 2017]. </bibl>
                <bibl xml:id="woolley2016b" label="Woolley and Howard 2016">Woolley, S. &amp;
                    Howard, P. <title rend="quotes">Bots Unite to Automate the Presidential
                        Election</title>. <title rend="italic">Wired</title>. 15 May 2016. Available
                    at: <ref target="http://www.wired.com/2016/05/twitterbots-2/">http://www.wired.com/2016/05/twitterbots-2/</ref> [Accessed 20 April
                    2017].</bibl>
                <bibl xml:id="woolley2016c" label="Woolley et al. 2016">Woolley, S. et al. <title rend="quotes">A Botifesto</title>. <title rend="quotes">How to Think About
                        Bots</title>. Available at:
                    http://motherboard.vice.com/read/how-to-think-about-bots [Accessed 20 April
                    2017]. </bibl>
            </listBibl>

        </back>
    </text>
</TEI>