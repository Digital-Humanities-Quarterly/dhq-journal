<html xmlns="http://www.w3.org/1999/xhtml">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
      <title>[PREVIEW] DHQ: Digital Humanities Quarterly: </title>
      <link href="../../common/css/dhq.css" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_screen.css" media="screen" type="text/css" rel="stylesheet" />
      <link href="../../common/css/dhq_print.css" media="print" type="text/css" rel="stylesheet" />
      <style type="text/css">
        #mainContent {
          float: none;
          padding-top: 2em;
          padding-left: 4em;
          padding-right: 4em;
          margin-left: 225px;
           
        }</style>
   </head>
   <body>
      <div id="mainContent">
         <div class="DHQarticle">
            <div id="pubInfo">Preview<br />Volume 017 Number 2</div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            	
            	
            <div class="DHQheader">
               		
               			
               				
               <h1 class="articleTitle lang en">“Any Means Necessary to
                  						Refuse Erasure by Algorithm:” Lillian-Yvonne Bertram’s Travesty
                  					Generator</h1>
               				
               <div class="author"><span style="color: grey"> Zach Whalen
                     					</span> &lt;<a href="mailto:zwhalen_at_umw_dot_edu" onclick="javascript:window.location.href='mailto:'+deobfuscate('zwhalen_at_umw_dot_edu'); return false;" onkeypress="javascript:window.location.href='mailto:'+deobfuscate('zwhalen_at_umw_dot_edu'); return false;">zwhalen_at_umw_dot_edu</a>&gt;, University of Mary Washington</div>
               
               
               			
               			
               			
               		
               		
               		
               	<span class="Z3988" title="url_ver=Z39.88-2004&amp;ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rfr_id=info%3Asid%2Fzotero.org%3A2&amp;rft.genre=article&amp;rft.atitle=Any%20Means%20Necessary%20to%20Refuse%20Erasure%20by%20Algorithm%3A%20Lillian-Yvonne%20Bertram%E2%80%99s%20Travesty%20Generator&amp;rft.jtitle=Digital%20Humanities%20Quarterly&amp;rft.stitle=DHQ&amp;rft.issn=1938-4122&amp;rft.date=2023-07-17&amp;rft.volume=017&amp;rft.issue=2&amp;rft.aulast=Whalen&amp;rft.aufirst=Zach&amp;rft.au=Zach%20Whalen"> </span></div>
            	
            	
            	
            <div id="DHQtext">
               		
               		
               			
               <div id="abstract">
                  <h2>Abstract</h2>
                  				
                  <p>Lillian-Yvonne Bertram's 2019 book of poetry is titled <cite class="title italic">Travesty Generator</cite> in reference to Hugh Kenner and Joseph
                     					O'Rourke's Pascal program to “fabricate
                     						pseudo-text” by producing text such that each n-length string
                     					of characters in the output occurs at the same frequency as in the source
                     					text. Whereas for Kenner and O'Rourke, labeling their work a
                     						“travesty” is a hyperbolic tease or a literary
                     					burlesque, for Bertram, the travesty is the political reality of racism in
                     					America. For each of the works <cite class="title italic">Travesty
                        						Generator</cite>, Bertram uses the generators of computer poetry to
                     					critique, resist, and replace narratives of oppression and to make explicit
                     					and specific what is elsewhere algorithmically insidious and
                     					ambivalent.</p>
                  
                  				
                  <p>In “Counternarratives”, Bertram presents
                     					sentences, fragments, and ellipses that begin ambiguously but gradually
                     					resolve point clearly to the moment of Trayvon Martin's killing. The poem
                     					that opens the book, “three_last_words”, is at a
                     					functional level a near-echo of the program in Nick Montfort's “I AM THAT I AM”, which is itself a version or
                     					adaptation of Brion Gysin's permutation poem of the same title. But
                     					Bertram’s poem has one important functional difference in that Bertram's
                     					version retains and concatenates the entire working result. With this
                     					modification, the memory required to produce all permutations of the
                     					phrase, “I can’t breathe”, is sufficiently
                     					greater than the storage available most computers, so the poem will end in
                     					a crashed runtime or a frozen computer--metaphorically reenacting and
                     					memorializing Eric Garner’s death. Lillian-Yvonne Bertram's <cite class="title italic">Travesty Generator</cite> is a challenging, haunting,
                     					and important achievement of computational literature, and in this essay, I
                     					expand my reading of this book to dig more broadly and deeply into how
                     					specific poems work to better appreciate the collection's contribution to
                     					the field of digital poetry.</p>
                  			</div>
               			
               		
               		
               			
               <div class="div div0">
                  				
                  				
                  <div class="counter"><a href="#p1">1</a></div>
                  <div class="ptext" id="p1">
                     					
                     <blockquote>
                        <p>
                           						 A NATION OF SPECIFIC
                           							CHAINS ON SHIPS CROSSING AN OCEAN SUMMONING AN MEANS NECESSARY TO
                           							REFUSE ERASURE BY ALGORITHM A NATION OF REGULATED FRAY RIOTING
                           							DIGGING UP ANY MEANS NECESSARY TO REFUSE ERASURE BY ALGORITHM A
                           							NATION OF OLD DISPOSSESSIONS IN THE SHIP’S HOLD UNEARTHING ANY
                           							MEANS NECESSARY TO REFUSE ERASURE BY ALGORITHM 
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p2">2</a></div>
                  <div class="ptext" id="p2"> The passage quoted here is from Lillian-Yvonne Bertram’s poem, “A NEW SERMON ON THE WARPLAND”, which is included
                     					in their 2019 collection, <cite class="title italic">Travesty Generator</cite>.
                     					All told, the poem includes 26 of these cinquains, and because the poem
                     					bears the subtitle “a poem by algorithm,” an
                     					attentive reader can deduce the function of that implied code. One can
                     					infer that it makes use of a template similar to the following: </div>
                  				
                  <div class="counter"><a href="#p3">3</a></div>
                  <div class="ptext" id="p3">
                     					
                     <blockquote>
                        <p> A NATION OF &lt;NOUN&gt; &lt;PREPOSITION&gt;
                           						&lt;VERB&gt; ANY MEANS NECESSARY TO REFUSE ERASURE BY ALGORITHM
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <blockquote class="eg">
                     <pre><code class="perl">
					#!usr/bin/perl @d=split/_/,switch_gods_switch_black_codes_you_when_you__where_god_belong_black_hills_to; {$_=localtime;/(..):(.)(.):(.)(.)/;print"\\"x$5." $d[$1] $d[$2] $d[3] $d[$4] $d[$5] $d[$8]\n";sleep 1; while $d &gt; 0}{print"\\"x$5." $d[$3] $d[$6]\n";}}redo
				</code></pre>
                  </blockquote>
                  
                  				
                  <div class="counter"><a href="#p4">4</a></div>
                  <div class="ptext" id="p4"> Bertram notes that some of the words in this poem come from Gwendolyn Brooks
                     						“sermon on the warpland”. In addition, the
                     					cinquain template and the lists that supply words into its frame is based
                     					on <cite class="title italic">A HOUSE OF DUST</cite> by Alison Knowles and James
                     					Tenney. And yet, even though this poem is oriented by these two
                     					contingencies, it is still Bertram's voice and vision that assembles these
                     					words into ideas and their meanings. The lineage that informs this poem is
                     					an important part of its meaning, and the software that creates the text is
                     					not mere technology but an ideologically-committed framework that operates
                     					on legacies of systemic racism: algorithms that erase; specific chains. </div>
                  
                  				
                  <div class="counter"><a href="#p5">5</a></div>
                  <div class="ptext" id="p5">Critical Code Studies is a practical method of inquiry that applies literary
                     					and critical hermeneutics to computer code. In many cases, as in reading
                     					the source code of an application or a webpage, one may be tempted to read
                     					computational media and programmed objects as inherently dual -- a legible,
                     					playable, visible surface and the normally invisible code that directs the
                     					machine to create that surface. Mark Marino and others have disrupted the
                     					neat division of surfaces and the depths they obscure by turning a
                     					critical, hermeneutial lens onto code as yet another textual surface where
                     					meaning is inscribed and can be interpreted. As Marino discusses at length,
                     					this proposition is not necessarily intuitive, nor is it without its
                     					critics. [<a class="ref" href="#marino2020">Marino 2020</a>] Code, after all, must be read both to
                     					the software that compiles it and the human that shares it, but clearly
                     					these are two different meanings of "reading." Once a compiler transforms
                     					the text of a computer script into actionable assembly code, the idiomatic
                     					vaguaries of idiosyncratic, human reading can have no effect on the
                     					executation of that process. This gap between what a human means and what a
                     					computer understands is the challenge that novice programmers learn to
                     					struggle against: just because a line of code makes sense to me does not
                     					mean that the computer will do with it what I think it will.</div>
                  
                  				
                  <div class="counter"><a href="#p6">6</a></div>
                  <div class="ptext" id="p6">Because so many areas of our world impacted by or accessed through programmed
                     					interfaces, opportunities abound for interpretations of code to bring
                     					critical attention to latent power dynamics and cultural assumptions.
                     					Because of this, much of the published work following a critical code
                     					studies orientation reads code in spite of what it does. For instance, Mark
                     					Sample discussing how offensive mysoginistic language discovered in a debug
                     					file for the videogame <cite class="title italic">Dead Island</cite> reveals
                     					mysoginistic assumptions baked into the games design [<a class="ref" href="#sample2011">Sample 2011</a>]; Winnie Soon and Eric Snodgrass disentangling
                     					the social and political relations implied by the design of application
                     					programming interfaces (APIs) [<a class="ref" href="#snodgrasssoon2019">Snodgrass and Soon 2019</a>]; Outi
                     					Laiti explaining how programming languages based on languages other than
                     					English helps to foreground and critique the hegemony of English within
                     					computing culture. [<a class="ref" href="#laiti2016">Laiti 2016</a>]</div>
                  
                  				
                  <div class="counter"><a href="#p7">7</a></div>
                  <div class="ptext" id="p7">In examples of poetry generated by code, poetry written as code, and code
                     					that generates poetry, it is less useful to think of a tension between the
                     					code as text and the code as preamble to its processes and more productive
                     					to consider the imbrication of those surfaces. John Cayley's influential
                     					essay, “The code is not the Text (unless it is the
                     						text)”
                     					[<a class="ref" href="#cayley2002">Cayley 2002</a>] disentangles two incommensurable ways of
                     					understanding language. As Cayley insists in a later essay reviewing Nick
                     					Montfort's book of computer poetry, <cite class="title italic">#!</cite>, “a potential for human reading...is required to produce
                     						an event of language”
                     					[<a class="ref" href="#cayley2015">Cayley 2015</a>]. And for works where the code is finite and
                     					legible but what the code generates is practically or literally infinite
                     					(or infinitesimally brief), the code <em class="emph">must</em> be the poem; that is
                     					the only option. Herein lies the counterintuitive aporia for critical code
                     					studies when code poetry is the object of critique: whereas a close reading
                     					of a videogame's source code offers a peak behind the curtain, reading a
                     					poem's source code requires a more subtle recalibration of hermeneutic
                     					attention. Either way, as Marino observes, “Regardless
                     						of where one sees the poetry, the procedure or the possibility, both
                     						exist, in hibernation or as seeds, in the code.”
                     					[<a class="ref" href="#marino2020">Marino 2020</a>]</div>
                  
                  				
                  <div class="counter"><a href="#p8">8</a></div>
                  <div class="ptext" id="p8">For poet Lillian-Yvonne Bertram, those seeds of possible meaning saturate all
                     					available surfaces, and whereas code poetry of the sort practiced by
                     					Montfort and Cayley can be esoteric and conceptual, the ideas in Bertram's
                     					poems are familiar, situated, and ideologically specific. In other words,
                     					Bertram's poems in <cite class="title italic">Travesty Generator</cite> are
                     					already doing for digital poetry what critical code studies seeks for
                     					everyday systems and software when that software is bound up with regimes
                     					of oppression. My goal in this essay is to explore how Lillian-Yvonne
                     					Bertram uses code in their poetry to perform that critique, specifically by
                     					bearing witness to the pain and violence inflicted on Black Americans. </div>
                  
                  				
                  <div class="counter"><a href="#p9">9</a></div>
                  <div class="ptext" id="p9">In writing about the way Bertram's poems address these topics with
                     					specificity and familiarity, I am aware that I approach this with the
                     					benefit of several privileges: I am a white, able-bodied, cis-gendered man.
                     					I am a tenured faculty member. These privileges necessarily mean that the
                     					experiences remembered in some of these poems -- some of which are
                     					traumatic -- will carry deeper and more personal meanings to those still
                     					oppressed and disproportionately harmed by police violence. Bertram, who
                     					identifies as biracial African-American, does not need my interpretation of
                     					their work for that work to be haunting, resonant, and beautiful, and the
                     					recognition this work has received indicates how well it speaks for itself.
                     					In this essay, I hope to use my voice and privilege to bring attention
                     					these poems and invite others to appreciate their nuances, complexities,
                     					and their lineage within digital poetics.</div>
                  
                  
                  			</div>
               			
               <div class="div div0">
                  				
                  				
                  <div class="counter"><a href="#p10">10</a></div>
                  <div class="ptext" id="p10"> Computer code executed in the memory of a machine is characterized by its
                     					speed, ephemerality, and volatility, and digital poetry involving
                     					combinatorics can easily create a scenario such that any individual poem
                     					has a vanishingly small probability of existing. Thus, a poet’s decision to
                     					inscribe the output of a computer program into the pages of a book is an
                     					act of curation as much as composition. To select one result among many, or
                     					to capture a system at the point of its failing to continue, are as
                     					essential to digital poetics as are the tasks of defining a frame and
                     					creating the database of language to fit into that frame. This
                     					characterization of digital poetry consisting of a “frame” is a
                     					formulation Carole Spearin McCauley defined in her 1974 book <cite class="title italic">Computers and Creativity</cite>
                     					[<a class="ref" href="#mccauley1974">McCauley 1974</a>], and it still illuminates contemporary
                     					digital poetry. Although poets may innovate in the types of frames to
                     					create and in the complexity of dictionaries to mine for language, the
                     					agenda of contemporary digital poetry is diminished if its meaning is
                     					circumscribed by mere novelty. </div>
                  				
                  <div class="counter"><a href="#p11">11</a></div>
                  <div class="ptext" id="p11"> Lillian-Yvone Bertram’s book of poetry, <cite class="title italic">Travesty
                        						Generator</cite>, is among the most salient and compelling recent
                     					works of digital poetry because its poems address the contemporary
                     					realities of racism through the situated specificity of a computer
                     					generating poetry and the material specificity of print. In this essay, I
                     					offer close readings of several poems from this award-winning collection
                     						[<a class="ref" href="#dennigan2020">Dennigan 2020</a>] to emphasize Bertram’s contribution to
                     					digital poetics and explicate the ways in which their poems operate in, on
                     					and against other systems of code and code poetry. </div>
                  				
                  <div class="counter"><a href="#p12">12</a></div>
                  <div class="ptext" id="p12"> The book bears the title <cite class="title italic">Travesty Generator</cite> in
                     					reference to Hugh Kenner and Joseph O'Rourke's Pascal program designed to “fabricate
                     							pseudo-text”
                     						 [<a class="ref" href="#kenner1984">Kenner and O'Rourke 1984</a>] by printing out language such that each n-length string of
                     					characters in the output occurs at the same frequency as it does in the
                     					source text. According to its writers, by combining different authors
                     					through this algorithm, one might stumble across a travesty of “haunting plausibility” wherein James Joyce's
                     					writing becomes muddled with Henry James's. [<a class="ref" href="#kenner1984">Kenner and O'Rourke 1984</a>] The
                     					pseudo-text's nonsensibility is simultaneously its act of transgression and
                     					its literary horizon, but for Kenner and O'Rourke’s program and its many
                     					progeny, those possibilities extend no farther than a novelty, a formal
                     					curiosity or at best an insight into a specific author's writing style. </div>
                  				
                  <div class="counter"><a href="#p13">13</a></div>
                  <div class="ptext" id="p13"> When Charles O. Hartman uses Travesty in his <cite class="title italic">Virtual
                        						Muse</cite>, he finds that the nonsense it generates helps Hartman's
                     					composition process by disrupting the habits he found himself following as
                     					a writer. Of the generator itself, Hartman noted with some awe that “here is language creating itself out of nothing, out of
                     						mere statistical noise”
                     					[<a class="ref" href="#hartman1996">Hartman 1996</a>]. </div>
                  				
                  <div class="counter"><a href="#p14">14</a></div>
                  <div class="ptext" id="p14"> Bertram’s title invokes the legacy of this program in the history of
                     					electronic literature, but more importantly, the name, “travesty
                     						generator,” invokes other resonances that raise the stakes
                     					in computer-generated poetry. Whereas for Kenner and O'Rourke, labeling
                     					their work a “travesty” is a hyperbolic tease, a
                     					literary burlesque, for Bertram, the word is invigorated with its political
                     					reality. In 2013, attorney Don West, responding to the not guilty verdict
                     					for his client George Zimmerman in the shooting death of Trayvon Martin,
                     					congratulated the jury for keeping “this tragedy from
                     							becoming a travesty”
                     						 [<a class="ref" href="#notguilty2013">BBC 2013</a>]. West is implying that the media attention on the case risked
                     					creating what he and Zimmerman would have called a farcical miscarriage of
                     					justice. </div>
                  			</div>
               			
               <div class="div div0">
                  				
                  <h1 class="head">“Counternarratives”</h1>
                  				
                  <div class="counter"><a href="#p15">15</a></div>
                  <div class="ptext" id="p15"> For others, perhaps most observers, the event was always a travesty: a “grotesque parody or
                     							imitation”
                     						 [<a class="ref" href="#travestyv">OED 1989</a>] of criminal justice enacted by a civilian playing at being a law
                     					enforcement officer that resulted in the extra judicial killing of an
                     					unarmed high-school student. </div>
                  				
                  <div class="counter"><a href="#p16">16</a></div>
                  <div class="ptext" id="p16"> Central to any response to that verdict is how one understands the narrative
                     					of events on February 26, 2012, and this is the question Bertam takes up in
                     					their poem “Counternarratives” which presents
                     					sentences, fragments, and ellipses beginning ambiguously but gradually
                     					hinting at a series of specific implications and images. These narratives
                     					are “counter” for several reasons, most importantly for
                     					the fact that they include Martin's point of view. Each stanza presents
                     					several sentences or fragments separated by ellipses, and with each page
                     					more of these phrases accumulate to present a gradually more complete image
                     					of what happened on February 26, 2012. </div>
                  				
                  <div class="counter"><a href="#p17">17</a></div>
                  <div class="ptext" id="p17">
                     <blockquote>
                        <p>
                           						[4] … He never told anyone, but he always wanted
                           							to go to space camp.<br /> [5] … He rides from station to station
                           							until he can rest at home.<br /> [6] … Sometimes he wakes feeling
                           							gone and doesn't know why.
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p18">18</a></div>
                  <div class="ptext" id="p18"> The poem includes these sentences with others in 14 successive stanzas, each
                     					printed on its own face of a page, each growing in size until the blank
                     					13th stanza breaks the pattern of expansion. One can see the inertia of
                     					automation and the inevitability of processes at work in the consistency of
                     					this pattern and in the way the poem intersects other perspectives that
                     					include the algorithmic prompts of search engines (e.g. “People also ask: what really happened?”) and the
                     					horticultural (e.g. “Only the flowering catalpa trees
                     						are on watch”) -- all echoes of the machinic “generator” in the book's title. But because this
                     					is literally generated from computer code, the “counter” in the poem’s title works in at least two other
                     					significant ways. </div>
                  				
                  <div class="counter"><a href="#p19">19</a></div>
                  <div class="ptext" id="p19"> In Nick Montfort’s 2014 collection, <cite class="title italic">#!</cite>,
                     					Montfort includes the source code of each poem alongside a representation
                     					of a poem produced by running that code.[<a class="ref" href="#montfort2014a">Montfort 2014a</a>] For
                     					Montfort’s poems, the poetics of the code is as much (and sometimes more
                     					than) any semantic meaning in the resulting output it generates, and his
                     					terse coding style, usually presented without comments, can be admired for
                     					its elegance as well as used to validate Montfort’s work. Harkening back to
                     					the days when programmers like Kenner and O’Rourke’s shared programs like
                     					Travesty Generator for Micros by publishing them in print magazines,
                     					Montfort’s poems invite readers to type them into an interpreter and see
                     					what happens. </div>
                  				
                  <div class="counter"><a href="#p20">20</a></div>
                  <div class="ptext" id="p20"> Bertram does not include the source code for “Counternarratives” alongside its text, but in an appendix they
                     					acknowledge that the poem is adapted from the Python version of Montfort's
                     					poem, "Through The Park," published in <cite class="title italic">#!</cite> and
                     					also <a href="https://nickm.com/poems/through_the_park.py" onclick="window.open('https://nickm.com/poems/through_the_park.py'); return false" class="ref">available on
                        						his website</a>[<a class="ref" href="#montfort2008">Montfort 2008</a>]. By analyzing how
                     					Montfort’s poem operates, we can speculate about Bertram’s compositional
                     					and computational processes and thus explore how it situates Trayvon
                     					Martin’s death. </div>
                  				
                  <div class="counter"><a href="#p21">21</a></div>
                  <div class="ptext" id="p21"> Montfort's poem is framed by a <span class="monospace">for</span> loop, or a
                     						“counter”, <span class="monospace">i</span>, iterating through 8
                     					sequences, each of which prints a numbered stanza: 
                     <blockquote>
                        <p>
                           						<span class="monospace"> for i in range(8): </span>
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p22">22</a></div>
                  <div class="ptext" id="p22"> For each loop and each stanza, the program selects a number between 7–11
                     						(<span class="monospace">phrases = 7 + random.randint(0,4)</span>) and randomly deletes
                     					lines from the initial 25 until the lines that remain reach the selected
                     					number of <span class="monospace">phrases</span>, joining those remaining lines with
                     					ellipses. The resulting poems achieve their meaning through omission,
                     					elision, and innuendo, relying on the ambiguity of language and the way
                     					readers respond to that ambiguity by imagining a context that creates the
                     					poem's implied narrative. What that narrative is will depend on which lines
                     					end up being printed, and in <cite class="title italic">#!</cite>, the 8 stanzas
                     					that Montfort selects show how widely those contexts may diverge. These
                     					could range from a casually flirtatious encounter with a stranger to a
                     					sexual assault. The latter reading is activated by whether two or three key
                     					phrases remain in the resulting poem. The suggestive phrases “The girl puts on a slutty dress”, “The man makes a fist behind his back”, “The man's breathing quickens”, and “The man dashes, leaving pretense behind” makes
                     						“The girl's bag lies open” metonymic and
                     					lets the question of what their glances know (“The man
                     						and girl exchange a knowing glance”) hinge the meaning of the
                     					moment toward violence.[<a class="ref" href="#montfort2008">Montfort 2008</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p23">23</a></div>
                  <div class="ptext" id="p23">
                     					
                     <blockquote>
                        <p> The girl puts on a slutty dress. ... A wolf whistle
                           						sounds. ... The muscular man paces the girl. ... A wildflower nods,
                           						tightly gripped. ... Laughter booms. ... A lamp above fails to come
                           						on. ... The girl's bag lies open. ... A patrol car's siren chirps. ...
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p24">24</a></div>
                  <div class="ptext" id="p24"> This violence is implied, but generic, and the poem's meaning is about the
                     					way language gives shape to violence. The victim blaming in the “slutty dress” line, for example, could be
                     					Montfort reminding us of the ways that the framing of language creates an
                     					inertia of belief or predisposition that precedes and undermines knowing.
                     					Ultimately, however, this implication about language appears to be all that
                     					is at stake for the poem. </div>
                  				
                  <div class="counter"><a href="#p25">25</a></div>
                  <div class="ptext" id="p25"> Bertram's “Counternarratives” is more than an
                     					adaptation of Montfort's poem because it is also a counter to “Through the Park”. Whereas the context for
                     					Montfort's poem is hypothetical, Bertram's is real and specific. While we
                     					cannot consult Bertam's source code, it is possible to imagine the process
                     					whereby Montfort's “A wildflower nods, tightly
                     						gripped” becomes Bertram's “The frangipani
                     						swans in the moonlight” and Montfort's “She
                     						puts on a slutty dress” becomes “People
                     						also ask what he was wearing” or perhaps “No mention of his clothing”. The code for “Counternarratives” may not be visible, but the source is
                     					eminently and tragically knowable.<a class="noteRef" href="#d3e502">[1]</a>
                     				</div>
                  				
                  <div class="counter"><a href="#p26">26</a></div>
                  <div class="ptext" id="p26"> What Trayvon Martin wore -- a hoodie -- became a symbol for that event and a
                     					meme for Black Lives Matter because of its power in calling out racial
                     					profiling. The assumption that “a black man with a
                     						hoodie” is inherently threatening is conveyed in Bertram's
                     						“People also ask...” phrasing, which quotes
                     					a google search suggestion. In the context created by this poem, this
                     					question recalls the victim blaming in Montfort's poem's “slutty dress” line, but following Bertram's move
                     					from the generic to the particular: this search suggestion and others like
                     					it are drawn from reality. </div>
                  				
                  <div class="figure">
                     					
                     					
                     <div class="ptext"><a href="resources/images/figure01.png" rel="external"><img src="resources/images/figure01.png" style="" alt="" /></a></div>
                     				
                     <div class="caption">
                        <div class="label">Figure 1. </div> A screenshot of a Google search and suggestions for related
                        						searches. </div>
                  </div>
                  				
                  <div class="counter"><a href="#p27">27</a></div>
                  <div class="ptext" id="p27"> After a few trials, I discovered the suggestion “What
                     						was Trayvon Martin wearing?” in response to the search query
                     						“Who shot Trayvon Martin?” (see Figure 1).
                     					I also found another recurring line, and the final line in Bertram's poem,
                     						“People also search for: Emmett Till” came
                     					up in several similar searches. Safiya Noble's 2018 <cite class="title italic">Algorithms of Opression</cite> studies the ways that search engines
                     					are among the systems of oppression that commodify black male criminality
                     					and sustain social, political, and racial tension in America. In a 2014
                     					article, Noble contrasts two sets of Google's autocomplete engine. "Trayvon
                     					Martin was..." completes with phrases like "a thug", "no angel", and "a
                     					drug dealer"; "George Zimmerman is ..." completes with phrases like "a
                     					hero", "innocent", and "not white." [<a class="ref" href="#noble2014">Noble 2014</a>] As Noble
                     					argues, the ideas that Google suggests conform to a normative viewpoint on
                     					the violent events of that night actually extend from media narratives
                     					developed and promoted as part of the media spectacle that emerged during
                     					and after the trial.[<a class="ref" href="#noble2014">Noble 2014</a>] Notably, Bertram's implied
                     					query is different from: using the pronoun “he” in place
                     					of Martin's name, so the antecedent in "what he was wearing" could be
                     					Zimmerman, especially since neither are named outright in the poem. This
                     					final opening out of meaning is another significant way in which the poem
                     					reflects on its constructedness because it goes a step further than
                     					Montfort’s implied invitation to run his code. Instead, Bertram invites us
                     					to speculate about their implied code and simultaneously confronts us with
                     					the opacity of Google’s algorithmic suggestions. </div>
                  				
                  <div class="counter"><a href="#p28">28</a></div>
                  <div class="ptext" id="p28"> In <cite class="title italic">Travesty Generator</cite>'s appendix, Bertram notes
                     					that the output of their program has been edited and arranged, and this
                     					rewriting may be evident in the way that certain of the phrases evolve as
                     					the poem progresses [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]. In some cases, Bertram's
                     					revisions evolve to follow a trajectory implied to begin in Montfort's
                     					version with Montfort's phrase, “A patrol car's siren chirps.”
                     						 [<a class="ref" href="#montfort2008">Montfort 2008</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p29">29</a></div>
                  <div class="ptext" id="p29"> Bertram's correlating lines (though never the last for any of their 14
                     					stanzas) evolves from there into 
                     <blockquote>
                        <p> [3] ... A patrol
                           							car's siren sings several streets away... <br /> [10] ... Several
                           							weeks away, a patrol siren sings... <br /> [11] ... A patrol car's
                           							siren sings several streets way... <br /> [12] ... A patrol car's
                           							siren swats bugs and halos away... <br /> [14] ... A siren signs
                           							<br /> several streets away.<br />
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p30">30</a></div>
                  <div class="ptext" id="p30"> The most striking movement in the poem is that way that “Counternarratives” uses ellipses. Whereas Montfort's poem is
                     					suggestive through the innuendo created by stochastic omission, Bertram's
                     					is subversive through the implications of its elisions, and those elisions
                     					and ellipses gradually resolve into prosodic syntax as the text of the poem
                     					gradually replaces its poetic mechanism. The phrase that first appears in
                     					stanza 4 as “Real gaps spread in the tropic of
                     						paradise” is stark in its proximity with its initial following
                     					line “Forty-two miles from Disney”
                     					[<a class="ref" href="#bertram2019a">Bertram 2019a</a>], where proximity here is both the poetic
                     					associations as well as the geopolitical identity of this Orlando suburb. </div>
                  				
                  <div class="counter"><a href="#p31">31</a></div>
                  <div class="ptext" id="p31"> After the blank penultimate stanza -- a final elision bearing the number 13
                     					-- this line has become “Gaps split open the tropic of
                     						paradise”. A blank line splits the “siren
                     						signs” sentence, followed by the now damningly unambiguous
                     						“Cause of death: It was a gated community”
                     					[<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p32">32</a></div>
                  <div class="ptext" id="p32"> By editing and arranging the output of their program, Bertram is declining
                     					to let the machinery of language or Python control the narrative and
                     					opening up paths to resistance by insisting that we bear witness to the
                     					tragedy without retreating to the algorithmic distance of a travesty. Two
                     					other poems in <cite class="title italic">Travesty Generator</cite> offer
                     					similar insights on the relationship between the mechanization of computing
                     					and the use those processes to interrogate the structures that make them
                     					possible. </div>
                  			</div>
               			
               <div class="div div0">
                  				
                  <h1 class="head">
                     					“three_last_words”
                     				</h1>
                  				
                  <div class="counter"><a href="#p33">33</a></div>
                  <div class="ptext" id="p33"> The poem that opens the book, “three_last_words”,
                     					is at a functional level a restatement of the program in Nick Montfort's
                     						“I AM THAT I AM”, which is itself a version
                     					or adaptation of Brion Gysin's permutation poem of the same title. That
                     					phrase does not appear in Montfort's version. Rather, Montfort's program
                     					defines a <span class="monospace">permutations</span> function and then executes that
                     					function with the string <span class="monospace">'AEIOU'</span> as its argument, yielding the
                     					120 possible rearrangements of AEIOU as its outcome. Montfort's code
                     					accomplishes this succinctly through an elegant recursion as the
                     						<span class="monospace">permutations</span> generator works through a list of
                     						<span class="monospace">elements</span>, rearranging all of the following elements
                     						(<span class="monospace">elements[1:]</span>) by passing them back until no more next
                     						<span class="monospace">elements</span> remain. 
                     <blockquote>
                        <p>
                           <blockquote class="eg">
                              <pre><code class="code-general">
"I AM THAT I AM" (#! 18)
def permutations(elements):
 if len(elements) == 0:
   yield elements
 else:
   for result in permutations(elements[1:]):
     for i in range(len(elements)):
       yield result[:i] + elements[0:1] + result[i:]
</code></pre>
                           </blockquote> [<a class="ref" href="#montfort2014a">Montfort 2014a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p34">34</a></div>
                  <div class="ptext" id="p34"> Bertram's generator is mostly the same code but the commentary they add --
                     					and more importantly the uses they put it to -- changes the meaning
                     					entirely. That new meaning is jarring and, as in “Counternarratives”, tragic. The three last words in reference
                     					here are Eric Garner’s and, more recently, George Floyd’s: “I can’t breathe.” Montfort’s permutations create
                     					a beginning; Bertram’s memorialize endings. </div>
                  				
                  <div class="counter"><a href="#p35">35</a></div>
                  <div class="ptext" id="p35"> Bertram’s poem creates meaning at least two distinct levels. It can be read
                     					first as lines of poetry and second it can be executed as a program that
                     					generates poetry. The typographic presentation of the poem blends those two
                     					levels by alternating lines of code with comments and statements that
                     					execute the <span class="monospace">permutations()</span> function defined at the outset --
                     					statements that accumulate toward something unavoidable. In the excerpt
                     					below, lines preceded with the character, “#”, are comments and not
                     					processed as code. 
                     <blockquote>
                        <p>
                           <blockquote class="eg">
                              <pre><code class="code-general">
def permutations(elements):
#the
 if len(elements) == 0:
#the knife
   yield elements
  #the knife they
 else:
#the knife they hung
</code></pre>
                           </blockquote> [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p36">36</a></div>
                  <div class="ptext" id="p36"> The sequence in comments reads, “<span class="monospace">the</span>”, “<span class="monospace">the
                        						knife</span>”. “<span class="monospace">the knife
                        						they</span>”, “<span class="monospace">the knife they
                        							hung</span>”, adding one word at a time over the course of
                     					the code until the completed comment observes, “<span class="monospace">#the knife they hung him on / #was a legal
                        						trinket</span>”[<a class="ref" href="#bertram2019a">Bertram 2019a</a>]. When he was
                     					killed by Daniel Pantaleo while being placed under arrest, Eric Garner was
                     					selling loose cigarettes -- a minor violation of cigarette tax law.
                     						“Legal trinket” here brings to mind the way that Garner's alleged
                     					crime of selling cigarettes became a meme for racist backlash to Black
                     					Lives Matter -- responses that included an Indiana police officer selling
                     					t-shirts with the mocking slogan, “Breathe easy, don't
                     						break the law”
                     					[<a class="ref" href="#ortiz2014">Ortiz 2014</a>]. Bertram’s comment characterizes this as a
                     						“trinket” because the relatively trivial infraction
                     					was used to justify police violence. </div>
                  				
                  <div class="counter"><a href="#p37">37</a></div>
                  <div class="ptext" id="p37"> The word "trinket" does something else here as well, perhaps coincidentally,
                     					by naming a service, <a href="https://trinket.io/" onclick="window.open('https://trinket.io/'); return false" class="ref">Trinket.io</a>,
                     					that allows users to create snippets of Python code that they can embed and
                     					run in a webpage. Intentionally or not, this possible reference hints at a
                     					specific, practical, and materially-situated environment for running this
                     					code, which is something that is implied to be unnecessary for Montfort's
                     					ontologically denotative and self-evidently tautological symmetry. In other
                     					words, the fact that Montfort prints the code with its output precludes a
                     					need to execute the code for ourselves. </div>
                  				
                  <div class="counter"><a href="#p38">38</a></div>
                  <div class="ptext" id="p38">Bertram's poem instead invites us to experience the consequences of their
                     					program as a response to its explicit invitation a page later: 
                     <blockquote>
                        <p>
                           <blockquote class="eg">
                              <pre><code class="code-general">
#run the code
   #in this cell
       #away
				</code></pre>
                           </blockquote> [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote> poem, the “cell” here may connote a
                     					jail cell, but more likely it describes a Python Notebook cell. Python
                     					Notebooks, like the embeddable Trinket widgets, are a common way to
                     					experiment with Python and to invite others to review, execute, and bear
                     					witness to the results of a program. In “three_last_words”, the samples of output and the poem's
                     					culminating error message are typographically consistent with what one
                     					would see while running this code in a notebook. </div>
                  				
                  <div class="counter"><a href="#p39">39</a></div>
                  <div class="ptext" id="p39"> Montfort's program runs one permutation and prints the output: 120
                     					variations on the five vowels arranged from “AEIOU” to “UOIEA” in
                     					8 tidy, monospaced columns. Bertram's program runs three times, and whereas
                     					Montfort's final line of Python 2 code prints the permutated sequences as a
                     					string (<span class="monospace">print''.join(list(permutations('AEIOU')))</span>[<a class="ref" href="#montfort2014a">Montfort 2014a</a>]), Bertram's Python 3 simply prints the list
                     					as it is represented in Python's memory. The first iteration permutes a
                     					single-character: 
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">
print (list(permutations("I")))

['I']
				</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote> In addition to this
                     					invitation to experience the practical implementation of the program, this
                     					difference in printing the yield of the <span class="monospace">permutations()</span>
                     					function pulls us toward the subjective point-of-view of the Python runtime
                     					that experiences the code, and the chaotic typography of the output -- in
                     					contrast to Montfort's neat rows and columns -- performs the messy
                     					complications of computation that will eventually culminate in the
                     					computer’s failure. </div>
                  				
                  <div class="counter"><a href="#p40">40</a></div>
                  <div class="ptext" id="p40"> There is one more subtle variation between Montfort and Bertram's code in
                     					the final line of the constructor. As Python iterates through the
                     						<span class="monospace">elements</span> list (a string of text characters, in this case)
                     					the newly-permutated line <span class="monospace">yields</span> a <span class="monospace">+ result[i:]</span>
                     					for Montfort or just <span class="monospace">+ result</span> for Bertram. </div>
                  				
                  <div class="counter"><a href="#p41">41</a></div>
                  <div class="ptext" id="p41"> The functional difference is that Montfort's line restores to the target
                     					string only those parts of the input string that come after the character
                     					operating for the current iteration. The <span class="monospace">[i:]</span> slice captures
                     					only those elements after <span class="monospace">i</span>. Bertram's version retains and
                     					concatenates the entire working result, so the practical difference is that
                     					while Bertram's code will generate the same number of permutations, the
                     					strings it generates gradually become longer. The last element in the
                     						<span class="monospace">permutations()</span> of the string, “<span class="monospace">can't" is "t'nact'nat'nt't</span>”. Whereas the 120
                     					permutations of “AEIOU” are a complete and homogenous set,
                     						<span class="monospace">permutations("can't")</span> is asymmetrical and grows
                     					geometrically. The articulation of 
                     <blockquote>
                        <p>
                           <blockquote class="eg">
                              <pre><code class="code-general">print(list(permutations("breathe")))</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote> runs past the right and bottom
                     					edges of the page. </div>
                  				
                  <div class="counter"><a href="#p42">42</a></div>
                  <div class="ptext" id="p42"> The asymmetry culminates finally and dramatically when the full phrase "I
                     					can't breathe" is passed in to the <span class="monospace">permutations()</span> function.
                     					Bertram's code concludes with the printout out of a Python MemoryError
                     					because the number of possible sequences of the 15 letters in that phrase
                     					(1,307,674,368,000) exceeds the available memory on the computer hosting
                     					the Python runtime, and like the 15 seconds that Officer Pantaleo held Eric
                     					Garner in a chokehold, those 15 characters result in the death of the
                     					Python Notebook or the computer hosting it. </div>
                  				
                  <div class="figure">
                     					
                     					
                     <div class="ptext"><a href="resources/images/figure02.png" rel="external"><img src="resources/images/figure02.png" style="" alt="" /></a></div>
                     				
                     <div class="caption">
                        <div class="label">Figure 2. </div>A screenshot displaying the error message of a Colab Notebook that
                        						crashed trying to execute Bertram’s final permutation in “three_last_words”.</div>
                  </div>
                  				
                  <div class="counter"><a href="#p43">43</a></div>
                  <div class="ptext" id="p43"> I attempted to run Bertram's code two different ways: first in a
                     					Google-hosted Colab Notebook and later in a Jupyter Notebook running on my
                     					laptop. The Colab Notebook ran for some time with the RAM usage indicator
                     					creeping slowly to the right and becoming first green, then yellow, and
                     					finally orange before the runtime crashed and disconnected, as shown in
                     					Figure 2.</div>
                  				
                  <div class="counter"><a href="#p44">44</a></div>
                  <div class="ptext" id="p44"> On my Macbook Pro, the results were similar, but as Python continued to take
                     					up more and more RAM, my computer gradually stopped working. The cursor
                     					slowed down, the trackpad clicked more slowly, and keyboard shortcuts
                     					stopped working. I couldn't take a screenshot, so I had to use another
                     					device -- my phone -- to capture the final moments before I resorted to a
                     					hard reboot and power cycle. </div>
                  				
                  <div class="figure">
                     					
                     					
                     <div class="ptext"><a href="resources/images/figure03.jpg" rel="external"><img src="resources/images/figure03.jpg" style="" alt="" /></a></div>
                     				
                     <div class="caption">
                        <div class="label">Figure 3. </div>A photo of my Macbook Pro’s memory pressure monitor as it filled with
                        						the final permutations in “three_last_words”.</div>
                  </div>
                  				
                  <div class="counter"><a href="#p45">45</a></div>
                  <div class="ptext" id="p45"> It seems trivial or maudlin to compare a computer running out of memory to
                     					the tragedy of Eric Garner's asphyxiation and death, but the way the
                     					computer's memory usage creeped inevitably upward conveyed a vivid anxiety
                     					and sense of panic in a way that was hauntingly effective. This poem is
                     					directly addressing the physical environment of computing in a manner
                     					reminiscent of Montfort's poem “Round”
                     					[<a class="ref" href="#montfort2013">Montfort 2013</a>], or Sam Lavigne's parodic “Slow Hot Computer” project that “lavigne makes your computer run slow, and hot, so you
                     						can be less productive” by running “processor-intensive calculations” in a web browser. [<a class="ref" href="#lavigne2015">Lavigne 2015</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p46">46</a></div>
                  <div class="ptext" id="p46"> This kind of metaleptical irruption of attention -- what Terry Harpold has
                     					called “recapture” -- is typically accomplished
                     					in the service of play, both in the satiric sense of Lavigne's playfully
                     					critical projects and, for Harpold, in both the literal sense of playing
                     					videogames and the semiotic sense of expressive freedom within constraints.
                     					In Montfort's examples, recapture moderates the conflicts of entanglement
                     					when technical limitations are expressed through the terms of the
                     					gameworld, as when a text-based game attempts to parse an unknown word of
                     					user input and it replies, “I didn't quite understand
                     						that”, instead of reporting an error code or just crashing.
                     					Recapture is a fundamental operation of videogames, which means that “recapture happens during play, in the complex
                     						digressions and feedback loops that are activated in actual
                     						play”. [<a class="ref" href="#harpold2007">Harpold 2007</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p47">47</a></div>
                  <div class="ptext" id="p47"> Bertram works with the same entanglement of technical process and expressive
                     					semiotics, but poetry is not a videogame. And in this case, the poem denies
                     					its reader the recapture of memory, challenging us instead to bear witness
                     					to the trauma it symbolizes. </div>
                  				
                  <div class="counter"><a href="#p48">48</a></div>
                  <div class="ptext" id="p48"> As Wendy Hui Kyong Chun has discussed, computer memory is an “enduring ephemeral”, always-already conflating
                     					memory with storage and, through metaphors and pretenses of permanence.
                     					They note that the instability of this term, memory, follows the volatility
                     					of RAM, which is “based on flip-flop circuits and
                     						transistors and capacitors and which require a steady electrical
                     						current”. [<a class="ref" href="#chun2011">Chun 2011</a>] Like human memory, software
                     						“memory is not a static but rather an active
                     						process. A memory must be held in order to keep it from
                     					moving”. [<a class="ref" href="#chun2011">Chun 2011</a>] Bertram's software presents the
                     					volatility of memory as the entanglement of poetic representation, police
                     					brutality, and technical limitation, and by setting it up to fail, Bertram
                     					invites us to reenact the trauma of that brutality and interpret its
                     					technical and political consequences. </div>
                  				
                  <div class="counter"><a href="#p49">49</a></div>
                  <div class="ptext" id="p49"> When Bertram disrupts the symmetry of Montfort's slices (result[:i] and
                     					result[i:] becomes result[:i] and result so that "ehtaerb" potentially
                     					becomes the drawn-out, Joycean susurration "ehtaerbehtaerehtaeehtaehtehe",
                     					that is, <span class="monospace">print(list(permutations("breathe"))[-1]))</span>, but both
                     					versions of the generator choke on Eric Garner's three last words. Memory
                     					fails, but the poem preserves its failure even as its overflow suggests a
                     					world uncontemplated by code. This overflow is not infinite -- hinting that
                     					someday, when it becomes possible to run this program with the multiple
                     					terabytes of RAM necessary to compute and convey one trillion three-hundred
                     					seven billion six-hundred seventy-four million three-hundred sixty-eight
                     					thousand lines, the program will complete, but until then we are compelled
                     					to follow Bertram's invitation to bear witness and 
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">
#return
   #this articulation
#the exhaustion
   #we can't stop hearing
   		</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  			</div>
               			
               <div class="div div0">
                  				
                  <h1 class="head">“A NEW SERMON ON THE WARPLAND”</h1>
                  				
                  <div class="counter"><a href="#p50">50</a></div>
                  <div class="ptext" id="p50"> Like “three_last_words” and “Counternarratives”, “A NEW SERMON ON THE
                     						WARPLAND: a poem by algorithm” is a work with a genealogy, and
                     					Bertram directs us to the source codes that ground it. This is another poem
                     					where Bertram gives credit to an example by Nick Montfort, but since his
                     					code is a straightforward implementation of Alison Knowles' “A House of Dust”, Knowles is a more appropriate
                     					counterpoint to consider for Bertram's work.[<a class="ref" href="#knowles1968">Knowles 1968</a>]
                     					Additionally and more significantly, Bertram acknowledges “that some words and phrases are taken directly from
                     						Gwendolyn Brooks' corpus” in their notes [<a class="ref" href="#bertram2019a">Bertram 2019a</a>], so understanding those origins allows these
                     					phrases to act hypertextually as a bridge into Brooks' poems. One could see
                     						“NEW SERMON” as the poem Brooks might have
                     					written with access, inspiration and context parallel to Knowles. Bertram
                     					encourages us to explore that hypothetical bridge between Brooks and
                     					Knowles by recommending Brooks' 1987 collection Blacks, and specifically
                     					calling attention to “The Sermon on the
                     						Warpland” and “In the Mecca” as
                     					especially important sources. Brooks’ “Boy Breaking
                     						Glass” and “THE WALL” also seem to
                     					be the sources for several phrases.[<a class="ref" href="#brooks1987">Brooks 1987</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p51">51</a></div>
                  <div class="ptext" id="p51"> Alison Knowles and James Tenney produced <cite class="title italic">A House of
                        						Dust</cite> in 1968, the same year that Gwendolyn Brooks published
                     						“In the Mecca.” The source code for <cite class="title italic">House of Dust</cite> is not publicly available, but its
                     					function is easy to deduce by examining the output published in three
                     					different venues. Knowles created the structure and four lists of words and
                     					phrases, and Tenney wrote those into FORTRAN code that creates quatrains by
                     					selecting and printing one item from each list, indenting each line a few
                     					more spaces before returning to left justification as each new quatrain
                     					begins. 
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">

A HOUSE OF ROOTS
    AMONG HIGH MOUNTAINS
        USING NATURAL LIGHT
            INHABITED BY VARIOUS BIRDS AND FISHES
A HOUSE OF WOOD
    BY A RIVER
        USING ALL AVAILABLE LIGHTING
            INHABITED BY HORSES AND BIRDS
A HOUSE OF DISCARDED CLOTHING
    UNDERWATER
        USING ELECTRICITY
            INHABITED BY FRENCH AND GERMAN SPEAKING PEOPLE
			</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#knowles1968">Knowles 1968</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p52">52</a></div>
                  <div class="ptext" id="p52"> Bertram credits <a href="https://nickm.com/memslam/a_house_of_dust.html" onclick="window.open('https://nickm.com/memslam/a_house_of_dust.html'); return false" class="ref">Montfort’s simulation of this poem</a> as the source of the program
                     					they manipulated, but around the same time Montfort created his web version
                     						[<a class="ref" href="#montfort2014b">Montfort 2014b</a>], I also created <a href="http://zachwhalen.net/pg/dust/" onclick="window.open('http://zachwhalen.net/pg/dust/'); return false" class="ref">a JavaScript simulation of the
                        						poem</a> capable of running in a web browser.[<a class="ref" href="#whalen2014">Whalen 2014</a>] The results of each of our implementations are
                     					largely the same (save for some typographic and kinetic nuances), but while
                     					I named the variables holding each list: <span class="monospace">materials</span>,
                     						<span class="monospace">places</span>, <span class="monospace">lights</span> and <span class="monospace">inhabitants</span>.
                     					Montfort used the names <span class="monospace">material</span>, <span class="monospace">location</span>,
                     						<span class="monospace">light_source</span> and <span class="monospace">inhabitants</span>. The
                     					differences in variable names have no impact on the operations of our
                     					scripts, but our choices when programming those operations -- my evident
                     					preference for plural labels, for example -- might extend from differences
                     					in our readings of the poem. Those differences are only possible if one
                     					begins by paying attention to the operations of code separately from the
                     					inscriptions of that code. </div>
                  				
                  <div class="counter"><a href="#p53">53</a></div>
                  <div class="ptext" id="p53"> Bertram doesn't share the source code for “NEW
                     						SERMON” in <cite class="title italic">Travesty Generator</cite>, but
                     					observing its patterns reveals it to have a similar structure of lists
                     					randomly sampled. Also, two earlier versions of Bertram's “A NEW SERMON ON THE WARPLAND” are available
                     					online, one in JavaScript (originally available at <a href="https://ruby-buffet.glitch.me" onclick="window.open('https://ruby-buffet.glitch.me'); return false" class="ref">https://ruby-buffet.glitch.me</a>, the source code of this version
                     					notes it was based on Laurel Schwulst JavaScript implementation of
                     					Montfort’s Python version of Knowles and Tenney’s FORTRAN) and another in
                     					Python 2.[<a class="ref" href="#bertramnd">Bertram n.d.</a>] In the Javascript version, each list
                     					simply bears a number (<span class="monospace">one</span>,<span class="monospace">two</span>, etc.), but the
                     					Python 2 version assigns names that -- like Montfort’s and my simulations
                     					of <cite class="title italic">House of Dust</cite> -- signpost the semantic
                     					position of each list. There are evidently some differences between the
                     					source code shared on Bertram's website and the code that created the poem
                     					published in <cite class="title italic">Travesty Generator</cite>, but the five
                     					names suggest their content and reveal Bertram's primary departure from
                     					Knowles: <span class="monospace">materials</span>, <span class="monospace">locations</span>, <span class="monospace">verb</span>,
                     						<span class="monospace">means</span>, and <span class="monospace">outcome</span>. </div>
                  				
                  <div class="counter"><a href="#p54">54</a></div>
                  <div class="ptext" id="p54">
                     					
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">
A NEW SERMON ON THE WARPLAND (excerpt)
A NATION OF GRIEF    
                IN THE CUT
    SUMMONING
                    ANY MEANS NECESSARY
TO REFUSE ERASURE BY ALGORITHM
A NATION OF OLD DISPOSSESSIONS
                STILL FIGHTING
    CONJURING
                    ANY MEANS NECESSARY
TO REVISE ERASURE BY ALGORITHM
			</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p55">55</a></div>
                  <div class="ptext" id="p55"> Comparing <cite class="title italic">House of Dust</cite> with “NEW SERMON” reveals more differences than the
                     					addition of a fifth line. Knowles' locations are diverse but more stable --
                     						“BY THE SEA”, “IN
                     						MICHIGAN”, “IN A HOT CLIMATE”,
                     						“ON AN ISLAND”,“IN
                     						SOUTHERN FRANCE”,“AMONG OTHER HOUSE”
                     					-- while Bertram's are active, violent, or disrupted, and some are not
                     					conventionally “locations” but more so describe liminal
                     					states of being: 
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">
...IN THE CUT...
...STILL FIGHTING...
...IN FRONT OF A WINDOW ABOUT TO BE BROKEN...
...IN TRANSLATION...
...BETWEEN SCYLLA AND CHARYBDIS...
...IN THE SHIP'S HOLD...
	</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p56">56</a></div>
                  <div class="ptext" id="p56"> Instead of a house, Bertram addresses their sermon to a “NATION”. Allusions to the slave trade are perhaps most
                     					striking in comparing the subtle differences in phrases between Knowles'
                     						“ON THE SEA” and Bertram's “ON SHIPS”, but the shifts in Bertram's poem do
                     					more than invert the stasis in Knowles'. While <cite class="title italic">A House
                        						of Dust</cite> dwells, a “NEW SERMON”
                     					moves, acts, and resists. The verbs and means lists propel each cinquain
                     					through the same <span class="monospace">means</span> -- “ANY MEANS
                     						NECESSARY” -- to the same <span class="monospace">outcome</span>: “TO REFUSE ERASURE BY THE ALGORITHM”. </div>
                  				
                  <div class="counter"><a href="#p57">57</a></div>
                  <div class="ptext" id="p57"> The Python 2 version includes multiple possible outcomes, but the verbs list
                     					is somewhat shorter. Because the printed version of the poem includes the
                     					same outcome in each cinquain, it is reasonable to infer that its source
                     					code is closer to the Javascript version where list <span class="monospace">five</span> only
                     					contains one element: <span class="monospace">to refuse erasure by the algorithm</span>. The
                     						<span class="monospace">means</span> list works the same way, demonstrating that the
                     					only option is Malcom X's ANY MEANS NECESSARY. </div>
                  				
                  <div class="counter"><a href="#p58">58</a></div>
                  <div class="ptext" id="p58"> For both of these one-choice lists, the program is still selecting that
                     					choice as the result of a process. The Python 2 draft uses the common
                     						<span class="monospace">random.choice()</span> function, and the JavaScript version
                     					takes a custom function with a comment remarking on its conventionality:
                     							
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">
// This is a very common randomizing function.
// It takes a list (array) and returns one at random.
function select_random(x){
   y = x[Math.floor(Math.random()*x.length)];
   return y;
}
		</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p59">59</a></div>
                  <div class="ptext" id="p59"> The fact that this program is making a choice with no freedom echos the
                     					slavery imagery within the poem, but revisiting <cite class="title italic">A
                        						House of Dust</cite> opens another way of understanding the
                     					significance of this choice without a choice. </div>
                  				
                  <div class="counter"><a href="#p60">60</a></div>
                  <div class="ptext" id="p60"> Benjamin Buchloh argues that Knowle's project in creating <cite class="title italic">House</cite> was to find a way to deconstruct the
                     						“prison house of language”. [<a class="ref" href="#buchloh2012">Buchloh 2012</a>] Noting the irony of an avante-garde artist
                     					like Knowles using a house, that most conventional vehicle for subject
                     					formation, as their central figure, Buchloh contends that the aleatory
                     					construction method of the poem demonstrates the infinite fluidity of the
                     					process of subject formation. </div>
                  				
                  <div class="counter"><a href="#p61">61</a></div>
                  <div class="ptext" id="p61"> Channeling Nietzsche, Buchloh goes on to observe that the constructedness of
                     						<cite class="title italic">House of Dust</cite> resists the subject's being
                     					at “home” in language. “Knowles's
                     						The House of Dust conceives of the process of subject formation as a
                     						perpetual process of construction and undoing, precisely to prevent it
                     						from becoming an inhabitant of the prisonhouse of language, a merely
                     						substitutional system of fraudulent and aggressive convictions...the
                     						formation of of the subject at this point in history has become a more
                     						complex and, by necessity, a more open process, since the subject's
                     						intersections with language...are certainly no longer the primary ...
                     						foundations.”
                     					[<a class="ref" href="#buchloh2012">Buchloh 2012</a>] Buchloh's “convictions” are
                     					a play on words, a synonym for "belief" in the mode of the metaphoric
                     					correctional system. But it also opens up another angle on "NEW SERMON,"
                     					which is filled with punishment and captivity but conspicuously without
                     					conviction. </div>
                  				
                  <div class="counter"><a href="#p62">62</a></div>
                  <div class="ptext" id="p62"> Although the JavaScript version of the poem does include “of parolees” and “of
                     						prisoners” as possible materials, possibly drawn from Brooks'
                     						“The Wall”, the printed poem's materials
                     					and locations invoke punishment without the framework of judicial
                     					justification: 
                     <blockquote>
                        <p>
                           						 ...A NATION OF SPECIFIC CHAINS... ...IN THE
                           							SHIP'S HOLD... ...A NATION OF MEDGAR EVERS... ...IN A
                           							STRING-DRAWN BAG... 
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p63">63</a></div>
                  <div class="ptext" id="p63"> In this way, Bertram's poem comes back to the prison house of language that
                     					Knowles' is playfully resisting. Captivity and imprisonment are not just
                     					metonymic critiques for the post-structuralist decentering of lexical
                     					epistemology; instead, the prison house of “NEW
                     						SERMON” is the literal kidnapping, enslavement, and genocide of
                     					Africans whose exploitation built the foundations of this nation. </div>
                  				
                  <div class="counter"><a href="#p64">64</a></div>
                  <div class="ptext" id="p64"> Finally, by naming one of the lists <span class="monospace">verbs</span>, Bertram follows a
                     					schema one often finds in generative works that use context-free grammar:
                     					patterns or templates where words are given a syntactical place based on
                     					their part of speech. In “NEW SERMON”, the verbs
                     					list does the most work to take the poem away from its origins in <cite class="title italic">House of Dust</cite>. The seven verbs that appear in
                     					the 22 printed cinquains all suggest movement with resistance or a sense of
                     					bringing something out from below: 
                     <blockquote>
                        <p>DIGGING UP
                           							SUMMONING CONJURING DIVINING UNEARTHING STRIKING MATCHES AGAINST
                           							HOLLERING DOWN [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p65">65</a></div>
                  <div class="ptext" id="p65"> Each of these verbs immediately precedes “ANY MEANS
                     						NECESSARY”
                     					[<a class="ref" href="#bertram2019a">Bertram 2019a</a>]. So, by omitting the preposition
                     						“by” from Malcom X's well-known phrase, the call to
                     					action in the poem asks its reader to dig up, to unearth, strike matches
                     					against their own means of refusing erasure. </div>
                  				
                  <div class="counter"><a href="#p66">66</a></div>
                  <div class="ptext" id="p66"> In an appendix on the book, Bertram quotes Harryette Mullen's essay, “Imagining the Unimagined Reader”: “When I read words never meant for me, anyone like me ...
                     						then I feel simultaneously my exclusion and my inclusion as a literate
                     						black women, the unimagined reader of the text”.[<a class="ref" href="#mullen1999">Mullen 1999</a>]
                     				</div>
                  				
                  <div class="counter"><a href="#p67">67</a></div>
                  <div class="ptext" id="p67"> Bertram likewise considers themself an “unimagined
                     					coder”. 
                     <blockquote>
                        <p>
                           						 I use codes and algorithms in an attempt to
                           							create work that reconfigures and challenges oppressive
                           							narratives for Black people and to imagine new ones. I consider
                           							this an intervention into a set of literary practices that have
                           							historically excluded women and minorities. 
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p68">68</a></div>
                  <div class="ptext" id="p68"> For each of the works I have analyzed here and for many others of the 10
                     					poems in <cite class="title italic">Travesty Generator</cite>, Bertram uses the
                     					generators of computer-generated poetry to critique, resist, and replace
                     					narratives of oppression and to make explicit and specific what is
                     					elsewhere algorithmically insidious and ambivalent. </div>
                  			</div>
               			
               <div class="div div0">
                  				
                  <h1 class="head">Conclusion</h1>
                  				
                  <div class="counter"><a href="#p69">69</a></div>
                  <div class="ptext" id="p69"> Writing in a blog entry for the Poetry Foundation, Bertram opens their
                     					reflection on Kenneth Goldsmith’s controversial performance of “Michael Brown’s Body” by qualifying their
                     					response through the lens of an individual, bodily experience of race.
                     						“I would like to make it clear that my writing
                     						about race, like myself, is a collection of incomplete moments in
                     						time”. [<a class="ref" href="#bertram2019b">Bertram 2019b</a>] Crucially, Bertram makes a
                     					connection here between time and identity. Time is a fundamental
                     					characteristic of computing where each event, action or change is
                     					associated with a specific “moment[] of time,”
                     					and most high-level languages include built-in functions to call up that
                     					time in various ways. In Perl, <span class="monospace">localtime</span> converts a timestamp
                     					into chunks that are more easily processed into a human-readable format.
                     					Bertram’s poetry in <cite class="title italic">Travesty Generator</cite> is
                     					likewise thinking about race through specific, recent moments of time where
                     					the suffering of Black men and women has brought America’s identity as a
                     					nation built on white supremacy into clearer focus. </div>
                  				
                  <div class="counter"><a href="#p70">70</a></div>
                  <div class="ptext" id="p70"> As I type this paragraph in the year 2021, it is a few weeks after a jury in
                     					Minnesota found a white police officer guilty of murdering George Floyd
                     						[<a class="ref" href="#xiong2021">Xiong et al. 2021</a>] -- a crime recorded on camera that sparked
                     					an intense summer of protests in 2020. A few days after that guilty
                     					verdict, a young man in my suburban Virginia community was shot 10 times by
                     					a sheriff’s deputy after calling 911 for help. [<a class="ref" href="#carey2021">Carey 2021</a>]
                     					It is nearly six years since Eric Garner’s death, nine years since Travyon
                     					Martin died, and sixty-five years since Emmett Till was lynched in
                     					Mississippi. </div>
                  				
                  <div class="counter"><a href="#p71">71</a></div>
                  <div class="ptext" id="p71"> Bertram’s “@Code_Switching” includes the
                     					following Perl code (based on Nick Montfort’s “PPG256-6”): </div>
                  				
                  <div class="counter"><a href="#p72">72</a></div>
                  <div class="ptext" id="p72">
                     					
                     <blockquote>
                        <p>
                           							
                           <blockquote class="eg">
                              <pre><code class="code-general">#!usr/bin/perl
							@d=split/_/,switch_gods_switch_black_codes_you_when_you__where_god_belong_black_hills_to;
							{$_=localtime;/(..):(.)(.):(.)(.)/;print”\\”x$5.” $d[$1] $d[$2]
							$d[3] $d[$4] $d[$5] $d[$8]\n”;sleep 1; while $d &gt;
							0}{print”\\”x$5.” $d[$3] $d[$6]\n”;}}redo</code></pre>
                           </blockquote>
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p73">73</a></div>
                  <div class="ptext" id="p73"> There is much to unpack here, but briefly, a pattern match filter captures
                     					integers from the <span class="monospace">localtime</span> string and uses those to select
                     					specific words from an underscore-separated list of words. Each line of the
                     					poem is therefore determined by the current system time, which Bertram
                     					invites us to consider by helpfully including the initial
                     						<span class="monospace">localtime</span> for the three runs of the poem printed in the
                     					book. In other words, the poem is not randomly generated, but is instead a
                     					product of its time. This method recalls the technique of rjs in his <cite class="title italic">Energy Crisis Poems</cite> whose similarly time-based
                     					method prompts that writer to reflect, “the poet need
                     						not change his vision; he need only to move forward or backward in
                     						time to achieve innovation”. [<a class="ref" href="#rjs1974">rjs 1974</a>] And yet,
                     					a close reading of Bertram’s code reveals that whenever one runs the poem,
                     					some things will always be true. The expression <span class="monospace">$d[3]</span> will
                     					always select the word “black” because the index is the
                     					integer, <span class="monospace">3</span>, and not the regular expression backreference
                     						<span class="monospace">$3</span>, and <span class="monospace">$d[$8]</span> and <span class="monospace">$d[$6]</span> will
                     					always select “switch” because there are only 5
                     					possible capture groups and a null backreference operates like a
                     						<span class="monospace">0</span> in referencing the first element in a list. </div>
                  				
                  <div class="counter"><a href="#p74">74</a></div>
                  <div class="ptext" id="p74"> Therefore, in this poem, the second word of each shorter line will always be
                     						“switch”, the third word of each longer
                     					line will be “black”, and the final word of each
                     					longer line will be “switch”. 
                     <blockquote>
                        <p>
                           						 [$_] you switch \ black codes black switch gods
                           							switch \ you switch \\ black codes black switch switch switch \\
                           							you switch \\\ black codes black switch black switch \\\ you
                           							switch \\\\ black codes black switch codes switch 
                           						 [<a class="ref" href="#bertram2019a">Bertram 2019a</a>]
                           					</p>
                     </blockquote>
                     				</div>
                  				
                  <div class="counter"><a href="#p75">75</a></div>
                  <div class="ptext" id="p75"> In this poem and throughout the collection, Bertram provides an alternative
                     					to rjs. Simply moving forward in time is not necessarily innovation, just
                     					as it is a mistake to assume that America, with its history built on Black
                     					suffering, is naturally less racist as time passes. “@Code_switching” is dedicated to Frantz Fanon whose <cite class="title italic">Black Skin, White Masks</cite> emphasizes the
                     					linguistic mechanisms of colonization. As a product of time, “@Code_switching” reminds readers that to be Black
                     					and of the moment within that mechanism is to be always switching: codes
                     					switch, you switch, when switch, you switch. Always
                     						“black” and always “switch”. </div>
                  				
                  <div class="counter"><a href="#p76">76</a></div>
                  <div class="ptext" id="p76"> Perhaps the only way to stop the switch is to kill the process, which
                     					Bertram portrays in a metaleptic gesture similar to the crashing halt of
                     						“three_last_words”. Bertram concludes
                     						“@Code_switching” with a series of
                     						<span class="monospace">^C</span> -- the characters one sees after typing
                     						<span class="monospace">ctrl+c</span> in a terminal to abort the currently-running
                     					process. We can imagine the poet at their keyboard spamming
                     						<span class="monospace">ctrl+c</span> until the poem crashes. </div>
                  				
                  <div class="counter"><a href="#p77">77</a></div>
                  <div class="ptext" id="p77"> This is one of the many poignant moments in <cite class="title italic">Travesty
                        						Generator</cite> where a computational process gives way (switches)
                     					from a formal concept to a lived, individual experience of a reality shaped
                     					by the consequences of colonization, oppression, and injustice. As I noted
                     					at the outset of this essay, my experience of race is very different; as a
                     					white man working in academia, I participate in a system that was designed
                     					by and for people like me. By working with the tools of
                     					similarly-monolithic computer programs, Lillian-Yvonne Bertram uses their
                     					poetry to think outside of the ideologies and paradigms those systems take
                     					for granted. Rather than letting language speak for itself (human or
                     					computer), Bertram speaks past the filter of those generators to share
                     					their lived, individual, and sometimes traumatic experiences of race and
                     					identity in 21st century America. </div>
                  			</div>
               			
               <div class="div div0">
                  				
                  <h1 class="head">Acknowledgement</h1>
                  				
                  <div class="counter"><a href="#p78">78</a></div>
                  <div class="ptext" id="p78"> This essay is based on a forum post I shared on the Critical Code Studies
                     					Working Group forum in March, 2020. I am grateful for feedback from Mark
                     					Marino, patricia_s, Milton Laufer, and especially Lillian-Yvonne Bertram as
                     					I transformed that post into this longer essay. </div>
                  			</div>
               		
               		
               			
               		
               	</div>
            
            <div id="notes">
               <h2>Notes</h2>
               <div class="endnote" id="d3e502"><span class="noteRef lang en">[1] The lineage that connects
                     						"Counternarratives" to "Through the Park" is similar to the network of
                     						remixes created in response to Nick Montfort's poem, "Taroko Gorge,"
                     						many of which have been collected in Volume 3 of the <cite class="title italic">Electronic Literature Collection</cite>. As both
                     						Cayley and Marino have discussed, the fact that many of the derivative
                     						works leave the algorithm of that poem intact -- and thus its form --
                     						but make meaningful changes to the data means that the original work
                     						Montfort created is more like a poetic form than simply a poem. J.R.
                     						Carpenter's remix of that poem, "Gorge," replaces Montfort's variables
                     						with words related to gluttonous consumption. While an analysis of
                     						Carpenter's work is beyond the scope of this essay, it is interesting
                     						that her collection, <cite class="title italic">Generation[s]</cite> which
                     						includes "Gorge," also features several poems generated by remixing
                     						and modifying "Through the Park." Reading those alongside Bertram's
                     						"Counternarratives" as would likely highlight different perspectives
                     						on Montfort's original poem.</span></div>
            </div>
            <div id="worksCited">
               <h2>Works Cited</h2>
               <div class="bibl"><span class="ref" id="notguilty2013"><!-- close -->BBC 2013</span>  BBC. (2013) “George Zimmerman not guilty of Trayvon Martin murder”. 14 July
                  					2013. <cite class="title italic">BBC News</cite>. BBC.com. <a href="https://www.bbc.com/news/world-us-canada-23304198" onclick="window.open('https://www.bbc.com/news/world-us-canada-23304198'); return false" class="ref">https://www.bbc.com/news/world-us-canada-23304198</a>
                  				</div>
               <div class="bibl"><span class="ref" id="bertram2019a"><!-- close -->Bertram 2019a</span>  Bertram, Lillian-Yvonne.
                  					2019. <cite class="title italic">Travesty Generator</cite>. Noemi Press,
                  					Blacksburg VA. </div>
               <div class="bibl"><span class="ref" id="bertram2019b"><!-- close -->Bertram 2019b</span>  Bertram, Lillian-Yvonne.
                  					2019. “The Whitest Boy Alive: Witnessing Kenneth
                  						Goldsmith by Lillian-Yvonne Bertram”
                  					<cite class="title italic">Poetry Foundation</cite>. <a href="https://www.poetryfoundation.org/harriet/2015/05/the-whitest-boy-alive-witnessing-kenneth-goldsmith" onclick="window.open('https://www.poetryfoundation.org/harriet/2015/05/the-whitest-boy-alive-witnessing-kenneth-goldsmith'); return false" class="ref">https://www.poetryfoundation.org/harriet/2015/05/the-whitest-boy-alive-witnessing-kenneth-goldsmith</a>
                  				</div>
               <div class="bibl"><span class="ref" id="bertramnd"><!-- close -->Bertram n.d.</span>  Bertram, Lillian-Yvonne. n.d.
                  						“New Sermon Code”. Python 2. <a href="https://www.lybetc.tech/new-sermon-code" onclick="window.open('https://www.lybetc.tech/new-sermon-code'); return false" class="ref">https://www.lybetc.tech/new-sermon-code</a>
                  				</div>
               <div class="bibl"><span class="ref" id="brooks1987"><!-- close -->Brooks 1987</span>  Brooks, Gwendolyn. 1987. <cite class="title italic">Blacks</cite>. David Co, Chicago. </div>
               <div class="bibl"><span class="ref" id="buchloh2012"><!-- close -->Buchloh 2012</span>  Buchloh, Benjamin. 2012. “The Book of the Future: Alison Knowles's The House of
                  						Dust”. <cite class="title italic">Mainframe Experimentalism: Early
                     						Computing and the Foundations of the Digital Arts</cite>. Ed. Hannah
                  					Higgins and Douglas Kahn. University of California Press. </div>
               <div class="bibl"><span class="ref" id="carey2021"><!-- close -->Carey 2021</span>  Carey, Julie. 23 April 2021. “Virginia Man Shot by Sheriff's Deputy After Calling 911
                  						for Help”. <cite class="title italic">NBC4 Washington</cite>. <a href="https://www.nbcwashington.com/news/local/northern-virginia/virginia-man-isaiah-brown-shot-by-sheriffs-deputy-after-calling-911-for-help/2649178/" onclick="window.open('https://www.nbcwashington.com/news/local/northern-virginia/virginia-man-isaiah-brown-shot-by-sheriffs-deputy-after-calling-911-for-help/2649178/'); return false" class="ref">https://www.nbcwashington.com/news/local/northern-virginia/virginia-man-isaiah-brown-shot-by-sheriffs-deputy-after-calling-911-for-help/2649178/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="carpenter2011"><!-- close -->Carpenter 2011</span>  Carpenter, J.R. 2011.
                  						<cite class="title italic">Generation[s]</cite> Trauma Wien. </div>
               <div class="bibl"><span class="ref" id="cayley2002"><!-- close -->Cayley 2002</span>  Cayley, John. 10 September 2002.
                  						“The Code is not the Text (Unless It Is the
                  						Text)”
                  					<cite class="title italic">electronic book review</cite>. <a href="https://electronicbookreview.com/essay/the-code-is-not-the-text-unless-it-is-the-text/" onclick="window.open('https://electronicbookreview.com/essay/the-code-is-not-the-text-unless-it-is-the-text/'); return false" class="ref">https://electronicbookreview.com/essay/the-code-is-not-the-text-unless-it-is-the-text/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="cayley2015"><!-- close -->Cayley 2015</span>  Cayley, John. 31 January 2015.
                  						“Poetry and Stuff: A Review of #!”
                  					<cite class="title italic">electronic book review</cite>. <a href="http://electronicbookreview.com/essay/poetry-and-stuff-a-review-of/" onclick="window.open('http://electronicbookreview.com/essay/poetry-and-stuff-a-review-of/'); return false" class="ref">http://electronicbookreview.com/essay/poetry-and-stuff-a-review-of/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="chun2011"><!-- close -->Chun 2011</span>  Chun, Wendy Hui Kyong. 2011. <cite class="title italic">Programmed Visions: Software and Memory</cite>. Boston,
                  					MIT Press. </div>
               <div class="bibl"><span class="ref" id="dennigan2020"><!-- close -->Dennigan 2020</span>  Dennigan, Darcie. 2020.
                  						“2020 Anna Rabinowitz Prize.”
                  					<cite class="title italic">Poetry Society of America</cite>. <a href="https://poetrysociety.org/award-winners/2020-anna-rabinowitz-prize" onclick="window.open('https://poetrysociety.org/award-winners/2020-anna-rabinowitz-prize'); return false" class="ref">https://poetrysociety.org/award-winners/2020-anna-rabinowitz-prize</a>
                  				</div>
               <div class="bibl"><span class="ref" id="harpold2007"><!-- close -->Harpold 2007</span>  Harpold, Terry. 2007. “Screw the Grue: Mediality, Metalepsis,
                  					Recapture”. <cite class="title italic">Game Studies</cite>. 7:1. </div>
               <div class="bibl"><span class="ref" id="hartman1996"><!-- close -->Hartman 1996</span>  Hartman, Charles O. (1996)
                  						<cite class="title">Virtual Muse: Experiments in Computer Poetry</cite>.
                  					Middletown: Wesleyan University Press.</div>
               <div class="bibl"><span class="ref" id="kenner1984"><!-- close -->Kenner and O'Rourke 1984</span>  Kenner, Hugh and
                  					Joseph O'Rourke. 1984. <cite class="title italic">Byte Magazine</cite> 9:12. </div>
               <div class="bibl"><span class="ref" id="knowles1968"><!-- close -->Knowles 1968</span>  Knowles, Alison and James
                  					Tenney. 1968. <cite class="title italic">A House of Dust</cite>. </div>
               <div class="bibl"><span class="ref" id="laiti2016"><!-- close -->Laiti 2016</span>  Laiti, Outi. 2016. <cite class="title italic">Ethnoprogramming : an indigenous approach to computer
                     						programming : a case study in Ohcejohka area comprehensive
                     						schools</cite>. University of Lapland, Faculty of Education. <a href="https://lauda.ulapland.fi/handle/10024/62624" onclick="window.open('https://lauda.ulapland.fi/handle/10024/62624'); return false" class="ref">https://lauda.ulapland.fi/handle/10024/62624</a>
                  				</div>
               <div class="bibl"><span class="ref" id="lavigne2015"><!-- close -->Lavigne 2015</span>  Lavigne, Sam. 1 April 2015.
                  						“Slow Hot Computer” Javascript. <a href="http://slowhotcomputer.com" onclick="window.open('http://slowhotcomputer.com'); return false" class="ref">http://slowhotcomputer.com</a>
                  				</div>
               <div class="bibl"><span class="ref" id="marino2020"><!-- close -->Marino 2020</span>  Marino, Mark. 2020. <cite class="title italic">Critical Code Studies</cite>. MIT Press, Cambridge, MA. </div>
               <div class="bibl"><span class="ref" id="mccauley1974"><!-- close -->McCauley 1974</span>  McCauley, Caroline. 1974.
                  						<cite class="title italic">Computers and Creativity</cite> Praeger, New
                  					York. </div>
               <div class="bibl"><span class="ref" id="montfort2008"><!-- close -->Montfort 2008</span>  Montfort, Nick. 2008. “Through the Park” Python. <a href="https://nickm.com/poems/through_the_park.py" onclick="window.open('https://nickm.com/poems/through_the_park.py'); return false" class="ref">https://nickm.com/poems/through_the_park.py</a>
                  				</div>
               <div class="bibl"><span class="ref" id="montfort2013"><!-- close -->Montfort 2013</span>  Montfort, Nick. 2013. “Round” Javascript. <cite class="title italic">New
                     						Binary Press</cite>. <a href="http://newbinarypress.com/publications/" onclick="window.open('http://newbinarypress.com/publications/'); return false" class="ref">http://newbinarypress.com/publications/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="montfort2014a"><!-- close -->Montfort 2014a</span>  Montfort, Nick. 2014.
                  						<cite class="title italic">#!</cite> Counterpath Press. </div>
               <div class="bibl"><span class="ref" id="montfort2014b"><!-- close -->Montfort 2014b</span>  Montfort, Nick. 2014.
                  						“A House of Dust reimplementation”. HTML.
                  						<a href="https://nickm.com/memslam/a_house_of_dust.html" onclick="window.open('https://nickm.com/memslam/a_house_of_dust.html'); return false" class="ref">https://nickm.com/memslam/a_house_of_dust.html</a>
                  				</div>
               <div class="bibl"><span class="ref" id="mullen1999"><!-- close -->Mullen 1999</span>  Mullen, Harryette. 1999. “Imagining the Unimagined Reader: Writing to the Unborn
                  						and Including the Excluded”. <cite class="title italic">boundary
                     						2</cite>. 26:1. </div>
               <div class="bibl"><span class="ref" id="noble2014"><!-- close -->Noble 2014</span>  Noble, Safiya. 2014. “Teaching Trayvon”. <cite class="title italic">The Black
                     						Scholar</cite>. 44.1 (2014): 12-29. </div>
               <div class="bibl"><span class="ref" id="travestyv"><!-- close -->OED 1989</span>  Oxford English Dictionary. (1989)
                  						“travesty, v”. <cite class="title italic">Oxford
                     						English Dictionary</cite>. {2nd edn.} OED.com. <a href="https://www.oed.com/oed2/00256847" onclick="window.open('https://www.oed.com/oed2/00256847'); return false" class="ref">https://www.oed.com/oed2/00256847</a>
                  				</div>
               <div class="bibl"><span class="ref" id="ortiz2014"><!-- close -->Ortiz 2014</span>  Ortiz, Eric. 19 December 2014.
                  						“Indiana Cop Told to Stop Selling 'Breathe Easy'
                  						T-shirts”
                  					<cite class="title italic">NBC News</cite> NBCnews.com. <a href="https://www.nbcnews.com/news/us-news/indiana-cop-told-stop-selling-breathe-easy-t-shirts-n271581" onclick="window.open('https://www.nbcnews.com/news/us-news/indiana-cop-told-stop-selling-breathe-easy-t-shirts-n271581'); return false" class="ref">https://www.nbcnews.com/news/us-news/indiana-cop-told-stop-selling-breathe-easy-t-shirts-n271581</a>
                  				</div>
               <div class="bibl"><span class="ref" id="sample2011"><!-- close -->Sample 2011</span>  Sample, Mark. 13 September 2011.
                  						“Zombie Code and Extra-Functional
                  						Significance”. <cite class="title italic">Play the Past</cite>. <a href="https://www.playthepast.org/?p=1989" onclick="window.open('https://www.playthepast.org/?p=1989'); return false" class="ref">https://www.playthepast.org/?p=1989</a>
                  				</div>
               <div class="bibl"><span class="ref" id="snodgrasssoon2019"><!-- close -->Snodgrass and Soon 2019</span>  Snograss, Eric
                  					and Winnie Soon. 1 February 2019. “API practices and
                  						paradigms: Exploring the protocological parameters of APIs as key
                  						facilitators of sociotechnical forms of exchange”. <cite class="title italic">First Monday</cite>. 24:2. </div>
               <div class="bibl"><span class="ref" id="whalen2014"><!-- close -->Whalen 2014</span>  Whalen, Zach. 7 February 2014.
                  						“House of Dust by Alison Knowles and James
                  						Tenney” HTML. <a href="http://zachwhalen.net/pg/dust/" onclick="window.open('http://zachwhalen.net/pg/dust/'); return false" class="ref">http://zachwhalen.net/pg/dust/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="xiong2021"><!-- close -->Xiong et al. 2021</span>  Xiong, Chao, Paul Walsh, and
                  					Rochelle Olsen. 21 April 2021. “Derek Chauvin cuffed
                  						after murder, manslaughter convictions in death of George
                  						Floyd”
                  					<cite class="title italic">StarTribune</cite>. <a href="https://www.startribune.com/derek-chauvin-cuffed-after-murder-manslaughter-convictions-in-death-of-george-floyd/600047825/" onclick="window.open('https://www.startribune.com/derek-chauvin-cuffed-after-murder-manslaughter-convictions-in-death-of-george-floyd/600047825/'); return false" class="ref">https://www.startribune.com/derek-chauvin-cuffed-after-murder-manslaughter-convictions-in-death-of-george-floyd/600047825/</a>
                  				</div>
               <div class="bibl"><span class="ref" id="rjs1974"><!-- close -->rjs 1974</span>  rjs. (1974) <cite class="title">Energy Crisis Poems:
                     						Poetry by Program</cite>. Cleveland: Ground Zero.</div>
            </div>
            <div class="toolbar"><a href="#">Preview</a>  |  <span style="color: grey">XML</span> |  <a href="#" onclick="javascript:window.print();" title="Click for print friendly version">Print Article</a></div>
            <div class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nd/4.0/">Creative Commons Attribution-NoDerivatives 4.0 International License</a>.
               </div>
         </div>
      </div>
   </body>
</html>