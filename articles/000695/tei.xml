<TEI xmlns="http://www.tei-c.org/ns/1.0"><teiHeader><fileDesc><titleStmt><title/><author/></titleStmt><editionStmt><edition><date>2022-07-30</date></edition></editionStmt><publicationStmt><p>unknown</p></publicationStmt><sourceDesc><p>Converted from a Word document</p></sourceDesc></fileDesc><encodingDesc><appInfo><application xml:id="docxtotei" ident="TEI_fromDOCX" version="2.15.0"><label>DOCX to TEI</label></application></appInfo></encodingDesc><revisionDesc><listChange><change><date>2023-05-27T02:06:48Z</date><name/></change></listChange></revisionDesc></teiHeader><text><body><div><head><hi style="font-family:Gadugi">ᐊᒐᐦᑭᐯᐦᐃᑲᓇ ᒫᒥᑐᓀᔨᐦᐃᒋᑲᓂᐦᑳᓂᕽ</hi>  | acahkipehikana mâmitoneyihicikanihkânihk | Programming with Cree# and Ancestral Code: Nehiyawewin spirit markings in an artificial brain</head></div><div><head>Abstract</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">In this article, I discuss my project ‘Ancestral Code,’ which consists of an integrated development environment (“IDE”) and the </hi><anchor xml:id="bookmark=id.1fob9te"/><anchor xml:id="bookmark=id.3znysh7"/><hi rend="italic normalweight baseline" style="font-size:12pt">Nehiyaw</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (Plains Cree) based programming languages called ‘Cree#’ (pronounced: Cree-Sharp) and ‘</hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐊᒋᒧ</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">’ (âcimow). These languages developed in response to western perspectives on human-computer relationships, which I challenge and reframe in Nehiyaw/Indigenous contexts. </hi></p></div><div><head>Introduction</head><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Nohkompan,</hi><note place="foot" xml:id="ftn0" n="1"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">Nohkompan</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> – grandmother who is passed on</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> my </hi><hi style="font-size:12pt">p</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">aternal grandmother, was Nehiyaw (Cree) and Saulteaux (Chippewa). After her passing and understanding the matriarchal nature of many Cree peoples, I found myself looking at the Nehiyaw culture of her mother, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Nitâpân,</hi><note place="foot" xml:id="ftn1" n="2"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">Nitâpân – </hi><hi rend="normalweight baseline" style="font-size:12pt">great-grandmother</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> for inspiration for my creative works. In 2014, I attempted to use </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Nehiyawewin</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (the Cree language) words as variables using the Unified Canadian Aboriginal Syllabics (Unicode, Inc. 2021). My early attempts were instantly problematic because the development environments (IDEs) I used would render the syllabics, like </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑖ</hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">›, </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">as empty boxes </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Cambria Math;font-size:12pt">⌧</hi><hi rend="normalweight baseline" style="font-size:14pt">›.</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> So I searched for other solutions. However, at that time, the platforms I was most familiar with, such as Processing, openFrameworks, Java, and C#, all shared this same ‘problem.’ This experience sparked my desire to bring Nehiyawewin, in its syllabic form, into being as a programming language. In this article, I present the physical and abstract challenges of developing my Ancestral Code digital toolkit that allows a programmer to insert code blocks into transcribed Indigenous stories that, once executed, produce a generative visual narrative of the transcribed story. But fo</hi><hi style="font-size:12pt" xml:space="preserve">r you </hi><hi rend="normalweight baseline" style="font-size:12pt">to better understand this desire’s importance, it is customary in my heritage to first introduce myself.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I identify as Nehiyaw-Métis and belong to the Métis Nation of Alberta. The Métis in Canada are federally recognized as one of the three Indigenous groups of peoples, the other two being First Nations and Inuit. The Métis have been historically referred to as half-bloods or, more derogatorily, half-breeds. We are a people that came to be from the blending of cultures and traditions of the first European visitors with the numerous Indigenous peoples of the ‘new world.’  Many of these first visitors were not men seeking to settle; they were merely coming to seek a better living as fur traders. They were nomadic and travelled extensively, with many intending to return to their respective homelands when they retired. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Nevertheless, these traders married into First Nation and Inuit tribal communities, often for financially strategic reasons. My 5x Great-Grandfather was a historically notable English fur trader named John Sayer and was one of these first visitors. These early relationships between European visitors and Indigenous peoples continued through generations, with subsequent mixed-racial generations raised with a blend of European knowledge and their original Indigenous languages and traditions. This concrescence of cultures and languages is how the Métis developed into a unique culture that privileges the cultural teachings of their respective Indigenous heritages without entirely rejecting their European roots. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">My research as a Métis scholar and digital media artist has since evolved from using computers and programming as </hi><hi rend="italic normalweight baseline" style="font-size:12pt">tools</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to generate my artwork </hi><anchor xml:id="bookmark=id.3dy6vkm"/><anchor xml:id="bookmark=id.tyjcwt"/><anchor xml:id="bookmark=id.1t3h5sf"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">to viewing computers as </hi><hi rend="italic normalweight baseline" style="font-size:12pt">animate creatures</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, digital representations of my Indigenous heritage. Subsequently, </hi><anchor xml:id="bookmark=id.2s8eyo1"/><anchor xml:id="bookmark=id.4d34og8"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I see computer languages as digital extensions of Nehiyaw storywork and ceremonies that reflect the epistemological, ontological, and axiological concerns of my Nehiyaw beliefs and practices. </hi><anchor xml:id="bookmark=id.17dp8vu"/><anchor xml:id="bookmark=id.3rdcrjn"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">My perspectives on computer programming critique the prevalent use of English in coding languages and the reflection of settler/colonial perspectives in their design. Though I recognize that computer programming languages, like most technologies, are constantly evolving and changing, I maintain that they are also seemingly immutable and typically manifest from a “historically-essential … colonial impulse” (Ali 2014). Most notably, the culture(s) from which modern programming languages and practices grow “[come] with significant cultural baggage” (Heaven 2013). Through my own visual media art explorations with the popular new-media-art programming development environment </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Processing</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, I recognized significant challenges </hi><hi style="font-size:12pt">to</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> programming in anything other than English. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">The detrimental legacy of colonial practices on the lives of Indigenous people is well documented, from forced displacement from traditional homelands to attempted erasure of culture, language, and practices (Gradual Civilization Act 1857; Venne 1981; J. Milloy 2008; J. S. Milloy 2017). </hi><anchor xml:id="bookmark=id.26in1rg"/><anchor xml:id="bookmark=id.lnxbz9"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">As citizens of a globally connected techno-culture, we perpetuate this erasure by embracing a </hi><anchor xml:id="bookmark=id.1ksv4uv"/><anchor xml:id="bookmark=id.35nkun2"/><hi rend="normalweight baseline" style="font-size:12pt">technicism that incorporates a blind acceptance of technologies and the cultural systems from which they are derived as necessary to engage with one another in our digital lives. Yet, critical theories of technologies are continually demonstrating that digital technologies are neither “socially or culturally neutral” (Garneau 2018) nor are they “determinist, but rather [sites] of social struggle” (Warschauer 1998). Despite this technicism, navigating the modern technology ecosystem remains vital to Indigenous peoples, who actively utilize these new computing domains for “survivance” (Vizenor 2008) and (re)establish both individual and community identities from these technological relationships and their ancestral cultures (Ormond-Parker et al. 2013)</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">By viewing computing through a lens of my Indigenous heritage, my perceptions of computer languages and programming have been dramatically altered. My awareness of programming contexts informed by Nehiyaw language and cultural practices has opened new understandings of how programming languages can facilitate a greater sense of personal and digital identity and cultural belonging that go far beyond the purely functional operations of programming. These experiences are at the heart of what has become my Ancestral Code project.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Ancestral Code is a wholistic programming environment built upon my own Indigenous computing design theory. It consists of both hardware, in the form of a specialized keyboard for typing Nehiyawewin syllabics, and software in the forms of a programming IDE and a multi-form programming language. The programming language component of Ancestral Code that is the focus of this article aims explicitly to integrate a “wholistic” (Absolon 2010) braiding of Nehiyaw language and cultural practices within its design. I use “wholistic” here instead of “holistic” because Indigenous learning interconnects all aspects of being that include mind, body, emotion, and spirit and is not merely referring to a “whole” as a sum of parts. In particular, Ancestral Code is my vision of how Nehiyaw culture and language can be utilized as a primary interface for computer programming and computing design, uniting the values/benefits of Nehiyaw perspectives with western programming practices. To begin this journey, I will first provide a brief background of what I frame as an Indigenous computing design theory, describing the importance of this framework when approaching technology and computing design development with an Indigenous focus. Next, I describe how this design influences a unique perspective that views ‘Code as Story.’ And then, I delve into the challenges (and related solutions) to my ongoing efforts to bring the Ancestral Code platform for programming in Nehiyawewin to Nehiyaw communities. I hope this platform can open new opportunities for heritage language use in our modern technological context and further foster Indigenous cultural maintenance. Finally, I surmise and summarize how this work can be used or reproduced by other Indigenous cultures with similar cultural perspectives and language construction.</hi></p><div><head>Indigenous Wholistic Computing Design Theory</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Computing system design theories continue to evolve and have been described by or compared </hi><hi style="font-size:12pt">to</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> a wide range of systems such as mechanical (Worden, Staszewski, and Hensman 2011), biological (Babaoglu et al. 2006; Benenson 2012), and hierarchical (Kleinrock and Kamoun 1980; Abd-El-Barr 2009), to name just a few. Similarly, the past decade has also seen increased interest in postcolonial computing and colonialism as an influencing or embedded aspect of technological architectures (L. C. Irani and Dourish 2009; L. Irani et al. 2010; Merritt and Bardzell 2011; Dourish and Mainwaring 2012; Philip, Irani, and Dourish 2012; Abdelnour-Nocera, Clemmensen, and Kurosu 2013; Ali 2014). In developing an Indigenous computing theory, I consider common concerns from a general pan-Indigenous perspective, recognizing that research by Indigenous scholars commonly employs cultural practices and knowledge such as ceremony (Wilson 2008; Cormier and Ray 2018), wholistic practices (Absolon 2010), honouring of oral knowledges (Thomas 2005), and community engagement (Madden, Higgins, and Korteweg 2013). </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">From these general characteristics I also used Nehiyaw-specific knowledge to help shape my own approach of establishing an Indigenous computing framework. The English term “Cree” is an anglicized form of the French word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">cri</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> meaning to shout or cry aloud, and is how early European settlers came to name the Cree/Nehiyaw people. However, I do not refer to myself as Cree-Métis. I am Nehiyaw-Métis.  Nehiyaw, in my heritage language, translates as ‘four-bodied’ or ‘four-spirit’ people. We see ourselves as a people composed of four ‘bodies’: the physical, mental, emotional, and spirit. Therefore, specific to Nehiyaw culture, I use spiritual teachings of the “four-bodies” framework to inform, describe, and highlight the aspects of computing that are inherently Nehiyaw and reflect Nehiyaw understandings and knowledge development.  </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Furthermore, each of these bodies has numerous cultural teachings that exist as living (oral) histories highlighting the cultural significance of their meanings and relationships between humans and the world. In other words, “</hi><hi rend="italic normalweight baseline" style="font-size:12pt">kinehiyâwiwininaw nehiyawewin</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> / The Cree language is our identity” (H.C. Wolfart and Ahenakew 1993, title). The Cree language, Nehiyawewin, is an intricately woven fabric that unites our life, being, and identity, across generations of knowledge and embodies spiritual and sacred knowledge that spans thousands of years. Because Nehiyaw language is so integral to Nehiyaw life, understanding user-computer relationships in a Nehiyaw context requires redefining philosophical understandings of computer system design using Nehiyaw terms. </hi><hi style="font-size:12pt" xml:space="preserve">Therefore, using Nehiyawewin in my theoretical designs serves as a ceremonial healing practice in addition to its functional role of creating computational instructions. </hi><hi rend="normalweight baseline" style="font-size:12pt">I find these considerations crucial to the design of computing technologies for Nehiyaw people as they re-envision the computer as a member of the community and an extension of one’s cultural identity.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Therefore, placing culture as the driving force behind the development of an Indigenous Wholistic Computing Design Theory can, and will, often be at odds with western philosophies on computer function and design. For instance, cultural attitudes towards concepts of time, order/sequencing, and efficiency can be radically different from their computational definitions. For example, I wrote a program to digitally-bead portraits of my family. The first version of this program used a basic loop to place pixel-beads on the screen in a sequence of rows, which it did in a left-to-right fashion. From a computational perspective, this loop was simple and efficient. However, the original computational instructions did not reflect my physical action of beading if I were to bead this image by hand. Nor did it capture the cultural significance of the continuous thread that connects each bead. There is a special meaning in the unbroken thread. As a result, I reformatted my code to reflect my Métis beading practice. The new code created alternating rows of digital beadwork that progress from left-to-right, then right-to-left in a continuous unbroken stream. This updated code better represents my physical process instead of code that created patterns that flowed in one direction, from left-to-right, as multiple individual lines instead of a continuous loop. The ‘best’ or ‘most efficient’ code fractures the image’s construction, resulting in digitally rendered images conforming to the technological tools’ design and language, favouring efficiency over cultural focus.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Experiences such as these altered my perspectives on general computing design theories and stimulated my desire to investigate computing design from Indigenous wholistic perspectives. Shifting the source of computing design from one driven by systemic operations to one that is human and cultural requires a certain degree of re-prioritization. I opted to expand existing system design theories by creating an Indigenous Wholistic Computing Design Theory. By identifying and privileging Indigenous and Nehiyaw-specific perspectives within existing computational environments, I aim to reevaluate what aspects of computing design are favoured over others. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">In more concrete terms, systems design processes are vital because they create a clear overview intended to guide the actual development of a given product, whether it is hardware or software. In an Indigenously informed design process, this overview is still as essential but follows principles that promote [Indigenous] community collaboration and engagement over the tools and technologies that will be used; emphasizes interrelationships between components by establishing connections between Indigenous lived experience and the involved digital artifacts and their behaviours; and is open and flexible, or even unconcerned, with time and timelines in solution development. In such a theoretical framework western principles like Gestalt grouping or Fitt’s Law may not be applicable because the effects of cultural knowledge on a design may alter how components are typically created, or how they behave and interact with one another in comparison to systems focused directly at efficiency concerns like those found in data categorization, code flow, and execution and processing times.</hi></p></div><div><head>Indigenous Story as Code</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">What is coding if not a story? At a basic level, a story consists of five essential components: character(s), setting, plot, conflict, and resolution. Scholar Annette Vee, known for her study of composition and rhetoric in computer programming literacy, compares narrative writing with computer programming stating that they “are not the same thing [but] have a lot in common and can even merge into each other” (Vee 2017, 95). The relationship between story and code is particularly evident in esoteric computer languages such as </hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">Inform 7 </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">(Aikin 2009) and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Shakespeare</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (Hasselström and Åslund 2001), where code is literally formatted as stories. Moreover, I argue that ‘normal’ programming languages like C/C++, C#, and Java also share storytelling’s main elements despite their visual structure, notation, syntax, and semantic constructions. In ‘normal’ programming languages, these story elements exist in more abstract contexts where variables represent the ‘characters,’ the ‘setting’ is the programming environment, and the ‘plot’ is the program’s function as it operates up until its ‘resolution’ or termination. I first learned how to program in elementary school in 1979 using Applesoft BASIC. My teacher explained BASIC’s syntax using story examples. I was so enthralled with the idea of being able to represent the world around me using computer code that I started writing my journal entries in language arts class as BASIC code. For me, coding is very much a form of storytelling.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">In creating the Ancestral Code programming languages ‘</hi><anchor xml:id="bookmark=id.z337ya"/><anchor xml:id="bookmark=id.3j2qqm3"/><hi rend="normalweight baseline" style="font-size:12pt">Cree#’ and ‘</hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐊᒋᒧ</hi><hi rend="normalweight baseline" style="font-size:12pt">,’ (</hi><hi rend="italic normalweight baseline" style="font-size:12pt">âcimow</hi><hi rend="normalweight baseline" style="font-size:12pt">)</hi><note place="foot" xml:id="ftn2" n="3"><p style="text-align: left;"> <hi rend="normalweight baseline" style="font-size:12pt">‘</hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐊᒋᒧ</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">âcimow</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> – story </hi> </p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, my vision arrived as a genuine dream. In this dream, I was sitting in a community lodge (i.e., tipi), listening to an Elder tell a story. In this story, an image of </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Wîsahkecâhk</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, sometimes known as the </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Trickster Raven</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> in Nehiyaw cultural teachings, was animated on the wall behind him. Wîsahkecâhk was puppeted through the Elder’s words, while a syllabic subtitled transcription of the story ran beneath the imagery. This dream revealed a path for me. It led me to understand that this generative virtual landscape was a relationship between Nehiyawewin and the computer, and though this landscape was digital, it was still a ‘place.’ And here, in this place, I experienced my Ancestral Code project as each of the four </hi><hi rend="italic normalweight baseline" style="font-size:12pt">spirits</hi><hi style="font-size:12pt">:</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> The physical experience of seeing and being present; the mental experience of processing and parsing the story; the emotional experience of being attached to an Elder and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">feeling</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> the story; and the spiritual experience of the dream state itself.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Furthermore, in my dream, the syllabic transcription was an instruction-set that manipulated the vision of Wîsahkecâhk, thereby exposing me to the computing code. Thus, though this is a brief origin story of my Ancestral Code project, I have interpreted the role of the four spirits in furthering its creation as a critical component of its development. As a result, I have found new ways of applying Nehiyaw cultural teachings to my computer coding practice.</hi></p></div></div><div><head>Challenges and Solutions</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Though I expected to encounter obstacles in this project, I did not honestly foresee how deep into my coding practice and theory I would be required to go to design the Ancestral Code programming language. In this section, I trace out each of the challenges with working the Nehiyawewin orthography—including its use in the software and hardware, how I incorporated Nehiyaw language structures into the programming language, and how I see culture as being crucial to the programming languages I developed. </hi></p><div><head>Orthography</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">The Nehiyawewin orthography, called </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐊᒐᐦᑲᓯᓇᐦᐃᑲᓇ</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> or </hi><anchor xml:id="bookmark=id.2xcytpi"/><anchor xml:id="bookmark=id.1ci93xb"/><hi rend="italic normalweight baseline" style="font-size:12pt">acahkasinahikana</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, literally translates into English as ‘spirit markers.’ Nehiyawewin also has a Standard Roman Orthographic (“SRO”) writing system in which the language can be written with the standard Latin alphabet to aid English speakers in pronunciation. Though Nehiyawewin learners frequently use SRO, many Nehiyaw first language speakers consider SRO an accommodation or adoption of western processes. They also feel this system voids much of the cultural significance and meaning attached to the </hi><hi rend="italic normalweight baseline" style="font-size:12pt">spirit markers</hi><hi rend="normalweight baseline" style="font-size:12pt">. Though I prefer to use Nehiyawewin spirit markers, most of the Nehiyawewin in this article is written in SRO form for easier readability by English readers. I have included a glossary at the end of this article with definitions and a pronunciation guide using the International Phonetic Alphabet (“IPA”) phonetic notation system.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">My original desire to use </hi><hi rend="italic normalweight baseline" style="font-size:12pt">acahkasinahikana</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> exclusively in Ancestral Code was a conscious decision to combat the ‘accommodation’ of English language constructions and representations. However, </hi><hi style="font-size:12pt">i</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">n investigating my needs as a programmer, these language-based concerns revealed that support for both SRO and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">acahkasinahikana</hi> <hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">are required to support </hi><hi style="font-size:12pt">Nehiyawewin language learners that may come from different dialects or communities</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. For this reason, programming in Ancestral Code can be performed in its Romanized form that I call ‘Cree#’ (pronounced </hi><hi style="font-size:12pt">Cr</hi><hi rend="normalweight baseline" style="font-size:12pt">ee-sharp) or its syllabic form ‘</hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐋᒋᒧᐤ</hi><hi rend="normalweight baseline" style="font-size:12pt">’ (</hi><hi rend="italic normalweight baseline" style="font-size:12pt">âcimow</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">). The Ancestral Code IDE allows the programmer to switch between the two styles, where </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Cree#</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> accommodates a certain level of familiar structure to the C# programming language, separating it from the more story-like narrative structure of </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt" xml:space="preserve">ᐋᒋᒧᐤ </hi><hi rend="normalweight baseline" style="font-size:12pt">(</hi><hi rend="italic normalweight baseline" style="font-size:12pt">âcimow</hi><hi rend="normalweight baseline" style="font-size:12pt">). Switching between these modes provides unique alternatives to experiencing written Nehiyawewin, where representing code in multiple cultural forms can be done without necessarily favouring one over the other. Furthermore, the IDE development aspect revealed a couple, albeit minor, concerns, namely: 1) how to use the Unified Canadian Aboriginal Syllabics block of the Unicode Standard, that is, what font family/typeface to use for coding with syllabics, and 2) how to address coding without, or with minimal, punctuation and numeracy.</hi></p><div><head>Software: acahkasinahikana for coding</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Using Unicode characters in modern programming environments is possible if the computing system supports the desired character sets. The Unified Canadian Aboriginal Syllabics block of the Unicode Standard occupies 640 code positions from 1400</hi><hi rend="normalweight subscript" style="font-size:12pt">hex</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to 167F</hi><hi rend="normalweight subscript" style="font-size:12pt">hex</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. It includes orthographic glyphs for Blackfoot, Carrier, Cree, Dene, Inuktitut, Ojibwe, and other Canadian Athabascan languages. Unfortunately, the coding environment is often the main obstacle in using Unicode characters, especially as variable names and, more problematically, as keywords or reserved words. Typically, this lack of support is simply because the environment often uses a pre-installed font that does not contain glyph(s) in the desired code points of the font file. By default, the coding environments I am familiar with, such as </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Visual Studio</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Processing</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, use a fixed-width font/typeface such as Consolas, Courier, or Monospace. These fonts are common to Windows OS systems but do not have the Canadian Aboriginal Syllabics block of glyphs. Until recently, changing this font was not easy. Although, as of the writing of this article, the settings or preferences support in some IDEs is open to changing the default font, some still limit the fonts that can be used. There also are limited fonts suitable for programming using the Unicode Canadian Aboriginal Syllabics, and I argue there are currently no suitable fonts. Though it is theoretically possible to use syllabics as variable names in those IDEs, reliance on English programmatic tokens remains. The question then becomes, which font(s) can or should be used for programming with </hi><hi rend="italic normalweight baseline" style="font-size:12pt">acahkasinahikana</hi><hi rend="normalweight baseline" style="font-size:12pt">?</hi></p></div><div><head>Software: acahkasinahikana fonts</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Though this may sound like a trivial topic from a western perspective, as it truly has little to do with actual coding and more to do with aesthetic preference, my critical reflection on coding practice makes this a necessary point of discussion. Remember that Nehiyaw </hi><hi rend="italic normalweight baseline" style="font-size:12pt">acahkasinahikana</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> are visual representations and extensions of being. They are called </hi><hi rend="italic normalweight baseline" style="font-size:12pt">spirit markers</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> for a reason. So, their representation in the computer must be treated with equal consideration. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Most programmers would agree that fixed-width or monospaced typefaces are ubiquitous in coding because they align very well in rows and columns and generally provide a greater distinction between similarly shaped characters like </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">0, o, O </hi><hi rend="normalweight baseline" style="font-size:14pt">›,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> narrow characters like </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I, l, i </hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, as well as providing more space for syntactical and operational characters </hi><hi rend="normalweight baseline" style="font-size:14pt">‹</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (, {, [,! › (Ardley 2014). Combining this respect for the visual aspects of language with the need for a monospaced coding font reveals two challenges. The first challenge is that, to my knowledge, only one monospaced font purposefully includes the Canadian Aboriginal Syllabics blocks, </hi><hi rend="bold baseline" style="font-size:12pt">Everson Mono.</hi><note place="foot" xml:id="ftn3" n="4"><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> https://www.evertype.com/emono/</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> The second challenge is that the physical structure of syllabics makes using non-fixed-width fonts challenging to navigate as code. The visual structure of the major glyphs (i.e., the glyphs representing a consonant and vowel pair) consists of reflected orientations of a single shape (ex. </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᒥ ᒣ ᒪ ᒧ</hi><hi rend="normalweight baseline" style="font-size:14pt">›)</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. The resulting printed text is fairly consistently sized but is visually similar to coding in all English caps. This is not necessarily a negative, as my original programs written in BASIC were done in all caps. But a more significant point of consideration is how a culture perceives the visual design of its language. For example, in developing typefaces for Canadian syllabics, Canadian typography designer Kevin King worked directly with Indigenous communities to ensure their languages were written in the respective community’s preferred style. He notes that “to ignore this would result in a text that was neither culturally appropriate for local readers nor able to convey adequately the meaning and atmosphere of the text for that readership” (King 2022). Adding to these, the limited number of monospaced fonts that support Canadian syllabic glyphs encouraged me to develop a new code-friendly font to address these obstacles. This font (Figure 1), I tentatively named ‘AC Mono,’ was constructed using my wholistic design framework, and my choices in the font design process are consciously aware of Indigenous visual aesthetics. I want to note here that my design of this font was considered from a more pan-Indigenous perspective and not specific to Nehiyaw culture. This is because the Unified Canadian Aboriginal Syllabics is not Nehiyaw specific – it represents glyphs from various North American Indigenous languages. For example, as seen in the syllabic T-series glyphs like ‘tâ’ </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑖ</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and ‘te’ </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑌ</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt">, I used thicker lines, an emphasis on fluidity in the curves, and rounded features on the start and end points of the strokes. These organic geometries and gestures are found in numerous Indigenous art traditions in North America, including the ovoid traditions of Coast-Salish artforms, Inuit bone and stone carving, and Métis beadwork.</hi></p><figure><graphic n="1001" width="14.816666666666666cm" height="10.086344444444444cm" url="media/image6.png" rend="inline"><desc>AC Mono Font glyphs for tā “ᑖ” and te “ᑌ”</desc></graphic></figure><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Figure 1. AC Mono Font glyphs for tâ ‘</hi><hi rend="italic normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑖ</hi><hi rend="italic normalweight baseline" style="font-size:12pt">’ and te ‘</hi><hi rend="italic normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑌ</hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">.’ </hi></p><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Image by Jon Corbett.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">In the construction of AC Mono, I used the typefaces of Everson Mono and Consolas only as sizing templates, building my resulting font with the stroke weight of Consolas and the mildly rounded stroke end of Everson Mono. Of particular note, syllabics have no differing case structures. Therefore, no glyphs need to accommodate space for descenders that extend below the baseline. The removal of the descender area results in a noticeably reduced distance between the glyph baseline and the edge of the glyph-space in the AC Mono font compared to ASCII/English fonts (Figure 2), allowing for a more consistent line height, providing better options for vertical spacing between rows when coding. </hi></p><figure><graphic n="1002" width="14.816666666666666cm" height="3.732986111111111cm" url="media/image17.png" rend="inline"><desc>Font design comparison between Everson Mono, Consolas, and AC Mono, the English glyphs selected here are chosen for their visual similarity to the Nehiyawewin syllabics, they are not representative of English pronunciations or linguistic function.</desc></graphic></figure><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Figure 2. Font design comparison between Everson Mono, Consolas, and AC Mono, the English glyphs selected in Consolas. Chosen for their visual similarity to the Nehiyawewin syllabics, they are neither representative of English pronunciations nor linguistic function.</hi></p></div><div><head>Software: acahkasinahikana punctuation and numeracy</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">A more significant challenge is how to support specific programming tasks using limited punctuation and, preferably, an alternative numeric symbology. Programming nomenclature and notation have had a unique evolution and, as Arawjo notes, have developed “in concert and conflict with discretizing infrastructure[s]” (Arawjo 2020). Without getting into a long history lesson on programmatic notation, I have seen how my own programming practice evolved from coding in BASIC, using very little punctuation except the double quote and round brackets, to today, where I predominantly use C# and Java that, use nearly every non-numeric and non-alpha character on the standard keyboard. In today’s programming culture, it is rare to see a programming language not use every symbol and character on the keyboard. Notation marks that currently have meaning and function in many modern programming languages can be problematic when developing solutions for Indigenous orthographies that traditionally do not use these marks. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">As I mentioned earlier, the only punctuation commonly found in Nehiyawewin text is the full stop syllabic that looks like a lowercase </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">x </hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> but is U+166E or </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">᙮</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">; and the hyphen </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">- </hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> most often used to separate certain morphemes or break up very long sentence-word constructions when reading. My understanding of this lack of punctuation stems from my understanding of </hi><anchor xml:id="bookmark=id.3as4poj"/><anchor xml:id="bookmark=id.1pxezwc"/><hi rend="normalweight baseline" style="font-size:12pt">Nehiyawewin morpheme structures that provide the necessary context and grammatical positioning in its word construction, making punctuation usage unnecessary, except to indicate the end of thought or discussion (H Christoph Wolfart 1973; Okimasis and Wolvengrey 2008).</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Another point of consideration between western culture and Nehiyaw culture is numeracy. Much of the world uses the ten symbols of the Hindu-Arabic decimal number system to represent numbers. Though Nehiyaw numeracy has become pretty much forgotten in favour of Hindu-Arabic numerals, Nehiyaw culture did develop a way to represent numbers using the syllabic glyphs (Figure 4). Furthermore, from a language perspective, Nehiyaw culture has developed certain relationships to numbers and numeric meanings that are often associated with Nehiyaw ontologies, as exemplified previously in my explanation of the meaning of Nehiyaw as the four-bodied people. </hi></p><p style="text-align: left;"><hi rend="italic bold baseline" style="font-size:12pt">Punctuation Symbols:</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> A simple but effective example of a </hi><hi rend="italic normalweight baseline" style="font-size:12pt">traditional</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> programming style that would execute a print-to-screen command might look like this (Figure 3):</hi><graphic n="1003" width="16.5862cm" height="1.7890305555555555cm" url="media/image12.png" rend="block"/><graphic n="1004" width="16.5862cm" height="1.7890305555555555cm" url="media/image7.png" rend="block"/></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">In this example, the parentheses mark the start and end of the function contents, and the double quotes mark the entry and exit points of the text to render to the screen. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">So how would a programmer make this indication if there are no brackets or quotation marks? Another common symbol in modern programming languages is the semi-colon </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">; </hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> as an instruction separator or terminator. Again, how does a programmer indicate where to terminate an instruction without this mark? These orthographic punctuation devices have become so commonplace in modern programming that it is difficult to envision not having access to them. It is precisely these kinds of practices that I have attempted to overcome in developing Ancestral Code. My intent here is not a need to use minimal punctuation. Instead, it is a resistance to adopting marks and practices that belong to other languages. To that end, one of the first steps I took was to inventory the Nehiyaw syllabary and functional language glyphs. I then established a list of necessary programmatic functions and decided on the syllabic symbols for my programming language.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">To start this investigation, I started with the most straightforward programming language I know—BASIC. I used a variety of dialects of BASIC for nearly fifteen years, and upon reflection, it was one of the languages that I could use with the least amount of punctuation. BASIC also provides a good starting point for just ‘reading’ code as if it were a recipe or short story. It also helped me identify the bare necessities I felt Ancestral Code required. In the end, I came to the following general determinations to make language development easier. These initial determinations were primarily based on my Indigenous Computing Design’s resistance to western computing reliance on non-alpha characters:</hi></p><list rend="bulleted"><item><hi style="font-size:12pt" xml:space="preserve">The Unified Canadian Aboriginal Syllabics block of the Unicode Standard currently contains 640 symbols. However, my dialect of Plains Cree only uses 107 syllabics from a total block of 134 glyphs that </hi><hi rend="italic" style="font-size:12pt">could</hi><hi style="font-size:12pt" xml:space="preserve"> be used in Nehiyaw speech. So the remaining 533 symbols from the syllabary became potential candidates to fulfill those programmatic roles where western punctuation is usually employed.</hi></item><item><hi style="font-size:12pt" xml:space="preserve">Ancestral Code will be line-driven. In other words, the linefeed/carriage return is the primary instruction terminator. Using the linefeed, makes parsing of instructions easier. </hi></item><item><hi style="font-size:12pt" xml:space="preserve">The full stop symbol ‹ </hi><hi style="font-family:Gadugi;font-size:12pt">᙮</hi><hi style="font-size:12pt" xml:space="preserve"> › is used to terminate </hi><hi rend="bold" style="font-size:12pt">and</hi><hi style="font-size:12pt" xml:space="preserve"> exit code (especially within a loop). Being the only punctuation mark, its function and use needed to make sense in the narrative flow of the source code. </hi></item><item><hi style="font-size:12pt" xml:space="preserve">Language-based reserved words are used to mark code start and end positions instead of braces or other symbols. For example, in Visual Basic ‘IF’ and ‘END IF’ mark the start and endpoints of a conditional code block; similarly, </hi><hi rend="italic" style="font-size:12pt">sipiy</hi><hi style="font-size:12pt" xml:space="preserve"> and </hi><hi rend="italic" style="font-size:12pt">âniskôsîpiy</hi><hi style="font-size:12pt" xml:space="preserve"> perform the same roles in Ancestral Code.</hi></item><item><hi style="font-size:12pt">In Ancestral Code, Nehiyawewin syllabic-numerals replace Hindu-Arabic numbers. Hindu-Arabic numerals will be allowed, but only in SRO mode, and a built-in calculator will convert Hindu-Arabic numbers to their appropriate syllabic representations when in syllabic mode.</hi></item></list><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">With this software side of the orthography resolved, I looked at the next obstacle: how should the user input code?</hi></p><table rend="rules"><row><cell style="text-align: center;">1 - 10</cell><cell style="text-align: center;">l</cell><cell style="text-align: center;">ll</cell><cell style="text-align: center;">ᐅ</cell><cell style="text-align: center;">lᐅ</cell><cell style="text-align: center;">llᐅ</cell><cell style="text-align: center;">ᐅᐊ</cell><cell style="text-align: center;">ᐊ</cell><cell style="text-align: center;">ᐊl</cell><cell style="text-align: center;">ᐊll</cell><cell style="text-align: center;">ᒥ</cell></row><row><cell style="text-align: center;">11 - 20</cell><cell style="text-align: center;">ᒥl</cell><cell style="text-align: center;">ᒥll</cell><cell style="text-align: center;">ᒥᐅ</cell><cell style="text-align: center;">ᒥlᐅ</cell><cell style="text-align: center;">ᒥllᐅ</cell><cell style="text-align: center;">ᒥᐅᐊ</cell><cell style="text-align: center;">ᒥᐊ</cell><cell style="text-align: center;">ᒥᐊl</cell><cell style="text-align: center;">ᒥᐊll</cell><cell style="text-align: center;">ᓀ</cell></row><row><cell style="text-align: center;">21 - 30</cell><cell style="text-align: center;">ᓀl</cell><cell style="text-align: center;">ᓀll</cell><cell style="text-align: center;">ᓀᐅ</cell><cell style="text-align: center;">ᓀlᐅ</cell><cell style="text-align: center;">ᓀllᐅ</cell><cell style="text-align: center;">ᓀᐅᐊ</cell><cell style="text-align: center;">ᓀᐊ</cell><cell style="text-align: center;">ᓀᐊl</cell><cell style="text-align: center;">ᓀᐊll</cell><cell style="text-align: center;">ᓂ</cell></row><row><cell style="text-align: center;">31 - 40</cell><cell style="text-align: center;">ᓂl</cell><cell style="text-align: center;">ᓂll</cell><cell style="text-align: center;">ᓂᐅ</cell><cell style="text-align: center;">ᓂlᐅ</cell><cell style="text-align: center;">ᓂllᐅ</cell><cell style="text-align: center;">ᓂᐅᐊ</cell><cell style="text-align: center;">ᓂᐊ</cell><cell style="text-align: center;">ᓂᐊl</cell><cell style="text-align: center;">ᓂᐊll</cell><cell style="text-align: center;">ᓄ</cell></row><row><cell style="text-align: center;">41 - 50</cell><cell style="text-align: center;">ᓄl</cell><cell style="text-align: center;">ᓄll</cell><cell style="text-align: center;">ᓄᐅ</cell><cell style="text-align: center;">ᓄlᐅ</cell><cell style="text-align: center;">ᓄllᐅ</cell><cell style="text-align: center;">ᓄᐅᐊ</cell><cell style="text-align: center;">ᓄᐊ</cell><cell style="text-align: center;">ᓄᐊl</cell><cell style="text-align: center;">ᓄᐊll</cell><cell style="text-align: center;">ᓇ</cell></row><row><cell style="text-align: center;">51 - 60</cell><cell style="text-align: center;">ᓇl</cell><cell style="text-align: center;">ᓇll</cell><cell style="text-align: center;">ᓇᐅ</cell><cell style="text-align: center;">ᓇlᐅ</cell><cell style="text-align: center;">ᓇllᐅ</cell><cell style="text-align: center;">ᓇᐅᐊ</cell><cell style="text-align: center;">ᓇᐊ</cell><cell style="text-align: center;">ᓇᐊl</cell><cell style="text-align: center;">ᓇᐊll</cell><cell style="text-align: center;">ᑯ</cell></row><row><cell style="text-align: center;">61 - 70</cell><cell style="text-align: center;">ᑯl</cell><cell style="text-align: center;">ᑯll</cell><cell style="text-align: center;">ᑯᐅ</cell><cell style="text-align: center;">ᑯlᐅ</cell><cell style="text-align: center;">ᑯllᐅ</cell><cell style="text-align: center;">ᑯᐅᐊ</cell><cell style="text-align: center;">ᑯᐊ</cell><cell style="text-align: center;">ᑯᐊl</cell><cell style="text-align: center;">ᑯᐊll</cell><cell style="text-align: center;">ᑲ</cell></row><row><cell style="text-align: center;">71 - 80</cell><cell style="text-align: center;">ᑲl</cell><cell style="text-align: center;">ᑲll</cell><cell style="text-align: center;">ᑲᐅ</cell><cell style="text-align: center;">ᑲlᐅ</cell><cell style="text-align: center;">ᑲllᐅ</cell><cell style="text-align: center;">ᑲᐅᐊ</cell><cell style="text-align: center;">ᑲᐊ</cell><cell style="text-align: center;">ᑲᐊl</cell><cell style="text-align: center;">ᑲᐊll</cell><cell style="text-align: center;">ᑫ</cell></row><row><cell style="text-align: center;">81 - 90</cell><cell style="text-align: center;">ᑫl</cell><cell style="text-align: center;">ᑫll</cell><cell style="text-align: center;">ᑫᐅ</cell><cell style="text-align: center;">ᑫlᐅ</cell><cell style="text-align: center;">ᑫllᐅ</cell><cell style="text-align: center;">ᑫᐅᐊ</cell><cell style="text-align: center;">ᑫᐊ</cell><cell style="text-align: center;">ᑫᐊl</cell><cell style="text-align: center;">ᑫᐊll</cell><cell style="text-align: center;">ᑭ</cell></row><row><cell style="text-align: center;">91 - 100</cell><cell style="text-align: center;">ᑭl</cell><cell style="text-align: center;">ᑭll</cell><cell style="text-align: center;">ᑭᐅ</cell><cell style="text-align: center;">ᑭlᐅ</cell><cell style="text-align: center;">ᑭllᐅ</cell><cell style="text-align: center;">ᑭᐅᐊ</cell><cell style="text-align: center;">ᑭᐊ</cell><cell style="text-align: center;">ᑭᐊl</cell><cell style="text-align: center;">ᑭᐊll</cell><cell style="text-align: center;">lᒥᑕ</cell></row></table></div><div><head>Hardware: the acahkasinahikana keyboard<hi style="color:red; font-size: 14pt; font-weight:bold;" rend="ERROR">�</hi><note place="margin" type="conversion" resp="#teitodocx"><hi rend="docxError">unable to handle picture here, no embed or link</hi></note><graphic n="1006" width="16.457083333333333cm" height="0.7672916666666667cm" url="media/image18.png" rend="block"/></head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">The history of print cultures has led to privileging western “stories, voices, and values” (Risam 2018, 89), and modern coding cultures and computer language development have naturally adopted. Though Nehiyawewin can be typed on ‘standard’ keyboard layouts using a Romanized orthography, this seemingly innocuous accommodation is probably </hi><hi rend="bold baseline underline" style="font-size:12pt">the</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> number one contributor to the continued erosion of Indigenous culture and language in the digital age.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Initially designed for English typewriters in the mid-to-late 19th century, the International Standards Organization officially adopted the QWERTY keyboard layout in 1971, becoming “the de facto Standard layout for Communications and computer interface keyboards” (Noyes 1983) in 1972. Over the last 50 years, the ISO Standard has evolved as our communication technologies have, and ISO 9995-9:2016 now includes definitions for multilingual and multiscript keyboard layouts (International Standards Organization 2016). However, these standards still assume that most languages can be represented with a Latin alphabet. The ISO Standard clearly states that it “is intended to address all characters needed to write all contemporary languages using the Latin script, together with standardized Latin transliterations of some major languages using other scripts” (International Standards Organization 2016). This assumption that ‘all contemporary languages’ can be written using a Latin character set is the type of colonial coercion that continues to institute western ideologies as dominant.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Regarding computing, our experiences are configured and guided by technology design philosophies that do not always include a combined understanding of  “people, technology, society, and business” (Norman and Tognazzini 2015). By working with members of my community, my Ancestral Code project has allowed me to explore keyboard designs that can better represent Nehiyawewin and </hi><anchor xml:id="bookmark=id.147n2zr"/><anchor xml:id="bookmark=id.2p2csry"/><hi rend="normalweight baseline" style="font-size:12pt">Nehiyaw culture when entering syllabics into the computer. I aimed my design objectives at challenging assumed western standards by investigating the role of the keyboard as an input device</hi><hi style="font-size:12pt">, a</hi> <hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">nd how such devices can support Nehiyaw cultural pedagogy and improve the relationships between the user, their language (i.e., Nehiyawewin), and the computer. Though Nehiyaw syllabics are taught in several ways, one popular method is the arrangement of the Nehiyawewin syllabary into a star design, often referred to as a ‘Cree syllabic star chart’ (Figure 5). This design is used often in teaching syllabics and contains several culturally specific teachings. For example, as a student at University nuhelot’ine thaiyots’i nistameyimâkanak Blue Quills, my favourite syllabic ‘origin-stories’ were about the </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᒐ</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">  syllabic, described as being symbolic of the pipe used in Nehiyaw ceremony, </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᐱ</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is a medicine lodge (i.e., tipi), and </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᑕ</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> can be interpreted as the toe of a moccasin. Whether or not these story sources are the true inspirations for the initial syllabic creations, I recognize the importance the visual imagery of syllabics holds and how they are intricately tied to cultural representations and understandings. Furthermore, due to the reflected and rotational arrangement and orientation of Nehiyaw syllabics, these teachings cannot be represented using the modern four-row keyboards used for typing in western computing. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I feel that a keyboard or input device that uses this Nehiyaw star layout is culturally significant, meaningful to a Nehiyaw user, and therefore appropriate for capturing Nehiyawewin. Through my iterative design process for the Nehiyawewin keyboard, I critically evaluated everything from the keycaps to the printed circuit boards (“PCB”). During this process, I created five distinct designs to retain cultural associations, allow efficient syllabic entry, and have practical usability for typing everyday documents. I found the star design keyboard was best suited as the primary interface for coding with Nehiyawewin in the Ancestral Code programming environment. Similarly, testing these designs with Nehiyawewin language-learners, users found typing syllabics with a ‘star’ keyboard easier than QWERTY layouts because of the grouping of syllabic sounds in each of the four quadrants establishes a mental-map making locating syllabics by sound easier. For example, all the ‘i’ syllabics are located in the keyboard's top left and top vertical. This relationship between spoken language, computer language, and teachings of the syllabic orthography is meaningful </hi><hi style="font-size:12pt">a</hi><hi rend="normalweight baseline" style="font-size:12pt">nd is one that I feel is better supported by a device derived from Nehiyawewin pedagogy. Figure 6 illustrates one proposed layout for the physical Nehiyaw ‘Star Chart Keyboard’.</hi></p><table rend="rules"><row><cell style="text-align: left;"><figure><graphic n="1007" width="7.645383333333333cm" height="9.894075cm" url="media/image2.png" rend="inline"/></figure></cell><cell style="text-align: left;"><figure><graphic n="1008" width="8.486625cm" height="8.39558888888889cm" url="media/image5.png" rend="inline"/></figure></cell></row><row><cell style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Figure 5.   My own Nehiyawewin syllabic star chart.</hi></cell><cell style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Figure 6.  One of my proposed Nehiyawewin ‘Star Chart Keyboard’ designs.</hi></cell></row></table></div></div><div><head>Bringing Nehiyawewin characteristics to a programming language</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">With the formalities of the orthography addressed, I progressed to investigating how to engage with Nehiyawewin programmatically. I initially approached this project with a very naive and western mindset. I considered common modern computing ideas and abstractions that included </hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">variables, data types, loops, conditional branching, </hi><hi rend="normalweight baseline" style="font-size:12pt">and</hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve"> linear/sequential instructions (i.e., lines of code), </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">and embarked on a journey to convert their English versions to Nehiyawewin. Thinking that some of these concepts would easily convert from English to Nehiyawewin, </hi><hi style="font-size:12pt">I</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> quickly realized that this approach of language substitution in Nehiyawewin would not work. As I discovered on my first day as a Nehiyawewin student, Nehiyawewin technically does not have a word for ‘computer,’ let alone any of the programming concepts I was hoping to capture. Technological words in English like </hi><hi rend="italic normalweight baseline" style="font-size:12pt">programming</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">network</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">protocol</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> I found were, for the most part, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">non-translatable</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to Nehiyawewin, at least not a way I could use in developing a programming language. Today, finding appropriate Nehiyaw cultural meanings that can map to technological terminology remains the biggest challenge in developing the Ancestral Code project as a fully Nehiyawewin-privileged computing platform. Nevertheless, I took these challenges with language and formulated an approach that involved finding easily translatable concepts (if they existed)</hi><hi style="font-size:12pt">,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and borrowing from Nehiyaw language construction and word forms to create a unique coding paradigm.</hi></p><div><head>Translating Nehiyawewin</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">What is a computer? I asked the most knowledgeable person in my Nehiyaw class, the Elder. That conversation went something like this: </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Me: How do you say ‘computer’?</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Elder: Well, that depends. There really is no word for computer, but some people use ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt">masinatakan cikastepayicikanis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">.’ </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Me: What does it mean? </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Elder: </hi><hi rend="italic normalweight baseline" style="font-size:12pt">masinatakan</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> means to type or write, but actually comes from words that mean ‘using a tool to create or stamp a mark’ and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">cikastepayicikanis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is the word we use for TV, it comes from a word about ‘shadows’ so something like ‘making a shadow, or full of shadows, or a box of shadows.’ You can interpret these words together as ‘making marks in a box of shadows without a pen.’ </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Me: uh-huh… </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Ayhay.</hi> </p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I note that this was not an isolated occurrence. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">“Well, that depends. There really is no word for [insert word],”</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> was a very common response to almost anything ‘western’ in my classes and applied to most modern technologies like radios, televisions, and cell phones. Depending on whom you asked, there are as many ways to describe these modern contraptions as there are dialects of Nehiyawewin. However, I accept and now use </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mâmitoneyihcikanihkân</hi><note place="foot" xml:id="ftn4" n="5"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">mâmitoneyihcikanihkân – </hi><hi rend="normalweight baseline" style="font-size:12pt">one Nehiyaw word for computer, mean</hi><hi style="font-size:12pt">ing</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> artificial brain.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, suggested by Wayne Jackson, an esteemed Nehiyaw language expert and Nehiyawewin professor at University Blue Quills. As explained to me, this word is understood to mean ‘artificial thought/brain.’ I choose this definition over </hi><hi rend="italic normalweight baseline" style="font-size:12pt">masinatakan cikastepayicikanis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> because I feel it better conveys the essence of what a computer is. I find that </hi><hi rend="italic normalweight baseline" style="font-size:12pt">masinatakan cikastepayicikanis</hi><note place="foot" xml:id="ftn5" n="6"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">masinatakan cikastepayicikanis –</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> another Nehiyaw word for computer. Roughly, a book or writing in a box of shadows.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is more about describing the computer as a physical, non-animate object of utility than the more conceptual or abstract and humanized idea of what a computer is. After all, we as a species have a considerably long history of relating technologies to aspects of being human (Travers 1996, 57), and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mâmitoneyihcikanihkân</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> suits this tradition. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Finding suitable replacements for some of the more programming-specific lingo such as integer, float, string, array, variable, subroutine/function, do/while, for/next, and if/then proved to be highly problematic. These concepts either do not translate easily, can only be translated in a general sense, and/or require a broader context. And, in most cases, they cannot be translated without simplifying their meaning. Additionally, these concepts can only be translated by conversation and engagement with community members, fluent speakers, and Elders with the required experience and knowledge.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">My solution to this particular challenge was one of metaphoric application rather than translation. I credit Hawai’ian game developer and computer programmer Kari Noe for introducing me to this philosophical change. Noe was a member of a </hi><anchor xml:id="bookmark=id.1hmsyys"/><anchor xml:id="bookmark=id.41mghml"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Ōlelo Hawai’ian programming team engaged with translating C# into Hawai’ian (Muzyka 2018). She described the ‘if/then/else’ statement as an example where the ‘if/then/else’ statement does not make sense when translated from English to Hawai’ian. The programming team consulted with native     Hawai’ian speakers and community members to find meaningful terms that could be both culturally appropriate and programmatically practical. The result for ‘if/then/else’ becomes </hi><hi rend="italic normalweight baseline" style="font-size:12pt">muliwai</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, the Hawai’ian word for ‘river.’ The idea of rivers being able to branch from the main waterway and eventually rejoin the main river later provided a better conceptualization of a Hawai’ian context than the English ‘if/then/else’ statement. This culturally-aware solution in their language was not only inspirational but fundamentally altered how I was approaching the relationships between computing concepts and cultural relevance. Though I recognize that Hawai’ian peoples’ relationship with water is considerably different from those of the Indigenous peoples of the Americas, water is no less important. In Nehiyaw culture, water is a medicine, a provider of life, and is sacred. Therefore, I have come to use ‘river’ as a conditional branch command. In Nehiyawewin river is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">sîpiy</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, and with this root I can then branch an ‘if’ into </hi><hi rend="italic normalweight baseline" style="font-size:12pt">sîpîsis</hi><hi rend="normalweight baseline" style="font-size:12pt">, a ‘small river’ or ‘creek’ in English. Therefore, a code example might look like the following (Figure 7):</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">In SRO (Figure 8):</hi><graphic n="10011" width="16.51cm" height="5.513916666666667cm" url="media/image14.png" rend="block"/><graphic n="10012" width="16.51cm" height="5.513916666666667cm" url="media/image9.png" rend="block"/></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">The literal English translation of this code block would be (Figure 9):</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">In this example, the first ‘creek’ ends with ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt">mînisiwat</hi><hi rend="italic normalweight baseline" style="font-family:Gadugi;font-size:12pt">᙮</hi><hi rend="normalweight baseline" style="font-size:12pt">’</hi><note place="foot" xml:id="ftn6" n="7"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">mînisiwat – </hi><hi rend="normalweight baseline" style="font-size:12pt">a berry bag.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> where </hi><hi rend="normalweight baseline" style="font-size:14pt" xml:space="preserve">‹ </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">᙮</hi><hi rend="normalweight baseline" style="font-size:14pt">›</hi><hi rend="normalweight baseline" style="font-size:12pt">terminates and subsequently ends the ‘river-if’ statement. The second ‘creek’ ends with ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt">âniskôsîpiy</hi><hi rend="normalweight baseline" style="font-size:12pt">’</hi><note place="foot" xml:id="ftn7" n="8"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">âniskôsîpiy</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> – where a river converges.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> or ‘rejoin the river,’ and in this case, it would continue to the following statement in the ‘if’ code block. In this way, the ‘if’ statement is fluid. It can branch, terminate, or rejoin the original, reflecting a natural flow or progression.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Understanding computer functions in these cultural terms provides a more Indigenous method of relating to the machine. In addition, defining programmatic operations using culturally meaningful metaphoric terminology changes the process of keyword </hi><hi rend="italic normalweight baseline" style="font-size:12pt">translation</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to a process of </hi><hi rend="italic normalweight baseline" style="font-size:12pt">knowledge adaptation</hi><hi rend="normalweight baseline" style="font-size:12pt">, ensuring that a Nehiyaw programmer does not need to language-switch between Nehiyawewin and English to have the computer perform its tasks. Looking at a computer’s code from this metaphoric perspective can also be extended to the binary level of the machine, where a Nehiyaw worldview can reframe the binary understanding of 1 and 0 as animate and inanimate.</hi></p></div><div><head>Nehiyaw language construction</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">I felt that morphemes and free word order were characteristics of Nehiyawewin that offered strong potential for programmatic versatility though they did offer some unique challenges. </hi></p><div><head>Morphemes</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Nehiyawewin is intensely metaphoric and descriptive and is a polysynthetic language, meaning the language combines many morphemes, often resulting in lengthy sentence-word constructions (Shirt and Wellman 2022). A morpheme is a single linguistic unit of meaningful speech. For an English example, without focusing too much on etymology, the word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">code</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> from the Latin </hi><hi rend="italic normalweight baseline" style="font-size:12pt">codex</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> can add different suffixes to alter its meaning. One such ending is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">-ing</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to change it to </hi><hi rend="italic normalweight baseline" style="font-size:12pt">coding</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, representing an active verb. Another is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">-er</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to change it to </hi><hi rend="italic normalweight baseline" style="font-size:12pt">coder,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> which is a noun meaning </hi><hi rend="italic normalweight baseline" style="font-size:12pt">a person who codes</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, and both could be structured in a sentence as ‘the coder is coding.’ These suffixes are morphemes. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">A fun example that illustrates how Nehiyawewin morphemes are stringed together is the word for “hippopotamus.” Nehiyawewin does not have an actual word for hippopotamus because this animal is not native to the Americas, and therefore it is described in language using its most prominent features. In Nehiyawewin, as described by Nehiyaw Elder Solomon Ratt, a hippopotamus is called </hi><hi rend="italic normalweight baseline" style="font-size:12pt">kihci-kispakasakewi-mistipwâmi-mahkitôni-nîswâpitewi-atâmipeko-pimâtakâwi-kohkôs</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> or in English as </hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">great, thick-skinned, big-thighed, big-mouthed, two-toothed, underwater, swimming, pig </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">(Ogg 2019). </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Another interesting example is the Nehiyawewin translation for the English word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pony</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. In Nehiyawewin, the word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><note place="foot" xml:id="ftn8" n="9"><p style="text-align: left;"><hi rend="italic normalweight superscript" style="font-size:12pt">9</hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim, mistatim, acimosis, mistacimosis –</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> dog, puppy, horse, pony; respectively</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is the word for dog. When you prefix </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> with </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mist-</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> from the word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mistahi-</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, which means ‘[something] is great/large/big,’ the resulting word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mistatim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is formed, which can mean ‘big dog,’ but is more commonly used to mean ‘horse.’ Adding the diminutive suffix </hi><hi rend="italic normalweight baseline" style="font-size:12pt">–osis,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> meaning ‘[something] is small or little,’ to </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, the result is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">acimosis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> meaning ‘little dog’ or ‘puppy.’ We can go one step further and combine all three of these ideas to get </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mistacimosis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. The resulting understanding is a ‘small horse’ or ‘pony.’ Though one could argue it also means a ‘very big puppy,’ the context would clarify what the speaker is referring to. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">For Ancestral Code, I used these bound morphemes of </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mistahi-</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and -</hi><hi rend="italic normalweight baseline" style="font-size:12pt">osis</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> as ways to make variables increase or decrease in value (i.e., size), even though they may not be semantically or syntactically correct in Nehiyawewin speech. So, for example, using a numeric variable called </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt">, you can use the following statement (Figure 10):</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">This is equivalent to the more traditional coding representation of (Figure 11):</hi><graphic n="10015" width="16.51cm" height="1.0283472222222223cm" url="media/image1.png" rend="block"/><hi style="color:red; font-size: 14pt; font-weight:bold;" rend="ERROR">�</hi><note place="margin" type="conversion" resp="#teitodocx"><hi rend="docxError">unable to handle picture here, no embed or link</hi></note><graphic n="10017" width="0.0017638888888888888cm" height="0.035277777777777776cm" url="media/image19.png" rend="block"/></p><figure><graphic n="10018" width="16.51cm" height="1.0283472222222223cm" url="media/image3.png" rend="block"/><hi style="color:red; font-size: 14pt; font-weight:bold;" rend="ERROR">�</hi><note place="margin" type="conversion" resp="#teitodocx"><hi rend="docxError">unable to handle picture here, no embed or link</hi></note><graphic n="10020" width="0.0017638888888888888cm" height="0.035277777777777776cm" url="media/image11.png" rend="block"/></figure><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">This usage carries the meaning of ‘increase the size of ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">the dog’ </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">and reduce the size of </hi><hi rend="italic normalweight baseline" style="font-size:12pt">the dog</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">’ or ‘make </hi><hi rend="italic normalweight baseline" style="font-size:12pt">the dog</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> bigger then smaller.’ In this example, the variable </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> has </hi><hi rend="italic normalweight baseline" style="font-size:12pt">some value</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> manipulated through a single morpheme-constructed token instead of a more </hi><hi rend="italic normalweight baseline" style="font-size:12pt">common calculation assignment</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> in other programming languages delimited by spaces to separate each programmatic token. Not to mention the problem with translating the syntax of </hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">atim = atim + 1 </hi><hi rend="normalweight baseline" style="font-size:12pt">as an assignment command and not a logical statement into Nehiyawewin.</hi></p></div><div><head>Free Word Order</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Free word order means words in a sentence do not necessarily need to be in a rigid sequence. This ordering is especially apparent in something like ‘the cat sees the dog’; whereas, in English, you cannot swap ‘the cat’ and ‘the dog’ without changing its meaning, as in ‘the dog sees the cat.’ However, this is not the case in Nehiyawewin, where ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt">minôs wâpamew atimwa</hi><hi rend="normalweight baseline" style="font-size:12pt">’</hi><note place="foot" xml:id="ftn9" n="10"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">minôs wâpamew atimwa – </hi><hi rend="normalweight baseline" style="font-size:12pt">the cate sees the dog.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and ‘</hi><hi rend="italic normalweight baseline" style="font-size:12pt">atimwa wâpamew minôs</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">’ mean the same thing. This language use is because there is a 3rd person obviative </hi><hi rend="italic normalweight baseline" style="font-size:12pt">-wa</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> attached to </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, indicating the dog </hi><hi rend="italic normalweight baseline" style="font-size:12pt">atim</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is the object being acted on regardless of where it appears in the sentence in relation to the cat. To say this sentence in English requires modifying the verb to clarify who or what is seeing and identifying who or what is being seen. This sentence is a simplistic example, but as the coding environment for Ancestral Code was designed to be written as a narrative, having this flexibility is something I wanted to be able to use because it is non-linear and changes our perceptions of coding in line-by-line formats. A simple coding example would be the completion command for </hi><hi rend="italic normalweight baseline" style="font-size:12pt">sîpiy, sîpiy kîsipayiw</hi><note place="foot" xml:id="ftn10" n="11"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">sîpiy, sîpiy kîsipayiw – </hi><hi rend="normalweight baseline" style="font-size:12pt">river, and the river ends</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. In this case, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">sîpiy kîsipayiw</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">kîsipayiw sîpiy</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> mean the same thing. Although, as a coder, I can use ‘end river’ or ‘river ends,’ it does not matter the order of the tokens as they are not fixed. A more expanded example uses this same idea but applies to whole lines or activities, as in a looping construction where a character such as Wîsahkecâhk might walk, hop, and talk (Figure 12):</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:11pt">In SRO (with the English equivalent) (Figure 13),</hi><graphic n="10023" width="16.51cm" height="6.57225cm" url="media/image25.png" rend="block"/><graphic n="10024" width="16.51cm" height="6.57225cm" url="media/image20.png" rend="block"/></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">When this block of code runs, the lines that follow </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> are ‘randomized’ as it is not essential which order those actions execute, as long as the </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Wîsahkecâhk</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> object variable performs all three actions in this block. By comparison, an equivalent representation of this code in C# might look like this (Figure 14):</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">The Ancestral Code keyword for a “do loop” is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><note place="foot" xml:id="ftn11" n="12"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">pipon </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">– winter </hi></p></note><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">, </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">which translates as ‘a winter.’ In the next section, I will elaborate on the meaning and cultural significance of the reserved word </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. But, for this example, if I wanted to perform these actions in sequence and not a random order, I would not bother using the </hi><hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">pipon </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">loop. You may also notice that the lines that direct the </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Wîsahkecâhk</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> variable to do an action (see Figure 11) are in free word order in the Ancestral Code example (as in </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Wîsahkecâhk walks</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">hop Wîsahkecâhk</hi><hi rend="normalweight baseline" style="font-size:12pt">). Unlike many programming languages that must start with a command or keyword followed by variables or parameters, this is not necessary for Ancestral Code, as long as the variable and command are on the same executing line. The programming parser, the part of the programming environment responsible for separating lines of code into smaller elements and individual instructions, will still be able to discern the token from the data, regardless of the position of each in the line. In the next section, I will detail the reasons behind this built-in randomization. Still, in terms of programming language construction, using features of morphemic commands and free word order, are a means to describe the relationships between the programmatic structures of Ancestral Code and Nehiyaw culture.</hi><graphic n="10025" width="16.51cm" height="6.57225cm" url="media/image15.png" rend="block"/><graphic n="10026" width="16.51cm" height="6.57225cm" url="media/image10.png" rend="block"/></p></div></div></div><div><head>Culture and language == code &amp;&amp; code == culture and language</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Language plays a significant role in the enterprise of computer programming, and these activities are still heavily informed by western culture. Consequently, it is challenging to envision programming as anything but a socio-technical subculture populated with hordes of </hi><anchor xml:id="bookmark=id.3fwokq0"/><anchor xml:id="bookmark=id.1v1yuxt"/><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Benjamin Nugent’s </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Lewis Skolnick-esque</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> Type-1 ‘nerds’ (Nugent 2008, 5).</hi><note place="foot" xml:id="ftn12" n="13"><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> Lewis Skolnick, portrayed by Robert Carradine, is one of the primary characters from the 1984 film </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Revenge of the Nerds</hi><hi rend="normalweight baseline" style="font-size:12pt">.</hi></p></note> <hi rend="normalweight baseline" style="font-size:12pt">This stereotyped and generalized view of programmers and programming was the last challenge I aimed to ‘reformulate,’ to introduce Indigenous cultural practices as digital metaphorical structures that view programming from Indigenous epistemological and ontological concerns that alter how programming is perceived in its current western context. For example, I admire how Ramsey Nasser describes the algorithms depicted in the Arabic calligraphic forms of his</hi><hi rend="normalweight baseline" style="font-size:12ptdirection:rtl;">قلب</hi><hi rend="normalweight baseline" style="font-size:12pt">programming language “as high poetry” (Nasser 2012). I also found that describing western computing ideas in Nehiyawewin often resulted in algorithmically poetic word creations, as evidenced with the concept of ‘river’ to represent ‘if/then’ logic. I expand on this analogy-based token use for representing programmatic instructions by applying the same metaphoric treatment to culturally specific understandings as a way of genuinely viewing computer programming as a non-western endeavour. Through this reimagining of computing terms, I highlight how computing concepts already reflect Indigenous cultural teachings, practices, especially ceremony, as I demonstrate in the following specific examples of</hi> <hi rend="italic normalweight baseline" style="font-size:12pt">miyâhkasike</hi><note place="foot" xml:id="ftn13" n="14"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">Miyâhkasike –</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to smudge with sweetgrass or sage.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipona</hi><note place="foot" xml:id="ftn14" n="15"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">pipona – </hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">winters (plural of </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><hi rend="normalweight baseline" style="font-size:12pt">).</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">waniyaw</hi><note place="foot" xml:id="ftn15" n="16"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">waniyaw –</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> random, or randomly.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt">.</hi></p><p rend="heading 4 heading 4">miyâhkasike and tisamân</p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">One of the most common and essential cultural practices in Nehiyaw culture is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">the smudge</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. A </hi><hi rend="italic normalweight baseline" style="font-size:12pt">smudge</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is a small, personal ceremonial practice where the burning of an Indigenous medicinal herb such as sweetgrass or sage is used to ‘cleanse’ and ‘purify’ the individual. When smudging, people pass their hands or objects to be ‘blessed’ through the rising smoke trails. In a normal smudge, you use your hands to draw the smoke towards you – blessing your head, ears, eyes, mouth, heart, and body with the smoke. And then, you ‘bless’ anything else you wish to be cleared of negative energies, such as food, tobacco, eyeglasses, or even your laptop. Essentially, smudging is responsible for blessing anything that can affect any of your four spirits. I have even heard stories from several Nehiyaw and Métis Elders that have physically smudged their laptop to purify it before ‘Googling.’ In the context of ceremony, this idea of ‘cleansing’ is something that computers do regularly. Whether it is emptying the ‘trash bin,’ clearing memory, resetting the graphics display, or deleting a browser’s cache, the intent of all these activities is to remove items that can negatively affect the system’s operation. Therefore, the first command in an Ancestral Code program is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">miyâhkasike</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> which is ‘to smudge with sage/sweetgrass,’ or </hi><hi rend="italic normalweight baseline" style="font-size:12pt">tisamân</hi><note place="foot" xml:id="ftn16" n="17"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">tisamân –</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to smudge (in general).</hi></p></note><hi rend="italic normalweight baseline" style="font-size:12pt">,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> which is ‘to smudge (in general),’ both serve the same purpose of preparing the system. The choice of which smudge command to use is up to the programmer. However, I personally feel that a program that relates a sacred story or contains culturally specific or significant knowledge in the code would start with </hi><hi rend="italic normalweight baseline" style="font-size:12pt">miyâhkasike</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">, being more purposeful than the more generic </hi><hi rend="italic normalweight baseline" style="font-size:12pt">tisamân</hi><hi rend="normalweight baseline" style="font-size:12pt">. These ‘smudging’ operations include, but are not limited to, clearing any current output on the screen, clearing and readying the program’s libraries and variables, and clearing any cache from a previous execution.</hi></p><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Miyâhkasike</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> is an essential piece of code because not only does it have a very real programmatic purpose, but to have the system digitally mirror a user’s physical ceremonial practice transcends the system. It also symbolically provides the computer a ‘spirit’ that the user can relate to as more of a living being instead of seeing the computer as a subordinate spiritless instrument. From an Indigenous perspective, this kind of human-machine connection is one of collaboration and kinship, and has been explored by several Indigenous scholars and artists (Noori 2011; L’Hirondelle 2014; Lewis et al. 2018).</hi></p><p rend="heading 4 heading 4">Pipon</p><p style="text-align: left;"><hi rend="italic normalweight baseline" style="font-size:12pt">Pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> literally means ‘winter.’ It, and its plural form </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipona,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> along with the lexically related words </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipohki</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (next winter), </hi><hi rend="italic normalweight baseline" style="font-size:12pt">awasipipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (last winter), and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mesakwanipipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (every winter)</hi><note place="foot" xml:id="ftn17" n="18"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt">pipohki, awasipipon, mesakwanipipon –</hi><hi rend="normalweight baseline" style="font-size:12pt">next winter, last winter, every winter; respectively.</hi></p></note><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> are used in Ancestral Code as ‘for loops.’ </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> describes the single execution of a group of lines, and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipohki, awasipipon,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> and </hi><hi rend="italic normalweight baseline" style="font-size:12pt">mesakwanipipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> are sub-functions that can only occur inside a repeating </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipona</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> loop.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">You may ask why use </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> as a metaphor for the programmatic ‘loop’? Could you not use </hi><hi rend="italic normalweight baseline" style="font-size:12pt">nîpin</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (summer)</hi><hi style="font-size:12pt" xml:space="preserve"> since</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> it also occurs annually</hi><hi style="font-size:12pt">?</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> What makes </hi><hi rend="italic normalweight baseline" style="font-size:12pt">pipon</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> important is its significance to aging and identity in Nehiyaw culture. For example, in Nehiyawewin, I say, ‘I am currently 49 winters old.’ As heard from respected Nehiyaw culture and language instructor Reuben Quinn, we use ‘winter’ and not another season because back in the days before ‘comfortable housing’ in the northern climes of what is now Canada, surviving winter signified your resilience and survival of the most extreme elements </hi><hi style="font-size:12pt">of</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> Earth Mother (Quinn 2021). Surviving winter is a valued and personal accomplishment. The symbolism in ‘winter’ as a programming keyword lies in its representation as a repeatable cycle and in its relationships to aging and resilience that naturally imply increased experience and knowledge. So, similar to when a western-formatted computer program loops through a series of instructions, it often builds upon previously executed statements—the loop ‘ages’ as it progresses and continues until the loop conditions are met or terminate.</hi></p><p rend="heading 4 heading 4">Waniyaw</p><p><hi rend="italic" style="font-size:12pt">Waniyaw</hi><hi style="font-size:12pt" xml:space="preserve"> is a word that can be used for meaning ‘at random.’ In Ancestral Code, it is a way to simulate the dynamic and unpredictable forces of the natural world. Randomization is fundamental to Ancestral Code because of the generative nature of the outputs it creates. From a cultural perspective, I want the visual outputs to have aspects that are arbitrary and not controllable by the programmer. This environment of chance reflects the aspects of nature we cannot control. Therefore, giving the system some autonomy and decision-making is one way to prevent the programmer from always having complete control. In Nehiyaw culture, it is necessary to allow nature to run its course or recognize that there are elements in our world beyond the individual’s control.</hi></p><p rend="heading 4 heading 4">Randomization</p><p><hi style="font-size:12pt" xml:space="preserve">In addition to the reserved keyword </hi><hi rend="italic" style="font-size:12pt">waniyaw</hi><hi style="font-size:12pt" xml:space="preserve">, the words </hi><hi rend="italic" style="font-size:12pt">pipon, mihcecis, mihcet, mihcetinwa</hi><note place="foot" xml:id="ftn18" n="19"><p style="text-align: left;"> <hi rend="italic normalweight baseline" style="font-size:12pt" xml:space="preserve">mihcecis, mihcet, mihcetinwa – </hi><hi rend="normalweight baseline" style="font-size:12pt">a few, many, a lot; respectively.</hi></p></note><hi rend="italic" style="font-size:12pt">,</hi><hi style="font-size:12pt" xml:space="preserve"> and the bound morpheme </hi><hi rend="italic" style="font-size:12pt">misi-</hi><hi style="font-size:12pt" xml:space="preserve"> incorporate randomization events in one form or another. </hi></p><list rend="numbered"><item><hi rend="italic" style="font-size:12pt">pipon</hi><hi style="font-size:12pt" xml:space="preserve"> – is the instruction for ‘do once’ or literally ‘for one winter,’ and all lines of code that proceed it are executed in random order until the ‹ </hi><hi style="font-family:Gadugi;font-size:12pt">᙮</hi><hi style="font-size:12pt" xml:space="preserve"> › full stop is encountered. </hi> </item><item><hi rend="italic" style="font-size:12pt">mihcecis</hi><hi style="font-size:12pt" xml:space="preserve"> – means ‘small many’ and is used to produce a random number between 100 and 1,000.</hi></item><item><hi rend="italic" style="font-size:12pt">mihcet</hi><hi style="font-size:12pt" xml:space="preserve"> – means ‘many’ and is used to produce a random number between 1,000 and 100,000.</hi></item><item><hi rend="italic" style="font-size:12pt">mihcetinwa</hi><hi style="font-size:12pt" xml:space="preserve"> – means ‘numerous’ and is used to produce a random number between 100,000 and 1 million.</hi></item><item><hi rend="italic" style="font-size:12pt">waniyaw</hi><hi style="font-size:12pt" xml:space="preserve"> – is used in the context of the entire program or within a </hi><hi rend="italic" style="font-size:12pt">pipona</hi><hi style="font-size:12pt" xml:space="preserve"> loop block. So, for example, if the programmer wants a statement or series of statements to execute randomly, they would write it like this (Figure 15):</hi></item><item><graphic n="10027" width="16.51cm" height="1.27cm" url="media/image4.png" rend="block"/><hi style="color:red; font-size: 14pt; font-weight:bold;" rend="ERROR">�</hi><note place="margin" type="conversion" resp="#teitodocx"><hi rend="docxError">unable to handle picture here, no embed or link</hi></note><graphic n="10029" width="0.0017638888888888888cm" height="0.035277777777777776cm" url="media/image8.png" rend="block"/></item><item><hi style="font-size:12pt">Ancestral Code interprets this instruction as ‘have</hi><hi rend="italic" style="font-size:12pt" xml:space="preserve"> Wîsahkecâhk</hi><hi style="font-size:12pt" xml:space="preserve"> walk at a random interval.’ If this instruction is in the main body of the code, it will execute for random intervals from that point forward. If this instruction is inside a </hi><hi rend="italic" style="font-size:12pt">pipona</hi><hi style="font-size:12pt" xml:space="preserve"> block, it executes randomly only for as long as that loop is active and ends when the loop ends. In this use, the computer takes on the responsibility of ‘nature,’ and each time the program is executed, the randomness introduced with </hi><hi rend="italic" style="font-size:12pt">waniyaw</hi><hi style="font-size:12pt" xml:space="preserve"> in the code guarantees the output will always be unique. This uniqueness is similar to how a story is never quite the same when repeated, even by the same storyteller.</hi></item></list></div></div><div><head>Conclusion</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">When it comes to coding in any of the thousands of computer programming languages available, a programmer is obliged to subscribe to and accept the social, technological, and cultural attitudes that created that language. Ancestral Code, is no exception, in that it is formulated to be more accessible to Nehiyaw users. However, in contrast to other (i.e., more common/traditional) computing languages, Ancestral Code is built on specific Nehiyaw cultural principles and not necessarily the lineal or logical requirements defined by the system. This difference means that Ancestral Code’s model and programming paradigm can alter computing philosophies and create new opportunities and avenues for Indigenous computer programming pedagogy.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">“Survivance,” as defined by distinguished Indigenous cultural theorist Gerald Vizenor, is “an active sense of presence, the continuance of native stories, not a mere reaction, or a survivable name. Native survivance stories are renunciations of dominance, tragedy and victimry” (Vizenor 2008, 1). As a project, my intention in creating Ancestral Code was to make a system capable of collaborating with Indigenous knowledges to create a uniquely Indigenous experience within a digital space born from western computational sciences. Through a wholistic and Indigenous approach to computer programming, I have revealed that there can be a deep connection in the human-computer relationship paradigm</hi><hi style="font-size:12pt">,</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> one that can advance programming practices to be more culturally informed while remaining relevant and critical to the survivance of Indigenous language and culture.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Using theoretical wholistic Indigenous design frameworks and culturally-determined computer programming language like the ones I described in this article, I am encouraging deeper critical discussions on the socio-technical philosophies of computer programming. Ancestral Code can be used as a template that seeks to harmonize cultural epistemologies and ontologies with computing by redefining computing philosophies through a cultural lens. It is a project meant to take a user on a voyage through Nehiyaw knowledges that have developed over millennia and have those knowledges define the relationships and models of modern computing. This journey then changes the relationship from one of </hi><anchor xml:id="bookmark=id.19c6y18"/><anchor xml:id="bookmark=id.2u6wntf"/><hi rend="italic normalweight baseline" style="font-size:12pt">human-and-computer</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> to one that is </hi><hi rend="italic normalweight baseline" style="font-size:12pt">culture-and-computer</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">. </hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">I feel this change in philosophy and approach to computer programming rewards both Indigenous and western computing cultures. From my perspective, a programmer’s identity is heavily imbued with western computing practices and personally meaningful relationships with software and the interaction with computing devices. This broadening and augmenting of software and hardware architectures are worthy of further investigation, especially for the potential benefits they can provide as a template for other Indigenous communities who wish to advocate and explore their cultural languages and teachings as programmatic interfaces.</hi></p><p><pb/></p><div><head>Glossary</head><table rend="rules"><row><cell style="text-align: left;">Standard Roman Orthography</cell><cell style="text-align: left;">IPA (Pronunciation)</cell><cell style="text-align: left;">Meaning</cell></row><row><cell style="text-align: left;">âcimow</cell><cell style="text-align: left;">ʌtʃɪmow</cell><cell style="text-align: left;">[s/he] narrates [her/his] own story </cell></row><row><cell style="text-align: left;">acimosis </cell><cell style="text-align: left;">ʌtʃɪmʊsɪs</cell><cell style="text-align: left;">small dog; puppy</cell></row><row><cell style="text-align: left;">âniskôsîpiy</cell><cell style="text-align: left;">aːnɪskoːsiːpij</cell><cell style="text-align: left;">following the river; rejoin the river</cell></row><row><cell style="text-align: left;">atim </cell><cell style="text-align: left;">ʌtɪm</cell><cell style="text-align: left;">a dog</cell></row><row><cell style="text-align: left;">atimwa wâpamew minôs</cell><cell style="text-align: left;">ʌtɪmwʌ waːpʌmew mɪnoːs</cell><cell style="text-align: left;">the dog + is seen by + the cat</cell></row><row><cell style="text-align: left;">awasipipon </cell><cell style="text-align: left;">ʌwʌsɪpɪpʊn</cell><cell style="text-align: left;">last winter</cell></row><row><cell style="text-align: left;">kîsipayiw</cell><cell style="text-align: left;">kiːsɪpʌyiw</cell><cell style="text-align: left;">[something] ends or terminates</cell></row><row><cell style="text-align: left;">mâmitoneyihcikanihkân</cell><cell style="text-align: left;">maːmɪtonejɪhtʃikanɪhkaːn</cell><cell style="text-align: left;">computer; artificial brain</cell></row><row><cell style="text-align: left;">masinatakan cikastepayicikanis </cell><cell style="text-align: left;">mʌsɪnʌtʌgʌn tʃɪkʌsteːpajɪtʃikʌnɪs</cell><cell style="text-align: left;">computer; box of shadows</cell></row><row><cell style="text-align: left;">mesakwanipipon </cell><cell style="text-align: left;">meːsʌkwʌnɪpɪpʊn</cell><cell style="text-align: left;">every winter or every year</cell></row><row><cell style="text-align: left;">mihcecis </cell><cell style="text-align: left;">mɪhtʃeːtʃɪs</cell><cell style="text-align: left;">several</cell></row><row><cell style="text-align: left;">mihcet </cell><cell style="text-align: left;">mɪhtʃeːt</cell><cell style="text-align: left;">many</cell></row><row><cell style="text-align: left;">mihcetinwa </cell><cell style="text-align: left;">mɪhtʃeːtɪnwʌ</cell><cell style="text-align: left;">a lot; numerous</cell></row><row><cell style="text-align: left;">mînisiwat</cell><cell style="text-align: left;">miːnɪsɪwʌt</cell><cell style="text-align: left;">a bag used for berry picking</cell></row><row><cell style="text-align: left;">minôs</cell><cell style="text-align: left;">mɪnoːs</cell><cell style="text-align: left;">a cat</cell></row><row><cell style="text-align: left;">mistacimosis</cell><cell style="text-align: left;">mɪstʌtʃɪmʊsɪs</cell><cell style="text-align: left;">a pony</cell></row><row><cell style="text-align: left;">mistahi  </cell><cell style="text-align: left;">mɪstʌhɪ</cell><cell style="text-align: left;">[something] is big or large</cell></row><row><cell style="text-align: left;">mistatim</cell><cell style="text-align: left;">mɪstʌtɪm</cell><cell style="text-align: left;">a horse; or a large dog</cell></row><row><cell style="text-align: left;">miyâhkasike </cell><cell style="text-align: left;">mijaːhkʌsɪgeː</cell><cell style="text-align: left;">[s/he] smudges with sweetgrass</cell></row><row><cell style="text-align: left;">nehiyaw</cell><cell style="text-align: left;">neːhɪyʌw</cell><cell style="text-align: left;">a Cree person; Cree culture</cell></row><row><cell style="text-align: left;">nehiyawewak</cell><cell style="text-align: left;">neːhɪyʌweːwʌk</cell><cell style="text-align: left;">Cree people (plural)</cell></row><row><cell style="text-align: left;">nehiyawewin</cell><cell style="text-align: left;">neːhɪyʌweːwɪn</cell><cell style="text-align: left;">Cree Language</cell></row><row><cell style="text-align: left;">nîpin </cell><cell style="text-align: left;">niːpɪn</cell><cell style="text-align: left;">summer time</cell></row><row><cell style="text-align: left;">nitâpân</cell><cell style="text-align: left;">nɪtaːbaːn</cell><cell style="text-align: left;">my great grandparent (grandmother)</cell></row><row><cell style="text-align: left;">nohkompân </cell><cell style="text-align: left;">nʊhkʊmbaːn</cell><cell style="text-align: left;">grandmother + passed on</cell></row><row><cell style="text-align: left;">pipohki </cell><cell style="text-align: left;">pɪpʊhkɪ</cell><cell style="text-align: left;">next winter</cell></row><row><cell style="text-align: left;">pipon </cell><cell style="text-align: left;">pɪpʊn</cell><cell style="text-align: left;">winter</cell></row><row><cell style="text-align: left;">pipona</cell><cell style="text-align: left;">pɪpʊnʌ</cell><cell style="text-align: left;">winters (plural)</cell></row><row><cell style="text-align: left;">sîpihkomipit</cell><cell style="text-align: left;">siːpɪhkʊmɪpɪt</cell><cell style="text-align: left;">bluetooth</cell></row><row><cell style="text-align: left;">sîpîsis </cell><cell style="text-align: left;">siːpiːsɪs</cell><cell style="text-align: left;">creek (small river)</cell></row><row><cell style="text-align: left;">sîpiy </cell><cell style="text-align: left;">siːpij</cell><cell style="text-align: left;">river</cell></row><row><cell style="text-align: left;">tisamân</cell><cell style="text-align: left;">tɪsʊmaːn</cell><cell style="text-align: left;">smudge</cell></row><row><cell style="text-align: left;">waniyaw</cell><cell style="text-align: left;">wʌnɪyʌw</cell><cell style="text-align: left;">at random; at a random time</cell></row><row><cell style="text-align: left;">wâpamew</cell><cell style="text-align: left;">waːpʊmew</cell><cell style="text-align: left;">[s/he] sees [her/him]</cell></row><row><cell style="text-align: left;">wîsahkecâhk</cell><cell style="text-align: left;">wiːsʌhkeːtʃaːhk</cell><cell style="text-align: left;">cultural teacher and legendary figure in Nehiyaw culture</cell></row></table></div><div><p style="text-align: left;"><pb/></p></div><div><head>References</head><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Abd-El-Barr, Mostafa. 2009. “Topological Network Design: A Survey.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Journal of Network and Computer Applications</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 32 (3): 501–9.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Abdelnour-Nocera, José, Torkil Clemmensen, and Masaaki Kurosu. 2013. “Reframing HCI Through Local and Indigenous Perspectives.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">International Journal of Human–Computer Interaction</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 29 (4): 201–4. https://doi.org/10.1080/10447318.2013.765759.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Absolon, Kathy. 2010. “Indigenous Wholistic Theory: A Knowledge Set for Practice.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">First Peoples Child &amp; Family Review</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 5 (2): 74–87. https://doi.org/10.7202/1068933ar.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Aikin, Jim. 2009. “The Inform 7 Handbook.” https://www.musicwords.net/if/I7Handbook8x11.pdf.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Ali, Mustafa. 2014. “Towards a Decolonial Computing.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Ambiguous Technologies: Philosophical Issues, Practical Solutions, Human Nature</hi><hi rend="normalweight baseline" style="font-size:12pt">, 28–35. Lisbon, Portugal: International Society of Ethics and Information Technology.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Arawjo, Ian. 2020. “To Write Code: The Cultural Fabrication of Programming Notation and Practice.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">CHI ’20: Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems</hi><hi rend="normalweight baseline" style="font-size:12pt">, 1–15. Honolulu, HI. https://doi.org/10.1145/3313831.3376731.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Ardley, Sean. 2014. “Why Are Monospaced Typefaces Used for Programming? (Answer (1 of 2)).” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Quora</hi><hi rend="normalweight baseline" style="font-size:12pt">. https://www.quora.com/Why-are-monospaced-typefaces-used-for-programming/answer/Sean-Ardley.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Babaoglu, Ozalp, Geoffrey Canright, Andreas Deutsch, Gianni A Di Caro, Frederick Ducatelle, Luca M Gambardella, Niloy Ganguly, Márk Jelasity, Roberto Montemanni, and Alberto Montresor. 2006. “Design Patterns from Biology for Distributed Computing.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">ACM Transactions on Autonomous and Adaptive Systems (TAAS)</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 1 (1): 26–66.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Benenson, Yaakov. 2012. “Biomolecular Computing Systems: Principles, Progress and Potential.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Nature Reviews Genetics</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 13 (7): 455–68.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Cormier, Paul, and Lana Ray. 2018. “A Tale of Two Drums: Kinoo’amaadawaad Megwaa Doodamawaad – ‘They Are Learning with Each Other While They Are Doing.’” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Indigenous Research: Theories, Practices, and Relationships</hi><hi rend="normalweight baseline" style="font-size:12pt">, edited by Deborah McGregor, Jean-Paul Restoule, and Rochelle Johnston, 112–25. Toronto, Canada: Canadian Scholars’ Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Dourish, Paul, and Scott D Mainwaring. 2012. “Ubicomp’s Colonial Impulse.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Proceedings of the 2012 ACM Conference on Ubiquitous Computing</hi><hi rend="normalweight baseline" style="font-size:12pt">, 133–42. Pittsburgh, PA: Association for Computing Machinery, New York, NY.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Garneau, David. 2018. “Electric Beads: On Indigenous Digital Formalism.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Visual Anthropology Review</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 34 (1): 77–86.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Gradual Civilization Act. 1857. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">An Act to Encourage the Gradual Civilization of the Indian Tribes in This Province, and to Amend the Laws Respecting Indians</hi><hi rend="normalweight baseline" style="font-size:12pt">.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Hasselström, Karl, and Jon Åslund. 2001. “The Shakespeare Programming Language.” 6/6/2018. http://shakespearelang.sourceforge.net/.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Heaven, Douglas. 2013. “One Minute with...Ramsey Nasser.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">New Scientist</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 217 (2909): 03–03.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">International Standards Organization. 2016. “ISO/IEC 9995-9:2016 - Information Technology — Keyboard Layouts for Text and Office Systems — Part 9: Multi-Lingual, Multiscript Keyboard Layouts.” ISO. 2016. https://www.iso.org/cms/render/live/en/sites/isoorg/contents/data/standard/05/43/54374.html.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Irani, Lilly C, and Paul Dourish. 2009. “Postcolonial Interculturality.” In , 249–52.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Irani, Lilly, Janet Vertesi, Paul Dourish, Kavita Philip, and Rebecca E Grinter. 2010. “Postcolonial Computing: A Lens on Design and Development.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">CHI ’10: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems</hi><hi rend="normalweight baseline" style="font-size:12pt">, 1311–20. Atlanta, GA, USA: Association for Computing Machinery.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">King, Kevin. 2022. “Typotheque: Syllabics Typographic Guidelines and Local Typographic Preferences by Kevin King.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Typotheque</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (blog). January 24, 2022. https://www.typotheque.com/articles/syllabics_typographic_guidelines.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Kleinrock, Leonard, and Farouk Kamoun. 1980. “Optimal Clustering Structures for Hierarchical Topological Design of Large Computer Networks.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Networks</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 10 (3): 221–48.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Lewis, Jason Edward, Noelani Arista, Archer Pechawis, and Suzanne Kite. 2018. “Making Kin with the Machines.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Journal of Design and Science</hi><hi rend="normalweight baseline" style="font-size:12pt">. https://doi.org/10.21428/bfafd97b.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">L’Hirondelle, Cheryl. 2014. “Codetalkers Recounting Signals of Survival.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Coded Territories: Tracing Indigenous Pathways in New Media Art</hi><hi rend="normalweight baseline" style="font-size:12pt">, edited by Steven Loft and Kerry Swanson, 147–68. Calgary, AB: University of Calgary Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Madden, Brooke, Marc Higgins, and Lisa Korteweg. 2013. “‘Role Models Can’t Just Be on Posters’: Re/Membering Barriers to Indigenous Community Engagement.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Canadian Journal of Education</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 36 (2): 212–47.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Merritt, Samantha, and Shaowen Bardzell. 2011. “Postcolonial Language and Culture Theory for HCI4D.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">CHI’11 Extended Abstracts on Human Factors in Computing Systems</hi><hi rend="normalweight baseline" style="font-size:12pt">, 1675–80.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Milloy, John. 2008. “Indian Act Colonialism: A Century Of Dishonour, 1869-1969.” Research Paper. Canada: National Centre for First Nations Governance.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Milloy, John S. 2017. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">A National Crime: The Canadian Government and the Residential School System</hi><hi rend="normalweight baseline" style="font-size:12pt">. Vol. 11. Univ. of Manitoba Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Muzyka, Kyle. 2018. “A Hawaiian Team’s Mission to Translate Programming Language to Their Native Language | CBC Unreserved Radio.” CBC Unreserved Radio. November 30, 2018. https://www.cbc.ca/radio/unreserved/indigenous-language-finding-new-ways-to-connect-with-culture-1.4923962/a-hawaiian-team-s-mission-to-translate-programming-language-to-their-native-language-1.4926124.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Nasser, Ramsey. 2012. “</hi><hi rend="normalweight baseline" style="font-size:12ptdirection:rtl;">قلب</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (‘Qalb’).” 2012. https://nas.sr/%D9%82%D9%84%D8%A8/.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Noori, Margaret. 2011. “Waasechibiiwaabikoonsing Nd’anami’aami," Praying through a Wired Window": Using Technology to Teach Anishinaabemowin.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Studies in American Indian Literatures</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 23 (2): 1–23.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Norman, Don, and Bruce Tognazzini. 2015. “How Apple Is Giving Design A Bad Name.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Fast Company</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (blog). November 10, 2015. https://www.fastcompany.com/3053406/how-apple-is-giving-design-a-bad-name.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Noyes, Jan. 1983. “The QWERTY Keyboard: A Review.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">International Journal of Man-Machine Studies</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 18 (3): 265–81.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Nugent, Benjamin. 2008. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">American Nerd: The Story of My People</hi><hi rend="normalweight baseline" style="font-size:12pt">. Simon and Schuster.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Ogg, Arden. 2019. “Hippopotamus in Cree: Solomon Ratt (y-Dialect).” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Cree Literacy Network</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> (blog). December 16, 2019. https://creeliteracy.org/2019/12/16/hippopotamus-in-cree-solomon-ratt-y-dialect/.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Okimasis, Jean, and Arok Wolvengrey. 2008. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">How to Spell It in Cree: The Standard Roman Orthography</hi><hi rend="normalweight baseline" style="font-size:12pt">. misāskwatōminihk (Saskatoon): Houghton Boston, miywāsin ink.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Ormond-Parker, Lyndon, Aaron David Samuel Corn, Kazuko Obata, and Sandy O’Sullivan. 2013. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Information Technology and Indigenous Communities</hi><hi rend="normalweight baseline" style="font-size:12pt">. AIATSIS Research Publications Canberra.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Philip, Kavita, Lilly Irani, and Paul Dourish. 2012. “Postcolonial Computing: A Tactical Survey.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Science, Technology, &amp; Human Values</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 37 (1): 3–29.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Quinn, Ruben. 2021. Intermediate </hi><hi rend="normalweight baseline" style="font-family:Gadugi;font-size:12pt">ᓀᐦᐃᔭᐤ</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> Language LessonsZoom Course.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Risam, Roopika. 2018. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">New Digital Worlds: Postcolonial Digital Humanities in Theory, Praxis, and Pedagogy</hi><hi rend="normalweight baseline" style="font-size:12pt">. Evanston, Illinois, US: Northwestern University Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Shirt, Marilyn, and Tina Wellman, eds. 2022. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Tânisîsi Kâ-Ôsîtahk Pîkiskwêwinisa : Morphology Dictionary</hi><hi rend="normalweight baseline" style="font-size:12pt">. St. Paul, AB: University nuhelot’ine thaiyots’i nistameyimâkanak Blue Quills.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Thomas, Robina Anne. 2005. “Honouring the Oral Traditions of My Ancestors through Storytelling.” In </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Research as Resistance: Critical, Indigenous and Anti-Oppressive Approaches</hi><hi rend="normalweight baseline" style="font-size:12pt">, edited by Leslie Brown and Susan Strega, 237–54. Toronto, ON: Canadian Scholars’ Press/Women’s Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Travers, Michael David. 1996. “Programming with Agents: New Metaphors for Thinking About Computation.” Doctor of Philosophy, Cambridge, MA: Massachusetts Institute of Technology.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Unicode, Inc. 2021. “The Unicode Standard, Version 14.0.” Unicode, Inc. https://unicode.org/charts/PDF/U1400.pdf.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Vee, Annette. 2017. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Coding Literacy: How Computer Programming Is Changing Writing</hi><hi rend="normalweight baseline" style="font-size:12pt">. Mit Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt">Venne, Sharon. 1981. “Indian Acts and Amendments, 1868-1975.” An indexed collection. University of Saskatchewan Native Law Centre, Saskatoon.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Vizenor, Gerald Robert. 2008. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Survivance: Narratives of Native Presence</hi><hi rend="normalweight baseline" style="font-size:12pt">. U of Nebraska Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Warschauer, Mark. 1998. “Technology and Indigenous Language Revitalization: Analyzing the Experience of Hawai’i.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Canadian Modern Language Review</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 55 (1): 139–59.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Wilson, Shawn. 2008. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Research Is Ceremony: Indigenous Research Methods</hi><hi rend="normalweight baseline" style="font-size:12pt">. Halifax, NS: Fernwood Publishing.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Wolfart, H Christoph. 1973. “Plains Cree: A Grammatical Study.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Transactions of the American Philosophical Society</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 63 (5): 1–90.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Wolfart, H.C., and Freda Ahenakew, eds. 1993. </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Kinêhiyâwiwininaw Nêhiyawêwin. The Cree Language Is Our Identity: The La Ronge Lectures of Sarah Whitecalf</hi><hi rend="normalweight baseline" style="font-size:12pt">. Winnipeg, MB, CA: University of Manitoba Press.</hi></p><p style="text-align: left;"><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve">Worden, Keith, Wieslaw J Staszewski, and James J Hensman. 2011. “Natural Computing for Mechanical Systems Research: A Tutorial Overview.” </hi><hi rend="italic normalweight baseline" style="font-size:12pt">Mechanical Systems and Signal Processing</hi><hi rend="normalweight baseline" style="font-size:12pt" xml:space="preserve"> 25 (1): 4–111.</hi></p></div></div></body></text></TEI>