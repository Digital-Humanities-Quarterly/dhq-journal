<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?>
<?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:dhq="http://www.digitalhumanities.org/ns/dhq">
	<teiHeader>
		<fileDesc>
			<titleStmt>
				<!-- Author should supply the title and personal information-->
				<title type="article" xml:lang="en">BASIC FTBALL for Everyone</title>
				<!-- Add a <title> with appropriate @xml:lang for articles in languages other than English -->
				<dhq:authorInfo>
					<!-- Include a separate <dhq:authorInfo> element for each author -->
					<dhq:author_name>Annette <dhq:family>Vee</dhq:family></dhq:author_name>
					<idno type="ORCID">https://orcid.org/0000-0003-2975-4466</idno>
					<dhq:affiliation>University of Pittsburgh</dhq:affiliation>
					<email>annettevee@pitt.edu</email>
					<dhq:bio>
						<p/>
					</dhq:bio>
				</dhq:authorInfo>
			</titleStmt>
			<publicationStmt>
				<publisher>Alliance of Digital Humanities Organizations</publisher>
				<publisher>Association for Computers and the Humanities</publisher>
				<!-- This information will be completed at publication -->
				<idno type="DHQarticle-id"
					>000696<!-- including leading zeroes: e.g. 000110 --></idno>
				<idno type="volume"
					><!-- volume number, with leading zeroes as needed to make 3 digits: e.g. 006 --></idno>
				<idno type="issue"><!-- issue number, without leading zeroes: e.g. 2 --></idno>
				<date/>
				<dhq:articleType>article</dhq:articleType>
				<availability status="CC-BY-ND">
					<!-- If using a different license from the default, choose one of the following:
                  CC-BY-ND (DHQ default): <cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>     
                  CC-BY:  <cc:License rdf:about="https://creativecommons.org/licenses/by/2.5/"/>
                  CC0: <cc:License rdf:about="https://creativecommons.org/publicdomain/zero/1.0/"/>
-->
					<cc:License rdf:about="http://creativecommons.org/licenses/by-nd/2.5/"/>
				</availability>
			</publicationStmt>

			<sourceDesc>
				<p>This is the source</p>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<classDecl>
				<taxonomy xml:id="dhq_keywords">
					<bibl>DHQ classification scheme; full list available at <ref
							target="http://www.digitalhumanities.org/dhq/taxonomy.xml"
							>http://www.digitalhumanities.org/dhq/taxonomy.xml</ref></bibl>
				</taxonomy>
				<taxonomy xml:id="authorial_keywords">
					<bibl>Keywords supplied by author; no controlled vocabulary</bibl>
				</taxonomy>
				<taxonomy xml:id="project_keywords">
					<bibl>DHQ project registry; full list available at <ref
							target="http://www.digitalhumanities.org/dhq/projects.xml"
							>http://www.digitalhumanities.org/dhq/projects.xml</ref></bibl>
				</taxonomy>
			</classDecl>
		</encodingDesc>
		<profileDesc>
			<langUsage>
				<language ident="en" extent="original"/>
				<!-- add <language> with appropriate @ident for any additional languages -->
			</langUsage>
			<textClass>
				<keywords scheme="#dhq_keywords">
					<!-- Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors -->
					<list type="simple">
						<item/>
					</list>
				</keywords>
				<keywords scheme="#authorial_keywords">
					<!-- Authors may include one or more keywords of their choice -->
					<list type="simple">
						<item/>
					</list>
				</keywords>
				<keywords scheme="#project_keywords">
					<list type="simple">
						<item/>
					</list>
				</keywords>
			</textClass>
		</profileDesc>
		<revisionDesc>
			<!-- Replace "XXXXXX" in the @target of ref below with the appropriate DHQarticle-id value. -->
			<change>The version history for this file can be found on <ref
					target="https://github.com/Digital-Humanities-Quarterly/dhq-journal/commits/master/articles/000696/000696.xml"
					>GitHub </ref></change>
		</revisionDesc>
	</teiHeader>
	<!-- If a translation is added to the original article, add an enclosing <text> and <group> element -->
	<text xml:lang="en" type="original">
		<front>
			<dhq:abstract>
				<!-- Include a brief abstract of the article -->
				<p>In late fall 1965, John Kemeny wrote a BASIC program called FTBALL***. FTBALL***
					is an early and important entry in the <q>programming for all</q> movement and a
					deliberate demonstration of computers as fun. Along with Thomas Kurtz and a few
					workstudy students at Dartmouth College, Kemeny had developed the BASIC
					programming language and Dartmouth Time-Sharing System, both of which went live
					on May 1, 1964. BASIC and DTSS represented perhaps the earliest successful
					attempt at <q>programming for all,</q> combining English-language vocabulary
					(e.g., HELLO instead of LOGON), simple yet robust instructions, and
					near-realtime access to a mainframe computer. Their efforts had been funded by
					an NSF grant and buoyed by their ingenuity and that of undergraduates invested
					in the project. BASIC was part of a movement of <q>programming for all</q> in
					the 1980s, associated with computer literacy campaigns, renewed emphases on
					educational technology and the Cold War. FTBALL demonstrates a number of typical
					features of early BASIC, including LET as an assignment statement and the
					infamous GOTO and GOSUB statements for program flow. That a renowned professor
					wrote it for fun and to be played for free by undergraduates at a time when
					computers were generally reserved for <q>serious</q> work in calculation makes
					it an excellent object of study for the history of BASIC and accessible
					programming. In this article, I put FTBALL in a historical and cultural context
					of <q>programming for all</q> as well as programming language and timesharing
					history and the hardware and financial arrangements necessary to support this
					kind of fun, interactive program in 1965. Using methods from history of
					computing and critical code studies <ptr target="#marino2020"/>, I draw
					historical context from archival records held by Dartmouth College Libraries,
					BASIC fan sites, a 2014 Dartmouth documentary titled Birth of Basic, Joy Lisi
					Rankin’s A People’s History of Computing, the collaboratively authored book 10
					PRINT, contemporary BASIC programming manuals, and a personal interview I
					conducted with Thomas Kurtz in 2017.</p>
			</dhq:abstract>
			<dhq:teaser>
				<!-- Include a brief teaser, no more than a phrase or a single sentence -->
				<p/>
			</dhq:teaser>
		</front>
		<body>

			<div>
				<head/>
				<p>In late fall 1965, John Kemeny wrote a 239-line BASIC program called FTBALL***.
					Along with Thomas Kurtz and a few workstudy students at Dartmouth College,
					Kemeny had developed the BASIC programming language and Dartmouth Time-Sharing
					System (DTSS), both of which went live on May 1, 1964. BASIC and DTSS
					represented perhaps the earliest successful attempt at <q>programming for
						all,</q> combining English-language vocabulary (e.g., <hi rend="monospace"
						>HELLO</hi> instead of <hi rend="monospace">LOGON</hi>), simple yet robust
					instructions, and near-realtime access to a mainframe computer. Their efforts
					had been funded by the National Science Foundation and buoyed by their ingenuity
					and that of undergraduates invested in the project. Beginning in 1966, Kemeny
					and Kurtz rolled out an ambitious training course that, over the next few years,
					taught about 80% of Dartmouth students and faculty how to program in BASIC in
					just a couple of hours. From the mid-1960s on, they facilitated connections to
					the Dartmouth computing network from local high schools and other colleges,
					making the computer and BASIC accessible beyond undergraduates at Dartmouth.
					Their free licensing of BASIC eventually led to a splintering of hundreds of
					versions of the language by the 1970s and ‘80s, one of which was famously
					written by Bill Gates and Paul Allen and helped to launch Microsoft, and another
					of which (less famously) introduced me to programming on my Commodore 64 in
					1982. My own introduction to programming in the early 1980s was part of a larger
					movement of <q>programming for all</q> in the 1980s, associated with computer
					literacy campaigns and renewed emphases on educational technology and the Cold
					War. But Kemeny and Kurtz got there first, in the 1960s at Dartmouth.</p>
				<p>Written by John Kemeny — a Hungarian Jew who barely escaped Hitler in his
					family’s immigration to America, a math genius, former assistant to Albert
					Einstein at Princeton’s Institute for Advanced Study, and later President of
					Dartmouth College — FTBALL was a deliberate demonstration of computers as
						<q>fun.</q> In their final report on an NSF grant they received for their
					BASIC timesharing project, Kemeny and Kurtz write: <quote rend="block">A remark
						is in order concerning the use of computers to play games. They are a
						magnificent means of recreation. But people feel that it is frivolous to use
						these giants to play games. We do not share this prejudice. There is no
						better way of destroying fear of machines than to have the novice play a few
						games with the computer. We have noted this phenomenon several times,
						particularly with our visiting alumni. And most of the games have been
						programmed by our students, which is an excellent way to learn
						programming.</quote> Kemeny and Kurtz encouraged students to add to their
					libraries of BASIC programs, and in the 1970s, publications of BASIC games such
					as the book <title rend="italic">BASIC Computer Games</title> by David Ahl and
					computer magazines further supported learning programming through games.<ptr
						target="#ahl1978"/></p>
				<p>This article takes a closer look at FTBALL as an early and important entry in the
						<q>programming for all</q> movement, pointing to specific innovations of
					BASIC at the time. FTBALL demonstrates a number of typical features of early
					BASIC, including LET as an assignment statement and the infamous <hi
						rend="monospace">GOTO</hi> and <hi rend="monospace">GOSUB</hi> statements
					for program flow. That a renowned professor wrote it for fun and to be played
					for free by undergraduates at a time when computers were generally reserved for
						<q>serious</q> work in calculation makes it an excellent object of study for
					the history of BASIC and accessible programming. In this article, I put FTBALL
					in a historical and cultural context of <q>programming for all</q> as well as
					programming language and timesharing history and the hardware and financial
					arrangements necessary to support this kind of fun, interactive program in 1965.
					Using methods from history of computing and critical code studies <ptr
						target="#marino2020"/>, I draw historical context from archival records held
					by Dartmouth College Libraries, BASIC fan sites, a 2014 Dartmouth documentary
					titled <title rend="italic">Birth of Basic</title>, Joy Lisi Rankin’s <title
						rend="italic">A People’s History of Computing</title>, the collaboratively
					authored book <title rend="italic">10 PRINT</title>, contemporary BASIC
					programming manuals, and a personal interview I conducted with Thomas Kurtz in
					2017.</p>
			</div>
			<div>
				<head>BASIC and Accessible Computing at Dartmouth</head>
				<p>The high expense of early computing and the seriousness of it — applications for
					war and big science such as ballistics, cryptography, engineering and physics —
					would seemingly work against its recreational applications. But there was a
					playful side to computing from the start. The Mark II at Manchester had a
					loudspeaker that emitted sounds from certain instructions, and Alan Turing
					discovered <q>the hooter</q> could produce musical notes by repeating these
					instructions. In an all-night programming session, Christopher Strachey composed
						<title rend="quotes">God Save the Queen</title> with these instructions and,
					consequently, landed himself a job at the lab. A recently restored recording
					session from 1951 captures this plus <title rend="quotes">Baa Baa Black
						Sheep</title> and <title rend="quotes">In the Mood,</title> composed perhaps
					collaboratively by Strachey and other members of the lab (Copeland and Long
					2016). In 1952, Strachey wrote a <title rend="quotes">Love Letters</title>
					program that spat out saccharine and silly statements such as <q>DARLING
						CHICKPEA, YOU ARE MY AVID ENCHANTMENT</q> signed <q>M.U.C.</q> for
					Manchester University Computer <ptr target="#wardripfruin2009"/>. Even Allen
					Newell, J.C. Shaw and Herb Simon wrote a chess game at Rand Corporation in the
					1950s; chess has been a testing game for AI ever since <ptr
						target="#ensmenger2012"/>(Ensmenger 2012). The game <title rend="italic"
						>Spacewar!</title> had been written at MIT in 1962 on an inexpensive DEC
					PDP-1, which had a primitive CRT graphic display. <title rend="italic"
						>Spacewar!</title> circulated among university and business computing site
					for years and was famously described by Stewart Brand in a 1972 issue of <title
						rend="italic">Rolling Stone</title>
					<ptr target="#brand1972"/>. IBM attempted to ban it for it unseriousness, but
					then rescinded the ban because the game itself was a lab for computational
					experiments. <quote rend="inline">Ready or not, computers are coming to the
						people,</quote> Brand wrote. As Brand and so many others recognized in the
					1950s and ‘60s, games of all kinds were an ideal conduit for learning about
					computing.</p>
				<p>So, there was precedent for Dartmouth FTBALL as a recreational use of computers.
					And while Kemeny and Kurtz were serious mathematicians, they recognized that to
					encourage computing, recreational applications such as games were key.</p>
				<figure xml:id="figure01">
					<head>Kemeny's notes from a lecture on the use of computers, showing their many
						uses. Kemeny Papers, Dartmouth College, Rauner Library, accessed
						2016.</head>
					<figDesc>Black pen handwriting on lined, yellowed paper. The text is formatted
						as an outline and reads: 4.) Entertain, YOUGUESS***, Educational, FTBALL***,
						Pure Fun, Writing games! Great way to learn programming</figDesc>
					<graphic url="resources/images/figure01.png"/>
				</figure>
				<p>FTBALL wasn’t the only game at Dartmouth, either. In the 1967 final report on
					their grant for the NSF, Kemeny and Kurtz wrote, <quote rend="inline">Our
						library contains some 500 programs, including many games. We have found that
						a computer is an efficient and inexpensive source of entertainment</quote>
					<ptr target="#kemeny_etal1967a" loc="6–7"/>. They go on to describe the games
					briefly: <quote rend="inline">The student can challenge the computer to a game
						of three-dimensional tic-tac-toe, or quarterback Dartmouth's football team
						in a highly realistic match against arch-enemy Princeton. The program is
						somewhat biased — Dartmouth usually wins</quote><ptr
						target="#kemeny_etal1967a" loc="8"/>. A local survey in 1967 revealed that
					Dartmouth students used the computer for leisure one-third of the time and
					enjoyed playing games<!-- (<hi
						rend="italic">Kiewit Comments</hi>, “The Bit Bucket” Nov 17, 1967; Box 6,
					Thomas Kurtz Papers, Rauner Library, MS-1144) -->. The other games in the
					local library of programs were compelling, but FTBALL was exceptionally
					popular.</p>
				<p>A public conversation between Nancy Broadhead, an operator and self-described
						<q>housemother</q> at the lab, and John Kemeny at the National Computer
					Conference in 1974 provides some context for FTBALL’s origin and role at
					Dartmouth computing:</p>
				<sp>
					<speaker>Nancy Broadhead</speaker>
					<p>Speaking of phone calls and things, one of probably the earliest programs in
						the program library was FTBALL. A lot of us here know who wrote it. I
						remember one night we had been apparently having some problem somewhere
						along the line and I got a phone call at home one night to tell me in
						absolute panic, <said>FTBALL has been clobbered in the library!</said> I
						live a good half hour away from Dartmouth and I really wasn't about to jump
						in the car and trot in to reload it from cards, or paper tape was probably
						what we had for backup at that point. So I just sort of sleepily said
							<said>Well, I'll put it back in the morning.</said> [To Kemeny:] What
						did you really expect me to do?</p>
				</sp>
				<sp>
					<speaker>John Kemeny</speaker>
					<p>We were probably trying to recruit a new football coach and that seemed so
						terribly important. I don't remember who wrote it [Kemeny was being
						facetious here!] but I do remember when that program was written, it was
						written on a Sunday. Those were the good days when time-sharing still ran on
						Sundays. It was written on Sunday after a certain Dartmouth-Princeton game
						in 1965 when Dartmouth won the Lambert trophy. It's sort of a commemorative
							program.<ptr target="#afips1974"/></p>
				</sp>
				<p>Kemeny’s playful refusal to claim authorship of the program in front of an
					audience who would have known otherwise recalls the playfulness of the program
						itself.<note>Joy Lisi Rankin reads this exchange less playfully, as an
						indication of the gendered hierarchy at Dartmouth computing, where the
							<soCalled>housemother</soCalled> (Broadhead) is called to work
						afterhours by the lab director (Kemeny) <ptr target="#rankin2018" loc="47"
						/>. Given the tone of the entire discussion, this particular exchange, and
						other descriptions of Kemeny’s working relationships, I see this exchange as
						playful as well as reflective of expected gendered working relationships in
						the 1960s and ‘70s. He did presume to call her about work in the middle of
						the night, but she felt empowered to tell him it could wait until morning —
						and then tease him about it publicly years later, where he admits the
						frivolity of his request.</note> And yet his description of the possible
					context that drove him to call Broadhead afterhours also suggests that the
					program was more than fun: it served as a demonstration program for a non-expert
					to see what Dartmouth computing could do. In their report on the grant, Kemeny
					and Kurtz write, “We have lost many a distinguished visitor for several hours
					while he quarterbacked the Dartmouth football team in a highly realistic
					simulated game <ptr target="#kemeny_etal1967a" loc="6–7"/>. Kemeny’s FTBALL
					game, written on a Sunday in response to a real-world game between Dartmouth and
					Princeton, would have appealed to the local undergraduates, but it also had
					real-world applications for recruiting and impressing distinguished
					visitors.</p>
				<p>Games, including football, were among the more popular exports of the Dartmouth
					computing library over the DTSS network that included local high schools in
					Hanover and neighboring Lebanon as well as regional colleges.<note>See Rankin,
						Chapter 3 “Back to BASICs” for a detailed discussion and maps of the growing
						Kiewit network, so named by the computing center in 1967 <ptr
							target="#rankin2018"/>.</note> Members of the network also wrote games,
					exemplifying Kemeny and Kurtz’s claim in their final grant report to the NSF in
					1967 that “most of the games have been programmed by our students, which is an
					excellent way to learn programming.” Rankin names a few of the projects of
					students listed in the <title rend="italic">Kiewit Comments</title> from 1967,
					including solitaire by 12-year-old David Hornig and checkers by 13-year-old
					Julia Hawthorne <ptr target="#rankin2018" loc="77"/>. Game programs were popular
					at Exeter Academy, an exclusive, all-male at the time prep school 100 miles
					southeast from Dartmouth College that joined to the Dartmouth network very
					early. John Warren, the collaborating teacher at Exeter who later trained other
					secondary school teaching partners when they joined the network, claimed in 1966
					that Exeter “students and faculty have written several thousand programs,” and
					that games were not “idle pasttimes” because writing them took serious skill
						<ptr target="#rankin2018" loc="81"/>.</p>
				<p>Traditional sports and card games such as football were early entries in computer
					gaming in part because of their cultural familiarity — they required few
					directions to users. Many Americans already knew the rules for solitaire,
					checkers, and football and so they could draw on existing knowledge to play
					these games in the limited interfaces of early computers. Moreover, the
					numerical and statistical backbones of traditional card and sports scores could
					be represented digitally. It’s perhaps no accident that <title rend="italic"
						>Tennis for Two</title> was the first known interactive video game, written
					with graphics on an oscilloscope, followed by the popular <title rend="italic"
						>Pong</title> in 1972 <ptr target="#anderson1983"/>. Both were iterations of
					a game many people already played.</p>
				<p>Because they translate well and rely on cultural knowledge not associated with
					computing knowledge, sports games have helped to bring computer games to a wider
					audience. These kinds of games are often called <q>casual games</q> because they
					recruit casual users and do not have a steep learning curve. <title
						rend="italic">John Madden Football</title>, released in 1988 by Electronic
					Arts and again yearly since 1990 with National Football League (NFL) players and
					plays represented accurately, follows in the same tradition. <title
						rend="italic">Madden</title> is often seen as the first game that
					non-computer nerds might play beginning in the early 1990s. It also drew new
					fans into football by teaching scoring, plays and strategies. More recent
					versions even include mechanics about team rosters and salary caps, so players
					learn about the NFL as well as the plays and strategies of football. Because so
					many of current NFL players and coaches now grew up playing it, <title
						rend="italic">Madden</title> has influenced the sport itself <ptr
						target="#foran2008"/>.</p>
				<p>Rankin associates the popularity of FTBALL and its subsequent iterations with the
					masculine culture of Dartmouth computing. Dartmouth then and now is associated
					with a kind of <soCalled>jock</soCalled> culture and was all-male at the time
					Kemeny composed FTBALL. (Later, as President of the College, Kemeny pushed for
					and presided over the Dartmouth’s transition to co-education, which occurred in
					1972, along with programs to support Native American students according to
					Dartmouth’s original charter; <ptr target="#campion2001"/>) Rankin drew on
					interviews and archives to describe the scene in which Dartmouth FTBALL was
					played. This scene includes courting women students from nearby Mount Holyoke
					College, prank-calling teletypes, error messages that ribbed fellow
					student-workers, and frequent late night computing sessions, all likely shaped
					by the demographics Kemeny and Kurtz had to choose from at the time. Indeed,
					games of contestation — especially those that echo the masculinity of fighting,
					war, and sports — figure prominently in computing game history. This dominant
					and dominating thread of masculinity in computing and in gaming is being pried
					apart by contemporary historians of computing such as Rankin, Janet Abbate, Mar
					Hicks and Nathan Ensmenger. The scene at Dartmouth computing in the basement of
					College Hall was certainly shaped by the fact that all the students were men,
					most of them white and some from affluent backgrounds, although many of the
					students who worked with Kemeny and Kurtz did so through work-study support <ptr
						target="#murray_etal2014"/>.</p>
				<p>Kemeny was a big fan of Dartmouth football, and he often attended games with his
					math colleagues. As one of his colleagues recalled, <quote rend="inline"
						source="#campion2001">They made all manner of bets based on probabilities of
						obscure game occurrences, such as the odds on three flags being thrown twice
						in a quarter</quote><ptr target="#campion2001"/>. Kemeny wrote FTBALL on
					Sunday, Nov 21, 1965, a celebration of Dartmouth winning the Lambert trophy in a
					game against Princeton Nov 20, 1965.<note>Kemeny noted in the 1974 Pioneer Day
						session that he wrote it on a Sunday in 1965, the day after the game. I
						found the football schedule listed on Wikipedia to figure out which day that
						was, exactly. <ref
							target="https://en.wikipedia.org/wiki/1965_Dartmouth_Indians_football_team"
							>https://en.wikipedia.org/wiki/1965_Dartmouth_Indians_football_team</ref>
					</note> The game featured in FTBALL is between Dartmouth and Princeton, but
					Princeton isn’t in the title — it’s <emph>Dartmouth</emph> Championship
					Football. The title and the assumed opponent, a major Ivy League rival, presumes
					an internal audience of Dartmouth football fans. As Kemeny and Kurtz admitted,
						<quote rend="inline" source="#kemeny_etal1967a">The program is somewhat
						biased — Dartmouth usually wins</quote>
					<ptr target="#kemeny_etal1967a" loc="8"/>. Users were only allowed to play
					Dartmouth, as quarterback. They could choose among seven different running,
					passing, and kicking plays. At the time that Kemeny wrote the game, BASIC was
					interactive — it could take input form the user unlike earlier versions of BASIC
					— but it wasn’t yet capable of multiplayer games. A later iteration of FTBALL
					was multiplayer and announced as <title rend="quotes">FOOTBALL</title> in the
					Nov 1969 Kiewit Comments newsletter <ptr target="#rankin2018" loc="48"/>. Rankin
					described the significance of this networked version, as it meant that students
					at Kiewit could play FOOTBALL with others in the local DTSS New England network,
					including secondary schools and other colleges in the area <ptr target="#rankin2018" loc="48–49"/>.</p>
				<p>Beyond the Dartmouth network, the offspring of Dartmouth Championship FTBALL had
					longstanding appeal outside of Dartmouth as well. FOOTBL (“Professional
					football”) and FOTBAL (“High School football”) circulated in the first BASIC
					computer games book, written by David Ahl and published by DEC in 1973.<note>The
						game listings from the original 1973 edition are scanned here: <ref
							target="https://digibarn.com/collections/books/basicgames/IMG_6632.JPG"
							>https://digibarn.com/collections/books/basicgames/IMG_6632.JPG</ref>
					</note> The 1978 edition featured Dartmouth Championship Football with the
					byline of Raymond Miseyka, though credit was given in the accompanying text to
					John Kemeny for the original version. The 1978 version of FTBALL is clearly
					based on Kemeny’s; for instance, it features Kemeny’s original seven plays. It
					augments Kemeny’s original by allowing the user to input an opponent name,
					handling errors, and including chance events like <q>GAME DELAYED. DOG ON THE
						FIELD.</q> The fact that Miseyka’s version works from Kemeny’s is further
					indication of the free circulation of BASIC games during this period. As the
					authors of <title rend="italic">10 PRINT</title> demonstrate, the BASIC language
					and programs traveled widely and freely and thus shaped computational culture in
					the 1960s-1980s <ptr target="#montfort_etal2014"/>. In the Acknowledgments of <title
						rend="italic">BASIC Computer Games</title>, Ahl thanks Dartmouth College
					<quote rend="inline" source="#ahl1978">For recognizing games as a legitimate educational tool and allowing them to be
					written on the Dartmouth Timesharing System</quote> <ptr target="#ahl1978" loc="xi"/></p>
				<p>Ahl also thanks Microcomputer Manufacturers <quote rend="inline" source="#ahl1978">For putting computer games within
					the reach of every American in the comfort of their own home.</quote> The first wave of
					home mass-market computers hit just prior to this publication; many of them
					shipped with a version of BASIC preinstalled and games were indeed a popular
					application for them — both the playing and writing of them. The success of
					BASIC with home use computers wasn’t necessarily anticipated by Kemeny and
					Kurtz, but the technical decisions they made about the language as well as the
					way they allowed it to freely circulate were key to its popularity.</p>
				<figure>
					<head>FTBALL as printed in 1978 Edition of BASIC Computer Games.
						https://annarchive.com/files/Basic_Computer_Games_Microcomputer_Edition.pdf
						p 64 </head>
					<figDesc>A monochrome scanned page of a book offering a brief summary of how to
						play the 1978 version of FTBALL in the left column of text and a sample
						play-through in the right column. Below both columns is a line drawing
						cartoon of a wheeled-robot holding a football with the words "Green Bay"
						printed on its side. </figDesc>
					<graphic url="resources/images/figure02.png"/>
				</figure>
			</div>
			<div>
				<head>Hardware and technical details</head>
				<p>Early versions of BASIC and DTSS ran on GE computer hardware, which were
					purchased with the NSF grants that Kemeny and Kurtz obtained, support from
					Dartmouth College, and discounts from GE.<note>Kemeny and Kurtz did not make the
						obvious choice of IBM because IBM representatives were bullies during the
						selling process, and GE was more interested in the educational applications
						and willing to provide them with these discounts (Vee interview with Kurtz,
						2017).</note> The first iteration of BASIC/DTSS (Phase I), which ran from
					1964 to sometime in 1967, ran on two computers, a GE-235 to execute programs and
					a GE Datanet-30 to handle communications to and from teletypes and to schedule
					the execution of programs on the 235 (Kemeny and Kurtz 1967). Undergraduate
					Anthony Knapp had designed an early version of this setup with Kurtz (Kurtz
					1981, p 532). Kemeny had borrowed used a GE-225 in the Boston area to prototype
					the BASIC compiler in 1963, and Kurtz and undergraduate Mike Busch ‘66 traveled
					to GE in Phoenix, Arizona, to learn how to program the equipment (Dartmouth
					timeline 1960s). The Dartmouth team called the resulting hybrid system the
						<q>GE-265</q> because it was a marriage between the GE-235 and Datanet
						30.<note>For a good explanation of the technical aspects of the timesharing
						system see Rankin 2018, 24-25.</note> As Kemeny and Kurtz wrote in 1968,
					this two-part “system anticipated the current understanding that communication,
					not calculation, is the primary activity in a time-sharing system” (Kemeny and
					Kurtz 1978, p. 226)<note> They used the term <q>master-slave</q> for the system
						design, which was standard at the time and is only now being renamed as a
							<q>controller-peripheral</q> arrangement (see Landau).</note></p>
				<figure>
					<head>Datanet-30, which handled communications between the GE-235 and teletypes
						in the BASIC/DTSS system in 1965. From the GE Datanet-30 programming
						manual.</head>
					<figDesc>A black and white image of the General Electric Datanet-30. The
						computer resembles three refridgerators in size and form, with the
						right-most door being cut short by an access panel with indicator
						lights.</figDesc>
					<graphic url="resources/images/figure03.png"> </graphic>
				</figure>
				<p>Jerry Weiner was the GE project manager working with the Dartmouth team; he flew
					in system parts when they burned them out. He noted that: “Although the Datanet
					30 was standard off the shelf, it was standard off the shelf numbered double
					zero and one of ten unique machines. We rebuilt it without telling other people”
					(1974 Pioneer Day transcript, p. 2). Kurtz provided more detail on their choice
					of the GE system when I spoke with him in 2017:</p>
				<p>We looked around for computers that we thought could do time-sharing, now there
					was no timesharing software available in the market, but we were looking for
					computers which would lend themselves to this. And we got proposals from four
					companies or something like that. Including IBM proposed something similar to
					what they were doing down at MIT, and others. BENDIX proposed something, and
					General Electric had a computer department in those days, and for some strange
					reason they had their regular computer which was called GE-225, which is an
					old-fashioned machine that used punch cards and so on. Then they had another
					computer which was designed to support a teletype communication network, they
					called it the DATANET-30, and it was designed to allow teletypes to communicate
					the same way as phone. […] [The main machine had] floating point hardware, which
					we felt was essential. […] I don’t know the what the application was that they
					were thinking of, but along the way--and I don’t know if they really knew what
					they were doing--along the way they figured a computer interface unit to put
					these two computers together. They hadn’t done anything with it, but that was
					available as something you can buy from them.</p>
				<p>The description from Weiner and Kurtz are indicative of computing hardware at the
					time: even the off the shelf systems were bespoke and uncharted.</p>
				<p>The GE-225 had been designed, in part, by Arnold Spielberg, the father of Steven
					Spielberg. In an internal GE publication, the younger Spielberg recalled,</p>
				<p>I remember visiting the [GE plant in Phoenix, AZ] when dad was working on the
					GE-225,” Steven Spielberg told <title rend="italic">GE Reports</title>. "I
					walked through rooms that were so bright, I recall it hurting my eyes. Dad
					explained how his computer was expected to perform, but the language of computer
					science in those days was like Greek to me. It all seemed very exciting, but it
					was very much out of my reach, until the 1980s, when I realized what pioneers
					like my dad had created were now the things I could not live without. (GE
					Reports 2015)</p>
				<p>The GE-225 was designed in 1959 and with dozens of early sales, it was a
					marketing success. Bank of America had one and another machine at First Union
					National Bank predicted the 1964 Johnson-Goldwater race. Related to FTBALL, a
					GE-225 was used by the Cleveland Browns for ticket sales. As <title
						rend="italic">GE Reports </title>quotes, “‘Who knows,’ quipped the Browns’
					president Art Modell in 1966, ‘there might come a time when computers will help
					call the next play.’</p>
				<p>BASIC was designed with a teletype interface rather than punch cards for
					accessibility reasons (Kurtz 1981, p. 521). Following up on his description of
					the <q>GE-265</q> setup, Kurtz narrated,</p>
				<p>Then we would set this up and the whole idea was, we would put teletype machines
					in the various departments around on campus; we’d have a place where students
					could go and sit on a teletype machine and write programs.</p>
				<p>When FTBALL was written (1965), there were about 30 of the Teletype Models 33 and
					35 terminals around campus and the computing lab was in College Hall. They were
					planning to replace the hardware with a GE-635 and move to a new building; the
					Kiewit Center was dedicated in 1966 (Kurtz 1981, p. 528). The development of
					ASCII in 1963 came along in the <q>nick of time</q> along with better teletypes
					for interfacing.<note>Author note: Find citation for where I’m quoting this
						from… Not the interview or memo. Kurtz in Wexelblat?</note></p>
			</div>
			<div>
				<head>BASIC as a beginner’s language</head>
				<p>In the early 1960s, computation was at such a premium that most computer experts
					believed that languages needed to prioritize computational efficiency at the
					expense of ease of use. Mark Marino discusses John von Neumann’s supposed
					response to FORTRAN as a more accessible language: he believed that it was a
					waste of computer time to have it do the clerical work of legibility and style.
					This tradeoff takes on gendered meaning given that clerical staff and computer
					technicians were often women, while the machine language writers and designers
					were men (Marino 2020, p. 149). Kemeny and Kurtz did not share this view. Kurtz
					had come to the realization — after finding FORTRAN more efficient than assembly
					languages, which were more prone to human error — that the tradeoff between
					human use and computational efficiency wasn’t so simple. A language that was
					easier to use would be quicker for students to learn, more students could learn
					it, and they would be more successful in their programs. Kurtz explained in an
					internal memo from 1963: “In all cases where there is a choice between
					simplicity and efficiency, simplicity is chosen” (quoted in Kurtz 1981, 520).
					Consequently, a number of technical decisions were made in BASIC to prioritize
					simplicity and legibility of the language over computational efficiency.</p>
				<p>Some examples of technical choices Kemeny and Kurtz made to simplify BASIC
					include: hiding <q>object code</q> from the user, who could make edits directly
					in BASIC by using line numbers; keeping case-insensitivity even when 8-bit ASCII
					allowed for both upper and lower case; and reducing compiling time by skipping
					an intermediary language (Kurtz, Memo to Vee, 2017). BASIC treated numbers in
					ways that valued an intuitive sense of users over computation time. BASIC
						<q>wasted</q> computer time by treating all numbers as double-precision
					floating point numbers, the most computationally expensive and precise
					representation of numbers at the time, rather than having users specify number
						type.<note>From Kurtz memo to Annette Vee 9.29.17, “Grammatical
						Simplifications in BASIC”: All other programming languages introduced number
						types to correspond to the hardware. For example, languages like Pascal
						might have single-precision and double- precision number types of both
						integer and floating-point. Programmers could then use, for a particular
						quantity, the type that provided the greatest efficiency. (Integer
						arithmetic in almost all computers was much fast that floating-point
						arithmetic. In fact, in the early GE computers, floating point calculations
						required a separate large hardware component. In some other computers, there
						being no floating-point hardware, the system had to rely on software
						subroutines to perform that kind of calculation.) In BASIC, we decided that
						all arithmetic would be done in the computer using double-precision
						floating-point, which was, of course, much slower that an integer
						calculation. As an example, the simple looping statement FOR I = 1 TO 10
						would, nonetheless, represent the value of I (internally) as a
						double-precision floating- point number. However, we reasoned that almost
						all students would be writing short programs whose execution times would be
						trivial, at least in comparison to the compiling time. This assumption
						turned out to be true, especially since the BASIC compiler was, because of
						the simple language, quite fast.</note> Moreover, the user didn’t need to
					know about formatting the number in printing, as they might in other
					languages.</p>
				<p>Commands in BASIC were designed to be <q>friendly</q> (see the Tribus memo quoted
					above) and written in non-technical words lay English speakers would understand.
					BASIC used monitor commands such as SAVE, HELLO, RUN, GOODBYE instead of LOGON
					and LOGOFF. Short error messages in English and limited to only five messages
					per run of the code worked toward simplification as well as good pedagogy
					(Kurtz, 1981, p. 522). The use of English words and commands in BASIC were
					thought to make the program easier to understand. Of course, this assumes users
					would know at least basic English vocabulary, which was the case for any
					Dartmouth College student. In his analysis of FLOW-MATIC, which also relied on
					English vocabulary to make programs ostensibly easier to read, Marino breaks
					down some of the challenges to English-syntax as accessible programming design
					(p. 149-152). Beyond the obvious critiques of Global English as a tool for
					colonization, because languages like FLOW-MATIC, COBOL, or BASIC cannot handle
					the complexities of English syntax, they end up reading as stilted and awkward
					rather than the <q>natural language</q> they aspire to. Whether they are more
					legible than more abstract symbolic representation is a matter of debate.
					However, for the very newest users who might be turned off by jargon — the very
					users Kemeny and Kurtz were aiming for — the friendlier <q>HELLO</q> might have
					helped them overcome an initial fear of computing.</p>
				<p>Given BASIC’s purpose as a learning language, Kemeny and Kurtz built good
					pedagogical principles of composition feedback into the system itself. To
					encourage students to correct their own errors, Kemeny and Kurtz designed the
					compiler not to check line by line prior to compiling (Kurtz, 1981, p 522). As
					they wrote in 1968, “We find the instantaneous error messages of other systems
					annoying and a waste of time. It is very much like having an English teacher
					look over your shoulder as you are writing a rough draft of a composition. You
					would like a chance to clean up a draft before it is criticized” (Kemeny and
					Kurtz 1968, p. 227).</p>
				<p>Though they steered away from annoying instantaneous error messages that would
					discourage self-correction, Kemeny and Kurtz also realized that rapid response
					was key for a timesharing system. Batch-processing, where a computer tech feeds
					in cards and users receive results hours later, was not going to work for casual
					users. But Kemeny and Kurtz saw that if users received a response to their
					program in less than 10 seconds in a timesharing system, users had the helpful
					illusion that the computer was <q>theirs.</q> Interpreted languages could
					provide this more rapid feedback; however, they were more computationally
					expensive. Had BASIC been an interpreted language, it would have been
					prohibitive to run anything more complex than the simplest programs on the
					hardware they had available. Consequently, early versions of BASIC, including
					the one FTBALL is written in, were compiled rather than interpreted. Later
					versions of BASIC for minicomputers such as the PDP/8 were interpreted.</p>
				<p>Recognizing the value of rapid feedback, Kemeny and Kurtz worked toward the
					one-pass ideal that interpreted languages offer by implementing a <q>pass and a
						half</q> system to speed up compiler time for BASIC (Kurtz 1981, p. 522).
					The BASIC compiler could handle everything in one pass:</p>
				<p>with one exception -- a GOTO statement could refer to a point later in the
					program, a point not yet reached by the compiler. The solution was to produce a
					linked-list of the location of GOTO statements in the student’s program. At the
					end of the compile main run, it ran through the linked list, filling in the
					blanks. We sometimes called it a ‘pass and a half.’ (Kurtz, Memo to Vee,
					2017)</p>
				<p>BASIC scaled well for more complex programs by using this single-pass plus
					linked-lists compiling design.</p>
				<p>Earlier language development and experimentation set the stage for the
					development of BASIC, giving Kemeny and Kurtz key insights on what language
					features were critical to a student-oriented system and simplified user
					interface. At Dartmouth, they developed ALGOL 30, so-named because it ran on the
					LGP-30, which could not run a full implementation of ALGOL 60, an influential
					and popular language at the time, especially among academics. From ALGOL 30,
					which had to be run on paper tape and was a two-pass, <q>batched</q> system,
					they learned that “the delays between presenting the source code tape and the
					execution were too great to allow for widespread student use.” They developed
					SCALP (Self Contained ALgol Processor), to avoid batching. The success of SCALP
					(hundreds of students learned it at Dartmouth in the early 1960s) taught Kemeny
					and Kurtz that quick turnaround and use of only source language for programming
					and patching were key for a system that might have wider implementation among
					students (Kurtz 1981, p. 517). DOPE was also a precursor to BASIC, and
					contributed, among other things: line numbers that served as jump locations;
					interchangeable upper and lower case letters; printing and input formats (Kurtz
					1981, p. 518).</p>
				<p>Line numbers were how a BASIC program in 1965 managed program flow and edits.
					BASIC programs were typically organized by line numbers counted by 10s, which
					left space in-between for additions and edits. Every line that began with a
					number was assumed by the system to be part of the program, and (through the
						<q>pass and a half</q> system) line numbers were automatically sorted in
					order so that additions, deletions and edits could be appended and would be
					sorted correctly into the program flow. Commands that didn’t begin with line
					numbers were read as monitor commands (Kurtz 1981, p. 521).</p>
				<p>The GOTO command was used in program flow to jump to different parts of the
					program, often after conditional statements, e.g., GOTO LINE 20. GOTO was not an
					innovation of BASIC, as even FLOW-MATIC had used the command along with JUMP TO
					(Marino 2020, p. 139-144). Later, structured languages allowed for function call
					by name instead of line numbers and BASIC itself became a structured language in
					later versions. But in 1965, GOTO was the way to direct program flow to
					different functions based on input. GOTO was famously derided in an article by
					Edsgar Dijkstra in 1968, “GOTO Considered Harmful,” which launched a whole genre
					of computer science articles on <q>considered harmful</q> practices in the
					profession. Dijkstra was opposed to GOTO because the unique coordinates of the
					GOTO affected program flow but they were <q>utterly unhelpful</q> in tracing the
					progress of the program — that is, in the user figuring out just what was going
					on when. Moreover, the GOTO statement is “too much of an invitation to make a
					mess of one’s program” (Dijkstra 1968). As a result of Dijkstra’s influence,
					it’s a popular sport among programmers to deride GOTO, but the strong claim
					against GOTO, especially for understanding program flow, isn’t clear. Frank
					Rubin wrote to <title rend="italic">Communications of the ACM</title> in 1987
					against the religious belief against GOTO and pointed out examples where GOTO
					reduced complexity in programs. For new users who are unfamiliar with
					programming structures, following program flow by line number is simple. As with
					many of choices for BASIC, Kemeny and Kurtz elected what might be most
					self-explanatory for new users. With the background of these technical decisions
					in the language of BASIC itself, I move next to the specific commands and code
					of FTBALL as representative of early BASIC in 1965.</p>
			</div>
			<div>
				<head>FTBALL’s code</head>
				<p>The code for FTBALL is written in the Third Edition of BASIC, the first edition
					to be interactive--effectively, the first edition that was conducive to games.
					The first edition of BASIC was outlined in a reference manual, likely written by
					Kemeny; the second edition was described in a primer, likely written by Kurtz.
					These documentation shifts from technical manual to primer indicate how the
					Dartmouth team was developing the language to handle a larger scale of users.
					The Third Edition added the INPUT statement to BASIC, which allows programs to
					take data from the user. This meant BASIC programs could change results based on
					user input. So, a user could play a game and expect the result of the game to be
					affected by their choices. The Third Edition manual is dated 1966 (Kurtz 1981,
					p. 526) but since FTBALL was written in the fall of 1965 by Kemeny, it’s likely
					he was implementing the newer version of BASIC code ahead of the documentation
					of it.</p>
				<p>FTBALL was called that because of a six-character limit for strings in BASIC at
					the time. All functions were limited to three characters — LET, INT, RND are
					examples of such functions below. Kurtz later called this decision
						<q>unfortunate</q> for legibility (Kurtz 1981, p. 524). FTBALL also
					demonstrates the original BASIC convention of variables consisting of one letter
					and one number. Kemeny and Kurtz specified variables this way for symbol table
					lookup time. Plus, they figured it was faster to compose programs with shorter
					variable names and because they were mathematicians, they were accustomed to
					single-letter variable names. It didn’t seem consequential to have variables
					named in this obscure way, although like the three-character function limit, it
					later became clear that more descriptive variable names might make the program
					easier for users to read. (Kurtz 1981, p. 523). But, as with any language design
					decision, the tradeoffs were often between legibility and how much space a
					program would take up. Characters took up space in memory.</p>
				<p>As with every BASIC program of its time, each line of FTBALL contains an
					instruction number (line #) operation (such as LET) and operand (e.g., a
					variable) (Kurtz 1981, p. 522). And also demonstrated here, all BASIC statements
					begin with an English word, including the final END. Although the ASCII standard
					had recently allowed for lower-case letters and BASIC accepted them, the
					commands for FTBALL are in all-caps likely because of convention — either lower
					or upper case would have been interpreted the same (Kurtz, Memo to Vee,
					2017).</p>
				<p>The BASIC commands in use in FTBALL are:</p>
				<p>REM: comments or <q>remarks.</q> They didn’t pull the syntax of <q>comments</q>
					from FORTRAN or ALGOL, and Kurtz admits “the reason is not recorded for choosing
					the statement REM or REMARK in BASIC” (Kurtz 1981, p. 525).</p>
				<p>PRINT: This command displays characters to the teletype screen. It relies on the
					analogy of physical <q>print.</q> There were no automatic line breaks or wrap
					around on the display. Consequently, note that in the beginning prompt, there
					are two PRINT lines in a row to force breaking the directions into two lines.
					There are blank PRINT lines, too, just to print a space. (This technique is also
					featured on the cover of Rankin’s book.) The PRINT statement allowed for
					expressions and quoted material and used the comma as a separator. Later
					versions of BASIC required a colon or semicolon to separate the expression and
					the quoted material (Kurtz 1981, p. 524.)</p>
				<p>INPUT: reads from a teletype file. This command made BASIC an interactive
					language and wasn’t present in the original BASIC (Kurtz 1981, 521); it came in
					the Third Edition of BASIC. It stopped program flow and waited for input from
					the user, prompted by <q>?</q> It was usually accompanied by the PRINT statement
					to specify what kind of INPUT was called for. The semicolon that accompanies the
					PRINT statement at the beginning of FTBALL allows the teletype to stay on the
					same line and character position. (Alternatively, the comma keeps the teletype
					on the same line, but moves the character position over one column, or some
					multiple of 15 spaces from the left margin; BASIC programming, Second Ed, p.
					13).</p>
				<p>GOTO: This is a program flow command, enabling a permanent jump from one part of
					the program to another. GOTO is a sign of what is now called <q>unstructured
						programming</q> in light of later programming languages that controlled
					program flow by function name. The command is used here to jump to particular
					plays in the program.</p>
				<p>GOSUB: This is another program flow command, but one which causes a temporary
					jump in program flow. The program jumps to a subroutine and then returns back to
					where it came from upon the RETURN command. The GOSUB routines in FTBALL are at
					Line 4100, 4200 and 4300, which are part of the KEEP SCORE subroutine, so it
					makes sense that they are called periodically as interruptions in the
					program.</p>
				<p>LET: This assignment statement allows for <q>LET x=x+1</q> rather than the more
					standard (then and now) x=x+1 because the LET made more sense to novices (Kurtz
					1981, 524). The similar appearance of the assignment statement and the equals
					statement was confusing to novice programmers (both then and now).</p>
				<p>FOR: This term came from ALGOL though the three loop-controlling values (initial,
					final, step) came from FORTRAN. Kemeny and Kurtz borrowed “the more natural
					testing for loop completion <emph>before</emph> executing the body of the loop”
					from ALGOL (Kurtz 1981, 521).</p>
				<p>NEXT: This command is paired with FOR and used for stepping through a loop.</p>
				<p>IF/THEN: This is a conditional statement common in programming languages then and
					now. There was no ELSE statement at the time; the ELSE is implied and you can
					follow the flow — if the flow isn’t stopped by any of the IFs, then it lands on
					the next statement (see FTBALL Lines 190 and 191). Conditional statements are so
					fundamental to programming that we see them first in Lovelace, the ENIAC allowed
					for such jumps, and they’re in FORTRAN as well. But FORTRAN at the time had
					3-way branching (IF-THEN-ELSE) and BASIC’s was simplified to remove the
					ELSE.</p>
				<p>RND: This function provides a number between 0 and 1, not inclusive, to
					facilitate random chance in a simulation. As Kemeny and Kurtz explain, “An
					important use of computers is the imitation of a process from real life. This is
					known as a simulation. Since such processes often depend on the outcome of
					chance events, a key tool is the simulation of random events” (Kemeny and Kurtz,
						<title rend="italic">Basic Programming</title>, p. 65). RND was one of ten
					original functions provided with BASIC (Kemeny 1981, p. 524). It required an
					argument, even a dummy one, an issue which they fixed later.</p>
				<p>INT: This function turns a decimal number argument into an integer. Originally,
					it truncated toward zero — just cut off any number after the decimal. It was
					designed to conform to the floor function in the third edition of BASIC. INT is
					one of the original 10 functions of BASIC.</p>
				<p>STOP: This is the final statement of the main program flow.</p>
				<p>END: Every BASIC program ended with this statement.</p>
				<p>The main game loop of the FTBALL program begins at line 360, which increments the
					number of plays in the game (variable T) and either sends the program flow to
					the various possible plays (1-7, in variable Z) or to the end game sequence
					(lines 375-378, the odd-numbered line numbers for which suggest that Kemeny
					added them later in his composing process). The plays, result of play, and other
					possibilities come after that, with GOTO and GOSUB used to direct program flow
					to those possibilities based on user input. The title to the program is in a REM
					(Remark) line and user is greeted with a series of print statements to initiate
					the game (the last PRINT statement simply prints a blank line, and being
					numbered 45 suggests that it was added later for aesthetic reasons):</p>
				<eg lang="code-general">
					<![CDATA[
0 REM  *  FTBALL  *
10 PRINT "THIS IS DARTMOUTH CHAMPIONSHIP
		FOOTBALL."
20 PRINT "YOU WILL QUARTERBACK DARTMOUTH. CALL PLAYS
		AS FOLLOWS:"
30 PRINT "1 = SIMPLE RUN; 2 = TRICKY RUN; 3 = SHORT
		PASS;"
40 PRINT "4 = LONG PASS; 5 = PUNT; 6 = QUICK KICK;' 7
		= PLACE KICK."
45 PRINT]]>
				</eg>
				<p>In this initial version, there was no option to play for another team — users had
					to play for Dartmouth. These numbered plays refer to actual football plays and
					so a user familiar with football wouldn’t necessarily need a description in
					order to play. Even those unfamiliar with the specific plays could cycle through
					them just by entering the corresponding number.</p>
				<p>Next, the program initializes three variables that will come into play in the
					game:</p>
				<eg lang="code-general">
					<![CDATA[
50 LET T = 0
60 LET S(0) = 0
70 LET S(2) = 0]]>
				</eg>
				<p>Other variables that are relevant to the play are set elsewhere:</p>
				<p><hi rend="monospace">Y</hi> keeps track of yardage on the plays</p>
				<p><hi rend="monospace">F</hi> marks whether or not a play has failed (e.g., a
					fumble or interception)</p>
				<p><hi rend="monospace">X</hi> is the yardage position on the field (Princeton goal
					is X=100; Dartmouth goal is X=0)</p>
				<p><hi rend="monospace">Z</hi> is the play, according to the key revealed at the
					game’s beginning (1-7)</p>
				<p><hi rend="monospace">T</hi> represents how many plays have occurred in the game.
					The game has at least 50 plays, and each play beyond that has a 20% chance of
					ending the game.</p>
				<p><hi rend="monospace">D</hi> keeps track of which down the offensive team is
					on</p>
				<p>The program uses the same code for plays no matter if Princeton or Dartmouth are
					on offense, but it marks the distinction between the two with the variable <hi
						rend="monospace">P</hi>: if <hi rend="monospace">P= -1</hi> Dartmouth is on
					offense and if <hi rend="monospace">P=1</hi> Princeton is on offense. The user
					plays Dartmouth and calls the plays when they are on offense using the seven
					options offered at the start of the game. The block of code beginning with <code
						lang="unspecified">2680 REM PRINCETON OFFENSE</code> begins the logic of the
					computer opponent, or game AI. Princeton’s choice of play on offense is governed
					by RND functions, which down Princeton is on, and how many yards to go. Kemeny
					could have had Princeton just randomly select a play 1-7, but this (somewhat
					dizzying block) of code provides a little strategy for the computer opponent,
					making the game more realistic.</p>
				<p>The code allots space for failures on plays such as interceptions and fumbles,
					which are marked with the variable F. Some aspects of the game are not
					simulated. For instance, the kickoff return results in the opposing team getting
					the ball on their 20 yard line, as if they had taken a knee upon receiving an
					average kickoff. The variable <hi rend="monospace">T</hi> counts the plays in
					the game up to 50, at which point the game ends or has an 80% chance of
					continuing. <hi rend="monospace">S(0)</hi> is Princeton’s score and <hi
						rend="monospace">S(2)</hi> is Dartmouth’s score; these are arrays that store
					values based on the results of plays. They are updated in the <hi
						rend="monospace">LINE 4000-4220</hi> block and are printed at <hi
						rend="monospace">LINE 4200</hi> and in the end game sequence. The <hi
						rend="monospace">GOSUB</hi> routine is one way the program flow gets to the
					score code block, and then the <hi rend="monospace">RETURN</hi> takes the
					program back to where it left off:</p>
				<eg lang="code-general">
					<![CDATA[
4200 PRINT "SCORE:   " S(2); "TO   " S(0)
4210 PRINT
4220 RETURN]]>
				</eg>
				<p>The code for FTBALL is simple, but it’s difficult to read for a few different
					reasons, some of which were due to the design of BASIC at this time. Different
					functions for the plays are called by GOTOs and line numbers rather than
					function names, so you can’t tell where the program is going unless you go to
					that line and figure it out. The line numbers clutter up the visual of the code,
					and only the line numbers for lines that are called by the program through GOTOs
					or GOSUBs actually provide information. The GOTOs and GOSUBs in this version of
					FTBALL do indeed result in some <q>spaghetti code</q> in that different plays
					and results will jump around to a half-dozen arbitrary lines before resolving.
					(The later version in Ahl does away with some of this jumping.) The variables
					are single letters, which makes them difficult to understand what they
					represent. And in debugging, it is much more difficult to search for Y than
					Yardage, especially using the tools in a modern-day editor. There are simple
					remarks to call out different parts of the program, but no extended comments to
					explain what it’s doing.</p>
				<p>The inscrutable code of FTBALL gestures at an inherent tension in BASIC programs
					of its time: while the program is written in the most famously accessible
					language in history, certainly the most accessible language of the mid-1960s,
					FTBALL was still only effectively accessible to a small group of people.
					Dartmouth was all male at the time and rather exclusive; the lab was very open
					but it appears that women only entered as girlfriends or housemothers. There was
					some economic diversity among students who worked on the project, but little
					apparent ethnic or racial diversity. (Kemeny’s successful efforts to open
					Dartmouth up to women and to recruit Native students happened after this, when
					he was the college’s president.) FTBALL drew on knowledge of a very popular
					American sport not previously associated with computing culture, but it was
					still a very masculine one. The math-influenced naming of variables and lack of
					comments made the code hard to read, especially for anyone coming from other
					academic traditions. Yet, within the constraints of an exclusive Ivy League
					institution, Kemeny and Kurtz designed a novice-oriented programming language
					and licensed it so that it could scale beyond Dartmouth’s high, ivy-covered
					walls. And it did, through time-sharing, various dialects of BASIC, and the many
					versions of FTBALL that circulated through books and early networks. Put another
					way, FTBALL and BASIC were radically inclusive at the same time that they were
					also products of their time.</p>
				<p>So, is FTBALL bad code? No, not from the perspective of programming-for-all and
					the original design for BASIC. BASIC was simple enough that Kemeny was able to
					write a functional and fun game on a Sunday to commemorate a local football
					triumph. The game could run on the hardware Dartmouth had available in 1965 and
					it appealed to Dartmouth undergraduates, the main audience for FTBALL and for
					BASIC itself. It inspired a number of versions in later versions of BASIC and
					helped to set the stage for other computer games, including more popular
					versions of football games such as <hi rend="italic">John Madden Football</hi>.
					These various iterations FTBALL circulated along with BASIC in the 1960s-1980s
					and helped to make computing more accessible and fun.</p>
			</div>
			<div type="appendix">
				<head>Appendix: FTBALL*** John Kemeny, Dartmouth College, 1965 </head>
				<eg lang="code-general"><![CDATA[
0 REM  *  FTBALL  *
10 PRINT "THIS IS DARTMOUTH CHAMPIONSHIP FOOTBALL."
20 PRINT "YOU WILL QUARTERBACK DARTMOUTH. CALL PLAYS AS FOLLOWS:"
30 PRINT "1 = SIMPLE RUN; 2 = TRICKY RUN; 3 = SHORT PASS;"
40 PRINT "4 = LONG PASS; 5 = PUNT; 6 = QUICK KICK;' 7 = PLACE KICK."
45 PRINT
50 LET T = 0
60 LET S(0) = 0
70 LET S(2) = 0
100 PRINT "TOSS OF COIN. (TYPE A NO. FROM 1 TO 300)";
120 INPUT Z1
140 FOR I = 1 TO Z1
160 LET X = RND(X)
180 NEXT I
190 IF RND(Z) &gt; 1/2 THEN 195
191 PRINT "PRINCETON WON THE TOSS"
193 GOTO 2180
195 PRINT "DARTMOUTH WON THE TOSS"
200 PRINT "DARTMOUTH BALL ON ITS OWN 20."
220 LET P = 1
240 LET X = 20
260 LET X1 = 20
280 LET D = 1
300 GOTO 2300
320 PRINT "NEXT PLAY";
340 INPUT Z
360 LET R = RND(Z)
362 LET R = R*(.97+P*.03)
370 LET T = T+1
372 IF T &lt; 50 THEN 380
374 IF RND(Z) &gt; .2 THEN 380
375 PRINT
376 PRINT "END OF GAME ***"
377 PRINT "FINAL SCORE:   DARTMOUTH" S(2); "PRINCETON" S(0)
378 STOP
380 LET R1 = RND(Z)
400 LET F = 0
420 IF Z &gt; 4 THEN 520
440 IF Z = 1 THEN 620
460 IF Z = 2 THEN 700
470 PRINT "PASS PLAY"
480 IF Z = 3 THEN 820
500 GOTO 1140
520 REM PUNT
540 LET Y = INT(100*(R-.5)^3+35)
545 IF Z = 7 THEN 5000
550 IF D = 4 THEN 560
555 LET Y = INT(Y*1.3)
560 PRINT "PUNT GOOD FOR" Y; "YARDS"
562 IF D&lt;4 THEN 580
564 LET Y1 = INT(R1^2*20)+(1-P)*INT(R^2*30)
566 PRINT "RUN BACK FOR " Y1; "YARDS"
568 LET Y = Y-Y1
580 LET F = -1
600 GOTO 1480
620 REM SIMPLE RUN
630 PRINT "RUNNING PLAY"
640 LET Y = INT(24*(R-.5)^3+3)
660 IF R1 &lt; .05 THEN 760
680 GOTO 1260
700 REM TRICKY RUN
710 PRINT "RUNNING PLAY"
720 LET Y = INT(20*R-5)
740 IF R1 &gt; .1 THEN 1260
760 LET F = -1
780 PRINT "*** FUMBLE AFTER ";
800 GOTO 1260
820 REM SHORT PASS
840 LET Y = INT(60*(R1-.5)^3+8)
860 IF R &lt; .05 THEN 960
880 IF R &lt; .15 THEN 1080
900 IF R &lt; .55 THEN 1020
920 PRINT "COMPLETE.   ";
940 GOTO 1260
960 PRINT "INTERCEPTED.   "
980 LET F = -1
1000 GOTO 1480
1020 PRINT "INCOMPLETE.   ";
1040 LET Y = 0
1060 GOTO 1260
1080 PRINT "PASSER TACKLED.   ";
1100 LET Y = - INT(10*R1)
1120 GOTO 1260
1140 REM LONG PASS
1160 LET Y = INT(160*(R1-.5)^3+30)
1180 IF R &lt; .1 THEN 960
1200 IF R &lt; .25 THEN 1080
1220 IF R &lt; .70 THEN 1020
1240 GOTO 920
1260 REM RESULT OF PLAY
1280 LET X2 = X + P*Y
1300 IF X2 &gt;= 100 THEN 1640
1320 IF X2 &lt;= 0 THEN 2380
1340 IF Y &lt; 0 THEN 1420
1360 IF Y = 0 THEN 1460
1380 PRINT "GAIN OF " Y "YARDS"
1400 GOTO 1480
1420 PRINT "LOSS OF " -Y; "YARDS"
1440 GOTO 1480
1460 PRINT "NO GAIN"
1480 LET X = X + P*Y
1500 IF X &lt;= 0 THEN 2380
1520 IF X &gt; 50 THEN 1580
1540 PRINT "BALL ON DARTMOUTH " X; "YARD LINE."
1560 GOTO 1940
1580 IF X &gt;=  100 THEN 1640
1600 PRINT "BALL ON PRINCETON " 100-X ; "YARD LINE."
1620 GOTO 1940
1640 IF P &lt; 0 THEN 1780
1660 IF F &lt; 0 THEN 1740
1680 PRINT "TOUCHDOWN***"
1700 LET P = -1
1710 GOSUB 4300
1720 GOTO 2180
1740 PRINT "TOUCHBACK FOR PRINCETON***"
1760 GOTO 2180
1780 IF F &lt; 0 THEN 1900
1800 PRINT "SAFETY***"
1810 GOSUB 4100
1820 PRINT "DARTMOUTH GETS BALL ON ITS OWN 40."
1840 LET X = 40
1860 LET P = 1
1880 GOTO 2220
1900 PRINT "TOUCHDOWN DARTMOUTH ***"
1910 GOSUB 4300
1920 GOTO 2180
1940 LET D = D+1
1960 IF F &gt;= 0 THEN 2120
1980 IF P &gt; 0 THEN 2060
2000 PRINT "DARTMOUTH'S BALL"
2020 LET P = 1
2040 GOTO 2220
2060 PRINT "PRINCETON'S BALL"
2080 GOTO 2210
2120 IF P*(X-X1)&gt;=10 THEN 2220
2140 IF D &lt; 5 THEN 2300
2150 IF P&lt;0 THEN 2000
2160 GOTO 2060
2180 LET X = 80
2200 PRINT "PRINCETON BALL ON ITS OWN 20."
2210 LET P = -1
2220 LET D = 1
2240 PRINT "FIRST DOWN***"
2242 IF P &lt; 0 THEN 2250
2244 IF X &lt; 90 THEN 2260
2246 LET X1 = 90
2248 GOTO 2320
2250 IF X &gt; 10 THEN 2260
2252 LET X1 = 10
2254 GOTO 2320
2260 LET X1= X
2280 GOTO 2320
2300 PRINT "DOWN " D; "AND " 10 + P*(X1-X); "YARDS TO GO."
2320 PRINT
2340 IF P &gt; 0 THEN 320
2360 GOTO 2680
2380 IF F &lt; 0 THEN 2580
2400 IF P &gt; 0 THEN 2480
2420 PRINT "TOUCHDOWN***"
2440 LET P = 1
2450 GOSUB 4300
2460 GOTO 200
2480 PRINT "SAFETY***"
2490 GOSUB 4100
2500 PRINT "PRINCETON GETS BALL ON ITS OWN 40."
2520 LET X = 60
2540 LET P = -1
2560 GOTO 2220
2580 IF P &gt; 0 THEN 2640
2600 PRINT "TOUCHBACK FOR DARTMOUTH."
2620 GOTO 200
2640 PRINT "TOUCHDOWN PRINCETON ***"
2650 GOSUB 4300
2660 GOTO 200
2680 REM PRINCETON OFFENSE
2700 LET P = -1
2720 IF D &gt; 1 THEN 2840
2740 IF RND(Z) &gt; 1/3 THEN 2800
2760 LET Z = 3
2780 GOTO 3120
2800 LET Z = 1
2820 GOTO 3120
2840 IF D &lt; 4 THEN 2920
2860 IF X &lt;= 30 THEN 2910
2880 LET Z = 5
2900 GOTO 3120
2910 IF 10 + X -X1 &lt; 3 THEN 2740
2912 LET Z = 7
2914 GOTO 3120
2920 IF 10+X-X1 &lt; 5 THEN 2740
2940 IF X &gt; X1 THEN 3060
2960 IF RND(Z) &gt; 1/2 THEN 3020
2980 LET Z = 2
3000 GOTO 3120
3020 LET Z = 4
3040 GOTO 3120
3060 IF RND(Z) &gt; 1/4 THEN 3100
3080 GOTO 2980
3100 GOTO 3020
3120 GOTO 360
4000 REM KEEP SCORE
4100 LET S(1-P) = S(1-P)+2
4200 PRINT "SCORE:   " S(2); "TO   " S(0)
4210 PRINT
4220 RETURN
4300 IF RND(Z) &gt; .8 THEN 4350
4310 PRINT "KICK IS GOOD"
4320 LET S(1-P) = S(1-P)+7
4330 GOTO 4200
4350 PRINT "KICK IS OFF TO THE SIDE"
4360 LET S(1-P) = S(1-P)+6
4370 GOTO 4200
5000 REM FIELD GOAL
5001 PRINT "PLACE KICK"
5005 LET F = -1
5006 IF R &gt; .5 THEN 5010
5007 PRINT "KICK IS BLOCKED***"
5008 LET Y = -5
5009 GOTO 1480
5010 IF P &lt; 0 THEN 5200
5020 IF X+Y &gt;= 110 THEN 5100
5030 IF X + Y &lt; 80 THEN 5060
5040 PRINT "KICK IS OFF TO THE SIDE."
5050 GOTO 1740
5060 PRINT "KICK IS SHORT."
5070 GOTO 1480
5100 PRINT "FIELD GOAL ***"
5110 LET S(2) = S(2)+3
5120 GOSUB 4200
5130 GOTO 2180
5200 IF X-Y &lt;= -10 THEN 5300
5210 IF X-Y &gt; 20 THEN 5060
5220 PRINT "KICK IS OFF TO THE SIDE."
5230 GOTO 2600
5300 PRINT "FIELD GOAL ***"
5310 LET S(0) = S(0)+3
5320 GOSUB 4200
5330 GOTO 200
9999 END]]></eg>
			</div>
		</body>
		<back>
			<listBibl>
				<bibl xml:id="ahl1978" label="Ahl 1978">Ahl, D 1978, <title rend="italic">BASIC
						Computer Games</title>, Creative Computing. <ref
						target="https://www.atariarchives.org/basicgames/index.php"
						>https://www.atariarchives.org/basicgames/index.php</ref>
				</bibl>
				<bibl xml:id="afips1974"
					label="American Federation of Information Processing Societies 1974">American
					Federation of Information Processing Societies, 1974, <title rend="italic"
						>History of Computing Project: Dartmouth Timeshare System, National Computer
						Conference Pioneer Day Session</title>.</bibl>
				<bibl xml:id="anderson1983" label="Anderson 1983">Anderson, J 1983, ‘Who Really
					Invented the Computer Game?’, <title rend="italic">Creative Computing</title>,
					vol. 1, no. 1, p. 8.</bibl>
				<bibl xml:id="brand1972" label="Brand 1972">Brand, S 1972, ‘Spacewar: Fanatic Life
					and Symbolic Death Among the Computer Bums’, <title rend="italic">Rolling
						Stone</title>, pp. 50–58.</bibl>
				<bibl xml:id="campion2001" label="Campion 2001">Campion, NR 2001, ‘True Basic: A
					Sketch of John Kemeny’, <title rend="italic">Dartmouth Alumni Magazine</title>,
					viewed 24 July 2021, ;<ref
						target="https://math.dartmouth.edu/news-resources/history/kemeny-history/TBasic.pdf"
						>https://math.dartmouth.edu/news-resources/history/kemeny-history/TBasic.pdf</ref>;.</bibl>
				<bibl xml:id="copeland_etal2016" label="Copeland and Long 2016">Copeland, J and
					Long, J 2016, ‘Restoring the first recording of computer music’, <title
						rend="italic">British Library Sound and Vision blog</title>, 13
					September.</bibl>
				<bibl xml:id="dartmouth" label="Darmouth College">Dartmouth College, n.d., <title
						rend="italic">The Dartmouth Computing Timeline: The 1960s</title>, ITS
					Tools: The Dartmouth Computing Timeline.</bibl>
				<bibl xml:id="dijkstra1968" label="Dijkstra 1968">Dijkstra, E 1968, ‘Go To Statement
					Considered Harmful’, <title rend="italic">Communications of the ACM</title>,
					vol. 11, no. 3, pp. 147–8.</bibl>
				<bibl xml:id="ensmenger2012" label="Ensmenger 2012">Ensmenger, N 2012, ‘Is chess the
					drosophila of artificial intelligence? A social history of an algorithm’, <title
						rend="italic">Social Studies of Science</title>, vol. 42, no. 1, pp.
					5–30.</bibl>
				<bibl xml:id="foran2008" label="Foran 2008">Foran, M 2008, ‘One Nation under Madden:
					How the Madden Video Game Franchise Became Bigger than John Madden’, <title
						rend="italic">Nielson.com</title>.</bibl>
				<bibl xml:id="forsythe1959" label="Forsythe 1959">Forsythe, G 1959, ‘The Role of
					Numerical Analysis in an Undergraduate Program’, <title rend="italic">The
						American Mathematical Monthly</title>, vol. 66, no. 8, pp. 651–662.</bibl>
				<bibl xml:id="ge2015" label="GE Reports Staff 2015">GE Reports staff, 2015, ‘It’s
					BASIC: Arnold Spielberg and the Birth of Personal Computing’, <title
						rend="italic">GE Reports</title>, viewed 24 July 2021, ;<ref
						target="https://web.archive.org/web/20150503110958/http:/www.gereports.com/post/117791167040/its-basic-arnold-spielberg-and-the-birth-of"
						>https://web.archive.org/web/20150503110958/http:/www.gereports.com/post/117791167040/its-basic-arnold-spielberg-and-the-birth-of</ref>;.</bibl>
				<bibl xml:id="kemeny_etal1967a" label="Kemeny and Kurtz 1967 (a)">Kemeny, J and
					Kurtz, T 1967, <title rend="italic">The Dartmouth Time-Sharing Computing System
						Final Report</title>, NSF Grant GE-3864, June, Course Content Improvement
					Program, Dartmouth College, Dartmouth, NH.</bibl>
				<bibl xml:id="kemeny_etal1968" label="Kemeny and Kurtz 1968">Kemeny, J and Kurtz, T
					1968, ‘Dartmouth Time-Sharing’, <title rend="italic">Science</title>, pp.
					223–228.</bibl>
				<bibl xml:id="kemeny_etal1967b" label="Kemeny and Kurtz 1976 (b)">Kemeny, J and
					Kurtz, T 1967, <title rend="italic">Basic Programming</title>, Second Edition,
					John Wiley and Sons, New York.</bibl>
				<bibl xml:id="kurtz1981a" label="Kurtz 1981 (a)">Kurtz, TE 1981, ‘BASIC Session’, in
					R Wexelblat (ed.), <title rend="italic">History of Programming
					Languages</title>, ACM Monograph Series, Academic Press, New York, NY, pp.
					515–549.</bibl>
				<bibl xml:id="kurtz2017" label="Kurtz 2017">Kurtz, T 2017, <title rend="italic"
						>Grammatical Simplications in BASIC</title> [Memo to Annette Vee]</bibl>
				<bibl xml:id="kurtz1981b" label="Kurtz 1981 (b)">Kurtz, TE 1981, ‘BASIC Session’, in
					R Wexelblat (ed.), <title rend="italic">History of Programming
					Languages</title>, ACM Monograph Series, Academic Press, New York, NY, pp.
					515–549.</bibl>
				<bibl xml:id="landau2020" label="Landau 2020">Landau, E 2020, <title rend="quotes"
						>Tech Confronts Its Use of the Labels <q>Master</q> and
					<q>Slave</q></title>, <title rend="italic">Wired</title>, viewed 24 July 2021,
						;<ref
						target="https://www.wired.com/story/tech-confronts-use-labels-master-slave/"
						>https://www.wired.com/story/tech-confronts-use-labels-master-slave/</ref>;.</bibl>
				<bibl xml:id="marino2020" label="Marino 2020">Marino, Mark, 2020. <title
						rend="italic">Critical Code Studies</title>. MIT Press.</bibl>
				<bibl xml:id="montfort_etal2014" label="Montfort et al 2014">Montfort, N, Baudoin,
					P, Bell, J, Bogost, I, Douglass, J, Marino, MC, Mateas, M, Reas, C, Sample, M
					and Vawter, N 2014, <title rend="italic">10 PRINT CHR$(205.5+RND(1)); : GOTO
						10</title>, MIT Press, Cambridge, MA.</bibl>
				<bibl xml:id="murray_etal2014" label="Murray and Rockmore 2014">Murray, M and
					Rockmore, D (dir.) 2014, <title rend="italic">Birth of BASIC</title>, Dartmouth
					College, viewed 24 July 2021, ;<ref
						target="https://www.youtube.com/watch?v=WYPNjSoDrqw"
						>https://www.youtube.com/watch?v=WYPNjSoDrqw</ref>;.</bibl>
				<bibl xml:id="rankin2018" label="Rankin 2018">Rankin, Joy, 2018. <title
						rend="italic">A People's History of Computing in the United States</title>.
					Harvard University Press.</bibl>
				<bibl xml:id="wardripfruin2009" label="Wardrip-Fruin 2009">Wardrip-Fruin, N., 2009.
						<title rend="italic">Expressive Processing: Digital Fictions, Computer
						Games, and Software Studies</title>. MIT Press.</bibl>
			</listBibl>

		</back>
	</text>
</TEI>
