<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?>
<?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dhq="http://www.digitalhumanities.org/ns/dhq">
    <teiHeader>
        <fileDesc>
            <titleStmt>

                <title type="article">A review of Noah Wardrip-Fruin’s <title rend="italic">Expressive Processing: Digital Fictions, Computer Games, and Software Studies</title></title>
                <dhq:authorInfo>

                    <dhq:author_name>Doug <dhq:family>Reside</dhq:family></dhq:author_name>
                    <dhq:affiliation>University of Maryland, College Park</dhq:affiliation>
                    <email>dreside@umd.edu</email>
                    <dhq:bio><p>Doug Reside is associate director of the Maryland Institute for
                        Technology in the Humanities (MITH) at the University of Maryland in
                        College Park.  He holds a Ph.D. in English from the University of
                        Kentucky and undergraduate degrees in English and Computer Science
                        from Truman State University.  His current projects include the Open
                        Annotation Collaboration, and a book on the technologies that produce
                        musical theatre.</p></dhq:bio>
                </dhq:authorInfo>
            </titleStmt>
            <publicationStmt>

                <idno type="DHQarticle-id">000085</idno>
                <idno type="volume">004</idno>
                <idno type="issue">2</idno>
                <date when="2010-09-01">1 September 2010</date>
                <dhq:articleType>article</dhq:articleType>
                <availability><cc:License rdf:about="http://creativecommons.org/licenses/by-nc-nd/2.5/"/></availability>
            </publicationStmt>
            
            <sourceDesc>
                <p>This is the source</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <classDecl>
                <taxonomy xml:id="dhq_keywords">
                    <bibl>DHQ classification scheme; full list available at <ref target="http://www.digitalhumanities.org/dhq/taxonomy.xml">http://www.digitalhumanities.org/dhq/taxonomy.xml</ref></bibl>
                </taxonomy>
                <taxonomy xml:id="authorial_keywords">
                    <bibl>Keywords supplied by author; no controlled vocabulary</bibl>
                </taxonomy>
            </classDecl>
        </encodingDesc>
        <profileDesc>
            <langUsage>
                <language ident="en"/>
            </langUsage>
            <textClass>
                <keywords scheme="#dhq_keywords">
                    <!-- Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors -->
                    <list type="simple">
                        <item></item>
                    </list>
                </keywords>
                <keywords scheme="#authorial_keywords">
                    <!-- Authors may include one or more keywords of their choice -->
                    <list type="simple">
                        <item></item>
                    </list>
                </keywords>
            </textClass>
        </profileDesc>
        <revisionDesc>
            
            <change when="2010-05-10" who="Alyssa">encoded</change>
        </revisionDesc>
    </teiHeader>

    <text>
        <front>
            <dhq:abstract>
                <p>The need for greater software literacy is a pressing problem, but one
                    still not universally acknowledged even among those working in new
                    media and digital humanities.  In <title rend="italic">Expressive Processing</title>, Noah
                    Wardrip-Fruin makes a compelling case that software studies as a field
                    is not only an interesting avenue of research for new media
                    specialists but also should increasingly be a basic activity of
                    educated citizens in a 21st century democracy.</p>
            </dhq:abstract>
            <dhq:teaser>
                <p>Wardrip-Fruin's <title rend="italic">Expressive Processing</title> is an clear and provocative call
                    for universal software literacy.</p>
            </dhq:teaser>
        </front>
        <body>
            <head>A review by Doug Reside of Noah Wardrip-Fruin's new book:
                <title rend="italic">Expressive Processing: Digital Fictions, Computer Games, and Software 
                Studies</title>
                MIT Press, 2009
            </head>
            <p>Although Noah Wardrip-Fruin’s <title rend="italic">Expressive Processing: Digital Fictions, Computer Games, and Software Studies</title> is probably best known at present for the author’s attempt to provoke a radically open form of peer review by submitting portions of his manuscript to the blog Grand Text Auto in advance of the final submission to MIT Press, the most potentially transformative legacy of the book is in its compelling call for universal software literacy.  For those of us in the humanities who find ourselves constantly making the argument that a basic understanding of algorithmic thinking is an essential literacy, not just for scholars in the digital humanities (dishearteningly even this is not always a settled question), but for all educated citizens of the 21st century, Wardrip-Fruin has given us an arsenal of rhetorical firepower and a powerful set of examples for how one might teach algorithmic literacy across the curriculum without delving into the syntax of any particular programming language.</p>
            <p>This approach to studying software by looking not at the actual lines of C++, Lisp,
                or JavaScript code but at the general algorithm (abstracted to a level even above
                what computer scientists and programmers describe as pseudo-code) is what
                Wardrip-Fruin means by his titular phrase, <quote rend="inline">Expressive
                Processing</quote> — a phrase which he derives from the multifaceted nature of
                his method which looks both at the user experience (the <q>expression</q> of the
                algorithm) as well as at the <q>process</q> (the algorithm itself) that generated
                it.  Wardrip-Fruin builds upon the foundation laid by Lev Manovich, who, in his 2002
                book <title rend="italic">The Language of New Media</title>, suggested that the
                natural development of media studies in an age of <quote rend="inline">programmable
                media</quote> should be <quote rend="inline">software studies</quote> (a set of
                approaches which includes <quote rend="inline">expressive processing</quote> but
                also code studies which, in Wardrip-Fruin’s words, looks at <quote rend="inline">the specific text of code</quote> written by developers).</p>
            <p><title rend="italic">Expressive Processing</title> fulfills and extends the promise
                of Manovich’s ideas, putting the theory into practice through a set of case studies
                of the artificial intelligence engines of a dozen or so software programs that might
                be loosely called <q>games.</q>  That the first real example of a software studies
                approach comes out of game studies is both to be expected and (somewhat) regretted. 
                On one hand, games of the sort Wardrip-Fruin examines are a medium for storytelling
                and character creation, and as such are natural extensions of the work of previous
                literary and media studies scholars and thereby set up a convenient space for
                humanities scholars and teachers to consider the important cultural and technical
                issues raised by Wardrip-Fruin in an environment more familiar than, for instance,
                an analysis of the software that drives Walmart (one of Wardrip-Fruin’s suggestions
                for another work of software studies scholarship).  Unfortunately, like graphic
                novels and musical theater, the genre is still too easily dismissed as popular
                entertainment by too many of those who most need to hear Wardrip-Fruin’s arguments. 
                This is not really the fault of the book, but I do question the wisdom of selecting, as early as chapter 2, such an exceptionally <q>geeky</q> title as <title rend="italic">Star Wars: Knights of the Old Republic</title> to demonstrate a relatively common problem in massively multiplayer role-playing games.</p>
            <p>Even to sympathetic audiences, the transposition of the multimedia experience of a
                modern computer game to text can, almost inevitably, generate potentially confusing
                prose that spends as much time describing as it does analyzing; the small black and
                white screenshots do less to illustrate the author’s point than they do to highlight
                the limitations of the print monograph for scholarly discussion in the modern age. 
                For this reason, Wardrip-Fruin’s discussion of relatively simple, text-based
                programs (such as the opening chapter’s analysis of <title
                    rend="quotes">Eliza,</title> the famous electronic psychiatrist program, or the
                semi-randomized story generating program TaleSpin) are generally more compelling
                than his attempts to describe complicated, modern multimedia games like <title
                    rend="italic">Prince of Persia: The Sands of Time</title>. I fear these obstacles may cause some readers, already perhaps uncomfortable with games studies, to prematurely abort before reaching the real gold that shortly follows.</p>
            <p>Still, there truly is treasure buried in this land of geekdom, and not just a few
                nuggets, but enough to lay the foundation of an entirely new scholarly approach for
                the digital humanities. Like Nick Montfort and Ian Bogost’s work on Platform
                Studies, Wardrip-Fruin demonstrates by way of example a new way of reading new
                media.  If Manovich drew the map, Wardrip-Fruin has opened the mine, and what may be
                extracted will benefit not only those working in digital humanities or new media but
                scholars across the curriculum.  In the fifth and sixth chapters, Wardrip-Fruin
                makes a compelling case that software studies as a field is not only an interesting
                avenue of research for new media specialists but also should increasingly be a basic
                activity of educated citizens in a 21st century democracy.  Wardrip-Fruin eloquently
                illustrates how the contemporary human experience is, in large part, shaped by the
                algorithmic processes that drive our society, algorithms that determine, as
                Wardrip-Fruin observes, everything from what Amazon.com recommends that one buy next
                to whether one is included in a terrorist watch list.  To the degree that the sort
                of algorithmic literacy practiced by software studies is anything less than
                universal there will be, in the words of Ted Nelson whom Wardrip-Fruin quotes, a
                digital <q>priesthood</q> that rules over the rest of the populace with power that
                cannot be questioned or criticized.  The power of <title rend="italic">Expressive
                Processing</title> is that it not only eloquently restates the problems Nelson
                observed, but actually helps to solve it by offering up a truly readable generalist
                introduction to the field of artificial intelligence that could productively be
                assigned to both computer science and humanities students at both the undergraduate
                and graduate level. By explicating mostly inconsequential, but simple and open
                source, algorithmic processes such as <title rend="quotes">Eliza,</title>
                Wardrip-Fruin provides what he calls <quote rend="inline">legible examples</quote> from which the educated reader can reason by analogy to understand how larger, more powerful, and generally closed-source algorithmic processes function, and concomitantly, question them.</p>
            <p>It is on these points that I find myself citing this book most frequently.  The need
                for greater software literacy is a pressing problem for all of the reasons
                Wardrip-Fruin enumerates, but one still not universally acknowledged even among
                those working in new media and digital humanities.  In too many digital humanities
                projects, scholars simply hire programmers to do <emph>all</emph> of their technical
                work (from outlining technical specifications and project management to coding),
                rather than learn, at even the most abstract level, how the processes that generate
                the <q>expression</q> they desire operate.  Immediate consequences of this approach include rampant scope creep (because the effects changes to the <q>expression</q> have on the underlying <q>processes</q> are not well understood by the project director) and the tendency for projects to fade away after initial funding runs out.  (If a scholar does not have the technical ability to maintain her own work, it is in danger of vanishing when the tithe can no longer be paid to the <q>priest.</q>)  If even the community of Ph.D. holding, multi-lingual digital humanities scholars is not expected to understand the technical underpinnings of the work for which they are often the leader of record, the hope of a software literate populace seems very far away indeed.  The usual objections about lack of time express nothing so much as a lack of incentives, experienced as keenly by the assistant professor seeking tenure as by the English major just beginning his freshman year.   Until granting agencies, hiring and tenure committees, and peer review panels reject as unqualified anyone without demonstrated software literacy, we cannot hope for a world in which the citizenry are able to evaluate whether or not the risks of false positives in a particular terrorist watch list generator outweigh the potential for increased national security.</p>
            <p>At some level even the approach advocated in <title rend="italic">Expressive
            Possessing</title> allows too much room for the technically recalcitrant.  Although,
                for Wardrip-Fruin the particulars of variable names and code syntax are less
                important than a general understanding of how the algorithm works, it is not
                entirely clear how one comes to an understanding of the algorithm in one of
                Wardrip-Fruin’s <quote rend="inline">legible examples</quote> without the ability to
                actually read code (something Wardrip-Fruin clearly can do).  Of course, one can
                rely on others to do this first level interpretive work, but here the metaphor of
                the priest can be employed again, and arguably even more aptly than before.  Perhaps
                programming knowledge is not a prerequisite for reading a monograph that follows the
                expressive processing approach (indeed, this book proves that it is not), but it
                seems that it must be a prerequisite to write one.  Still, Wardrip-Fruin’s approach
                does seem well-suited for this transitional moment before widespread software
                literacy is achieved, and to the extent that expressive processing (the approach)
                and <title rend="italic">Expressive Processing</title> (the book) encourages greater literary among the scholarly community I cannot recommend both highly enough.</p>
        </body>
    </text>
</TEI>
