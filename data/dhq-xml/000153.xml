<?xml version="1.0" encoding="UTF-8"?><?oxygen RNGSchema="../../common/schema/DHQauthor-TEI.rng" type="xml"?><?oxygen SCHSchema="../../common/schema/dhqTEI-ready.sch"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:cc="http://web.resource.org/cc/"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:dhq="http://www.digitalhumanities.org/ns/dhq">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <!-- Author should supply the title and personal information-->
            <title type="article">Criminal Code: Procedural Logic and Rhetorical Excess in
               Videogames</title>
            <dhq:authorInfo>
               <!-- Include a separate <dhq:authorInfo> element for each author -->
               <dhq:author_name>Mark L. <dhq:family>Sample</dhq:family>
               </dhq:author_name>
               <dhq:affiliation>George Mason University</dhq:affiliation>
               <email>msample1@gmu.edu</email>
               <dhq:bio>
                  <p>Mark Sample is an Associate Professor in the Department of English at George
                     Mason University, where teaches and researches contemporary literature and new
                     media. His most recent project is 10 PRINT CHR$(205.5+RND(1)); : GOTO 10 (MIT
                     Press, 2013), a collaboratively written book about creative computing, software
                     studies, and the Commodore 64. He can be contacted on Twitter as
                     @samplereality.</p>
               </dhq:bio>
            </dhq:authorInfo>
         </titleStmt>
         <publicationStmt>
            <publisher>Alliance of Digital Humanities Organizations</publisher>
            <publisher>Association of Computers and the Humanities</publisher>
            <!-- This information will be completed at publication -->
            <idno type="DHQarticle-id">000153</idno>
            <idno type="volume">007</idno>
            <idno type="issue">1</idno>
            <date when="2013-07-01">1 July 2013</date>
            <dhq:articleType>article</dhq:articleType>
            <availability>
               <cc:License rdf:about="https://creativecommons.org/licenses/by-nd/2.5/"/>
            </availability>
         </publicationStmt>

         <sourceDesc>
            <p>This is the source</p>
         </sourceDesc>
      </fileDesc>
      <encodingDesc>
         <classDecl>
            <taxonomy xml:id="dhq_keywords">
               <bibl>DHQ classification scheme; full list available at <ref
                     target="http://www.digitalhumanities.org/dhq/taxonomy.xml"
                     >http://www.digitalhumanities.org/dhq/taxonomy.xml</ref>
               </bibl>
            </taxonomy>
            <taxonomy xml:id="authorial_keywords">
               <bibl>Keywords supplied by author; no controlled vocabulary</bibl>
            </taxonomy>
         </classDecl>
      </encodingDesc>
      <profileDesc>
         <langUsage>
            <language ident="en"/>
         </langUsage>
         <textClass>
            <keywords scheme="#dhq_keywords">
               <!-- Authors may suggest one or more keywords from the DHQ keyword list, visible at http://www.digitalhumanities.org/dhq/taxonomy.xml; these may be supplemented or modified by DHQ editors -->
               <list type="simple">
                  <item/>
               </list>
            </keywords>
            <keywords scheme="#authorial_keywords">
               <!-- Authors may include one or more keywords of their choice -->
               <list type="simple">
                  <item/>
               </list>
            </keywords>
         </textClass>
      </profileDesc>
      <revisionDesc>
         <!-- Each change should include @who and @when as well as a brief note on what was done. -->
         <change when="2013-02-27" who="MCC">Encoded article</change>
      </revisionDesc>
   </teiHeader>

   <text xml:lang="en">
      <front>
         <dhq:abstract>
            <!-- Include a brief abstract of the article -->
            <p>
               <title rend="quotes">Criminal Code: Procedural Logic and Rhetorical Excess in
                  Videogames</title> explores the code of two videogames, suggesting that reading
               game code is a fruitful way to enrich our understanding of videogames and the culture
               they represent. In particular, I show how the code of the open source version of
                  <title rend="italic">SimCity</title> and the controversial first person shooter
                  <title rend="italic">JFK: Reloaded</title> reveals elements of the games
               unavailable to the player and unaccounted for by other critical readings of those
               games. </p>
         </dhq:abstract>
         <dhq:teaser>
            <!-- Include a brief teaser, no more than a phrase or a single sentence -->
            <p>What can code tell us about videogames? What can videogames tell us about culture?
               And what can culture tell us about code?</p>
         </dhq:teaser>
      </front>
      <body>
         <head>Criminal Code: Procedural Logic and Rhetorical Excess in Videogames</head>
         <div>
            <head>Introduction</head>
            <p>We understand games by playing them. Card games, board games, videogames — their
               idiosyncrasies and dynamics become clear not when we read the instructions, but when
               we play them. Play is, as Katie Salen and Eric Zimmerman describe it, <cit>
                  <quote rend="inline" source="#salen2004">free movement within a more rigid
                     structure</quote>
                  <ptr target="#salen2004" loc="304"/>
               </cit>. We bump up against this rigid structure — rules, boundaries, mechanics — and
               reveal the contours of the game, slowly uncovering what Lev Manovich calls its <cit>
                  <quote rend="inline" source="#manovich2001">hidden logic</quote>
                  <ptr target="#manovich2001" loc="222"/>
               </cit>. This is play. This is how we come to know games, by experiencing them. Like
               all cultural activities, however, games can be approached through means apart from
               the experience itself of playing them. Games can be played, but they can also be
               interpreted. The early years of videogames studies were defined by this tension. Were
               games mainly about rules, structure, and play? Or did games tell stories and contain
               allegories? Self-proclaimed ludologists argued for the former, while many others
               defended the latter. The debate played out in conferences, blogs, and scholarly
               journals such as <title rend="italic">Game Studies</title> and <title rend="italic"
                  >Electronic Book Review</title> (e.g. <ptr target="#eskelinen2001"/>, <ptr
                  target="#aarseth2004"/>, <ptr target="#jenkins2004"/>). In the past few years the
               debate has largely dissipated, with most scholars in the field recognizing that no
               single approach can adequately explore the cultural significance of videogames. Yet I
               want to advance an approach to videogames that, in light of this reconciliation,
               might at first appear to be retrograde, a reactionary doubling down on the position
               that videogames are texts. I don’t mean metaphorical texts, using that word
               haphazardly the way literary scholars like to describe everything as texts. I mean
               texts in a literal way, comprised of words, or at least, of numbers and letters. I am
               referring to the code of the game. Videogames are pieces of software, made of code,
               and I argue that thinking about game code as a signifying text is a fruitful way to
               enrich our understanding of videogames. To illustrate this methodology I will
               consider the code of two games — <title rend="italic">Micropolis</title> (2008),
               which is the open source version of the legendary simulation <title rend="italic"
                  >SimCity</title> (1994), and the notorious first-person shooter <title
                  rend="italic">JFK: Reloaded</title> (2004). In particular I will focus on an
               aspect of the games in which the signifying excess of code is palpable: the
               procedural logic of crime and the shock of history found in programmer comments in
               code.</p>
            <p>My insistence on the importance of code follows a recognition that for too long new
               media studies has suffered from the symptoms of what Nick Montfort calls screen
               essentialism <ptr target="#montfort2004"/>. Screen essentialism occurs when the
                  <quote rend="inline" source="#kirschenbaum2008">digital event on the
                  screen,</quote> as Matthew Kirschenbaum puts it, becomes the sole object of study
               at the expense of the underlying software, hardware, storage devices, and even
               non-digital inputs and outputs that make the digital screen event possible in the
               first place <ptr target="#kirschenbaum2008" loc="4"/>. One response to this
               essentialism is found in Katherine Hayles’ call for media-specific analysis of
               creative works. A media-specific analysis attends to a work’s materiality, which
               Hayles formulates as <cit>
                  <quote rend="inline" source="#hayles2004">the interplay between a text’s physical
                     characteristics and its signifying strategies</quote>
                  <ptr target="#hayles2004" loc="74"/>
               </cit>. A media-specific analysis is an important intervention into screen
               essentialism, but it privileges the manifestly present elements of media. What about
               digital works with characteristics beyond the physical — or at least, beyond the
               visible — that nonetheless influence how that work circulates within culture?</p>
            <p>Nick Montfort and Ian Bogost’s development of platform studies presents one answer to
               this question. Unlike typical screen-centric approaches to born-digital works,
               platform studies considers both the software and hardware of systems, exploring the
               relationship between these hidden foundations and the more visible creative and
               expressive acts that appear on the surface of the machine. Every platform is a
               composite of chips, circuits, controllers, software, storage devices, and so on. And
               each of these individual components offers affordances — capabilities that are both
               enabling and limiting. A platform studies approach reveals, for example, that the
               Atari VCS’s unique Television Interface Adapter constrained playfield graphics in a
               way that shaped the look and playability of games themselves, the Atari 2600
               adaptation of <title rend="italic">Pac-Man</title> being a dramatic example of this
               dynamic <ptr target="#montfort2009" loc="67–75"/>. Chips and other hardware
               constraints also affect what kind of software can be executed on a computer, making
               computer code a critical part of platform studies.<note> A common criticism of
                  platform studies is that the methodology is overly technologically deterministic:
                  the chip determines the code, the code determines the program, and the program
                  determines what its users do with it. Bogost and Montfort are staunchly opposed to
                  such <quote rend="inline" source="#bogost2009a">hard</quote> technological
                  determinism, arguing that in fact <cit>
                     <quote rend="inline" source="#bogost2009a">people make negotiations with
                        technologies as they develop cultural ideas and artifacts, and people
                        themselves create technologies in response to myriad social, cultural,
                        material, and historical issues</quote>
                     <ptr target="#bogost2009a" loc="2"/>
                  </cit>. Indeed, platform studies is deeply concerned with the historical and
                  cultural context of any platform. Consider any one of the five layers Bogost and
                  Montfort include in platform studies (platform, code, form and function,
                  interface, and reception and operation), and it’s clear that each layer is not
                  only dependent on the layers below, but also on the social context that presses in
                  from every side. Every platform is a product of its times, quite literally. And
                  every piece of software too is a historical document.</note> Without code, a
               computer is inoperable, inert. But the significance of code goes beyond its purely
               computational power. In a recent examination of the parallel configurations between
               the development of UNIX and changing race relations in 1960s America, Tara McPherson
               hones in on code as an especially relevant site of cultural engagement for scholars.
               Using the UNIX pipe command to dramatize the modularity found in many social fields
               since 1968 — including urban segregation and academic departments — McPherson
               demonstrates that code is deeply intertwined with culture. The difficulty is that
               with its emphasis on modularity and interfaces that distance the programmer from the
               kernel of the machine, <cit>
                  <quote rend="inline" source="#mcpherson2012">the structures of code work to
                     disavow these very connections</quote>
                  <ptr target="#mcpherson2012" loc="36"/>
               </cit>.</p>
            <p>Textual studies, with its awareness of the social and material history of texts,
               perhaps comes closest in traditional humanities scholarship to the spirit of both
               media-specific analysis and platform studies. The concerns of textual studies —
               attentiveness to physical forms, recognition that hands other than the author’s shape
               the text, an almost forensic desire to trace the history of marginalia, errata, and
               variants — have their analogs in emerging strains of new media studies. It should not
               be surprising, then, that I will revisit much earlier notions of what McGann calls
                  <quote rend="inline" source="#mcgann1991">the textual condition</quote> as I
               examine computer code in a gaming context <ptr target="#mcgann1991" loc="3"/>. The
               late German media theorist Friedrich Kittler has argued that, as Alexander Galloway
               phrases it, <cit>
                  <quote rend="inline" source="#galloway2006">code is the only language that does
                     what it says</quote>
                  <ptr target="#galloway2006" loc="5"/>
               </cit>. But my close reading of code insists that code not only does what it says, it
               says things it does not do. Staking out the territory of a field he calls critical
               code studies, Mark Marino describes code <cit>
                  <quote rend="inline" source="#marino2006">as a text, as a sign system</quote>
                  <ptr target="#marino2006"/>
               </cit>. Code may speak to a machine, but it also speaks to us. It is a rich textual
               object, layered with meaning. <quote rend="inline" source="#raley2006">Code may in a
                  general sense be opaque and legible only to specialists,</quote> as Rita Raley
               notes, <cit>
                  <quote rend="inline" source="#raley2006">…but it has been inscribed, programmed,
                     written. It is conditioned and concretely historical</quote>
                  <ptr target="#raley2006"/>
               </cit>. Here, then, are the two sides of code I will explore as I seek to understand
               these two videogames — <title rend="italic">Micropolis </title>and <title
                  rend="italic">JFK: Reloaded</title> — as extensions of our textual condition.
               First, code’s performative power, or what may be more accurately called the
               procedural power of code. Second, code’s evocative power, rife with gaps,
               idiosyncrasies, and suggestive traces of its historical context. Approaching code in
               this twofold fashion, it becomes clear that the more a programming language
               emphasizes human legibility, the greater the chance there’s some slippage in the code
               that is readable by the machine one way and readable by scholars and critics in
               another.</p>
         </div>
         <div>
            <head>Criminal Code in <title rend="italic">Micropolis</title>
            </head>
            <p>Consider the case of <title rend="italic">Micropolis</title>, the open-source version
               of <title rend="italic">SimCity </title>that was included on the Linux-based XO
               computers in the One Laptop per Child program. Designed by Will Wright, <title
                  rend="italic">SimCity </title>was released by Maxis in 1989 on the popular (though
               nearing the end of its life cycle) Commodore 64. It was the first of many popular Sim
               games, such as <title rend="italic">SimAnt </title>and <title rend="italic"
                  >SimFarm</title>, not to mention the enduring <title rend="italic">SimCity
               </title>series of games — that have been ported (the programming equivalent of
               translation) to dozens of platforms, from DOS to the iPad. The videogame behemoth
               Electronic Arts now owns the rights to the <title rend="italic">SimCity
               </title>brand, and in 2008, EA released the source code of the original game under a
               GNU GPL License — a General Public License that stresses the freedom of users to
               share and modify the program’s source code. EA prohibited any resulting branch of the
               game from using the <title rend="italic">SimCity</title> name. The developers, led by
               Don Hopkins — who had worked on the first Unix port of <title rend="italic"
                  >SimCity</title> in 1992 — called it <title rend="italic">Micropolis</title>,
               which was Wright’s original name for his city simulation <ptr target="#hopkins2007a"
               />.</p>
            <p>According to Hopkins, Will Wright was once asked by a journalist how much urban
               planning theory, demography, criminology, and sociology went into <title
                  rend="italic">SimCity.</title> Wright replied simply, <cit>
                  <quote rend="inline" source="#hopkins2007b">I just kind of optimized for game
                     play</quote>
                  <ptr target="#hopkins2007b"/>
               </cit>. Indeed, from the beginning, <title rend="italic">SimCity</title> was
               criticized for presenting a naïve vision of urban planning, if not an altogether
               egregious one <ptr target="#bleecker1995"/>, <ptr target="#friedman1995"/>. As
               recently as 2007, the legendary computer scientist Alan Kay called <title
                  rend="italic">SimCity</title> a <quote rend="inline" source="#kay2007"
                  >pernicious…black box,</quote> full of assumptions and <quote rend="inline"
                  source="#kay2007">somewhat arbitrary knowledge</quote> that cannot be questioned
               or challenged <ptr target="#kay2007"/>. Kay’s and others’ critiques of <title
                  rend="italic">SimCity </title>focus on what Ian Bogost calls the <quote
                  rend="inline" source="#bogost2009a">procedural rhetoric</quote> of the game. By
               procedural rhetoric, Bogost simply means the implicit or explicit argument a computer
               model makes. Rather than using words like a book, or images like a film, a game <cit>
                  <quote rend="inline" source="#bogost2009a">makes a claim about how something works
                     by modeling its processes</quote>
                  <ptr target="#bogost2009a"/>
               </cit>. In the case of <title rend="italic">SimCity</title>, I want to explore a
               particularly rich site of embedded procedural rhetoric — the procedural rhetoric of
               crime. </p>
            <p>In fact, Kay illustrates his point about the black box nature of <title rend="italic"
                  >SimCity</title> by describing how crime operates in the game. <title
                  rend="italic">SimCity</title>, Kay argues, <quote rend="inline" source="#kay2007"
                  >gets the players to discover that the way to counter rising crime is to put in
                  more police stations</quote>
               <ptr target="#kay2007"/>. Of all the possible options in the real world — increasing
               funding for education, reducing overcrowded housing, building mixed use developments,
               creating employment opportunities, and so on — it’s the presence of the police that
               lowers crime in <title rend="italic">SimCity</title>. This is the argument that game
               makes, its procedural rhetoric. Naïve though it may be, the game has staked out a
               position on urban planning from which it cannot deviate. It doesn’t take long for
               players to figure out the position. Indeed, the original manual itself tells the
               player that <quote rend="inline" source="#bremer1993">Police Departments lower the
                  crime rate in the surrounding area. This in turn raises property values</quote>
               <ptr target="#bremer1993" loc="5"/>. It’s one thing for the manual to propose a
               relationship between crime, property values, and law enforcement, but quite another
               for the player to see that relationship enacted within the simulation. Players have
               to get a feel for it on their own as they play the game. Recall Manovich’s comment
               about the hidden logic of a game. A player’s success in a simulation hinges upon
               discovering the algorithm underlying the game. But if the manual describes the model
               and players can discover it for themselves through gameplay, what’s the value of
               looking at the code of the game? What can the code reveal that playing the game
               cannot?</p>
            <p>To answer this question we must examine the code itself. Because the code for <title
                  rend="italic">Micropolis — SimCity</title>’s open source twin — is freely
               available, this close reading of code is feasible in a way that a similar reading of
               a commercial game is not.<note> Free software operates in a gift economy. Users and
                  software developers may be the immediate beneficiaries, but in a larger sense, the
                  broader public benefits, as free software dramatically reconfigures existing and
                  entrenched knowledge, cultural, and economic power structures <ptr
                     target="#kelty2008"/>. More to the point here, open software is a gift to
                  scholars who can bring their own disciplinary tools to the investigation of what
                  would otherwise be occult knowledge, accessible only to a privileged few
                  individuals.</note>To wit, below are lines 413–424 of span.cpp, one of the many
               sub-programs called by the core <title rend="italic">Micropolis </title>engine. It’s
               written in C++, a common middle-level programming language; Firefox is written in
               C++, for example, as well as Photoshop, and nearly every Microsoft product. By paying
               attention to variable names in span.cpp, even a non-programmer might be able to
               discern that this code scans the player’s city map and calculates a number of
               critical statistics: population density, the likelihood of fire, pollution, land
               value, and the function that drew Alan Kay’s attention to <title rend="italic"
                  >Micropolis</title>, a neighborhood’s crime rate.</p>
            <eg> 413 for (int x = 0; x &lt; WORLD_W; x += crimeRateMap.MAP_BLOCKSIZE) { 414 for (int
               y = 0; y &lt; WORLD_H; y += crimeRateMap.MAP_BLOCKSIZE) { 415 int z =
               landValueMap.worldGet(x, y); 416 if (z &gt; 0) { 417 ++numz; 418 z = 128 - z; 419 z
               += populationDensityMap.worldGet(x, y); 420 z = min(z, 300); 421 z -=
               policeStationMap.worldGet(x, y); 422 z = clamp(z, 0, 250); 423
               crimeRateMap.worldSet(x, y, (Byte)z); 424 totz += z; </eg>
            <p>The manual tells us what this code does. But what does it mean? In the most general
               sense, these lines generate information for game engine about the game’s own state.
               The first several lines provide the scan mechanism, as the existing crime rate map of
               the player’s city (crimeRateMap.MAP_BLOCKSIZE) is methodically checked along the X
               and Y axes. This process alone highlights the quantitative over qualitative nature of
               computing. The map — and therefore, crime rate — can never be understood by the
               computer holistically, absorbed and interpreted all at once as a player might see it.
               Instead, it is checked granularly, numerically, point by point. The computer sees the
               city as a grid of discrete spaces, even though cities certainly aren’t experienced
               that way by their occupants. The scan mechanism raises a question that we may never
               have thought to ask before, namely, what is it like to be a city from a computer’s
               perspective?</p>
            <p>The implications of understanding a cityscape as a dataset become clearer when other
               aspects of span.cpp are examined. In line 418, the crime rate variable Z starts off
               at a baseline of 128. This at first seems to be an arbitrary choice, but it is not
               random at all. The number 128 is (obviously) exactly half of 256, which is (less
               obviously) the highest 8-bit binary value (2^8) available on the original <title
                  rend="italic">SimCity </title>platform, the Commodore 64. Line 418 is a historical
               clue, providing a glimpse into the computers of the era. The heart of the Commodore
               64 was its MOS Technologies processor, the 8-bit 6502 chip. The 6502 is now legendary
               for its role in home computing in the 1980s. Released in 1975, the 6502 or some
               tweaked version of it powered the Atari VCS, the Apple I and Apple II, the Nintendo
               Entertainment System (NES), and of course, the Commodore 64 <ptr
                  target="#bogost2009a" loc="12"/>. By developing <title rend="italic"
                  >SimCity</title> as an 8-bit program tailored to the 6502 CPU (even though 16-bit
               computers and videogame consoles were beginning to arrive on the scene), Will Wright
               guaranteed that ports of the game would be compatible with the majority of home
               computers of the time. But why choose 128 as the baseline crime rate, rather than 0?
               From a baseline of 128 the crime rate can either go up or down; 128 allows the crime
               rate to fluctuate negatively or positively without having to deal with negative
               numbers. But the rate can only ever fluctuate within a predefined limit. Line 422
               makes sure of this, using the clamp function of C++ to define the ultimate range of Z
               (from 0 to 250). In effect, <title rend="italic">SimCity</title> specifies a maximum
               crime rate. Crime in <title rend="italic">SimCity </title>is, like the discrete
               coordinates of the city, a rigidly defined quantity. </p>
            <p>Immediately following the establishment of 128 as baseline in line 418, the land
               value variable (previously defined in line 415) is subtracted from Z, creating a
               direct causation between land value and the crime rate. This formula is complicated
               in the next line, as the population density is added to Z. Finally, with line 421,
               the number of police stations lowers Z. Track these additions and subtractions from
               Z, and it’s exactly as the manual explained: crime is a function of population
               density, land value, and police stations, and a strict function at that. But the code
               makes visible nuances that are absent from the manual’s pithy description of crime
               rates. For example, land that has no value — land that hasn’t been built upon or
               utilized in the player’s city — has no crime rate. This shows up in lines
               433–434:</p>
            <eg> } else { crimeRateMap.worldSet(x, y, 0); </eg>
            <p>Because of this strict algorithm, there is no chance of a neighborhood existing
               outside of this model. The algorithm is totalizing and deterministic, absolutely so.
               A populous neighborhood with little police presence can never be crime-free. Crime is
               endemic, epidemic. </p>
            <p>Land value is likewise reduced to set formula, seen in this equation in lines
               264–271:</p>
            <eg> if (landValueFlag) { /* LandValue Equation */ dis = 34 -
               getCityCenterDistance(worldX, worldY) / 2; dis = dis &lt;&lt;2; dis +=
               terrainDensityMap.get(x &gt;&gt;1, y &gt;&gt;1); dis -= pollutionDensityMap.get(x,
               y); if (crimeRateMap.get(x, y) &gt; 190) { dis -= 20; } </eg>
            <p>These lines stipulate that land value is a function of the property’s distance from
               the city center, the type of terrain, the nearby pollution, and the crime rate.
               Again, though, players will likely discover this algorithm for themselves, or else
               read about it in the manual, which spells out the formula, explicitly stating that <cit>
                  <quote rend="inline" source="#bremer1993">the land value of an area is based on
                     terrain, accessibility, pollution, and distance to downtown</quote>
                  <ptr target="#bremer1993"/>
               </cit>.</p>
         </div>
         <div>
            <head>Simulation Fever and a Textual Cure</head>
            <p>Beyond highlighting how the computer reads the city as a set of data points, looking
               at code of <title rend="italic">Micropolis </title>serves as exit point from the
               seemingly totalizing power of simulation, which is reinforced by both the manual and
               gameplay itself. Recall Sherry Turkle’s now classic work, <title rend="italic">Life
                  on the Screen</title>, about the relationship between identity formation and what
               we would now call social media. Turkle spends a great deal of time discussing what
               she calls the <quote rend="inline" source="#turkle1995">seduction of the
                  simulation</quote>
               <ptr target="#turkle1995" loc="71"/>. Turkle has in mind exactly the kind of
               simulation whose code appears here, the Maxis games such as <title rend="italic"
                  >SimCity</title>, <title rend="italic">SimLife</title>, and <title rend="italic"
                  >SimAnt </title>that were so popular 15 or so years ago as well as MUDs and MOOs,
               text-based precursors to virtual worlds like <title rend="italic">Second
               Life</title>. Turkle suggests that faced with engaging, immersive simulations,
               players can respond in several ways. On the one hand, players can surrender
               themselves totally to the simulation, accepting whatever processes are modeled
               within. Turkle calls this <quote rend="inline" source="#turkle1995">simulation
                  resignation.</quote> On the other hand, players can reject the world of the
               simulation entirely — what Turkle calls <quote rend="inline" source="#turkle1995"
                  >simulation denial.</quote> These are stark opposites, and our reaction to
               simulations obviously need not be entirely one or the other. Turkle proposes a third,
               ideal response: <quote rend="inline" source="#turkle1995">understanding the
                  assumptions that underlie simulation</quote> and demanding <quote rend="inline"
                  source="#turkle1995">greater transparency</quote> in simulations, whether they are
               popular videogames or real world planning simulations <ptr target="#turkle1995"
                  loc="71"/>. </p>
            <p> Years after <title rend="italic">Life on the Screen</title>, one would be
               hard-pressed to argue that simulations have become more transparent. If anything,
               they are more prevalent and yet more invisible, a situation Bogost diagnoses —
               riffing on Derrida — as simulation fever, a compulsion to render any and all real
               world processes as a simulation. Bogost explains that a simulation is <quote
                  rend="inline" source="#bogost2006">a representation of a source system via a less
                  complex system that informs the user’s understanding of the source system in a
                  subjective way</quote>
               <ptr target="#bogost2006" loc="98"/>. Just as the most detailed map can never match
               the territory it represents, so too is the simulation bound to be irreconcilably
               impoverished compared to the system it simulates. Moreover, note Bogost’s use of the
               word <quote rend="inline" source="#bogost2006">subjective,</quote> which suggests a
               kind of crack in the exterior of the simulation. Awareness of the subjective nature
               of simulations can expose what Bogost calls the simulation gap, his own version of
               Turkle’s third response to simulations. With every simulation, Bogost argues, there
               is a <quote rend="inline" source="#bogost2006">gap between the rule-based
                  representation of a source system and a user’s subjectivity</quote>
               <ptr target="#bogost2006" loc="107"/>. Exploring this gap is, for Bogost, the most
               productive way to overcome simulation fever. Bogost observes that simulations are
                  <quote rend="inline" source="#bogost2006">not exactly like textual or electronic
                  archives</quote>
               <ptr target="#bogost2006" loc="108"/>, so the simulation gap must be understood by
               means different than those used to interpret literature or poetry. He imagines that
                  <quote rend="inline" source="#bogost2006">working through simulation fever means
                  learning how to express what simulations choose to embed and to exclude</quote> as
               well as learning how <quote rend="inline" source="#bogost2006">to relate their rules
                  to their subjective experiences and configurations</quote>
               <ptr target="#bogost2006" loc="109"/>. But this is what a close reading of code
               reveals: simulations are indeed texts. The code itself expresses what <quote
                  rend="inline" source="#bogost2006">simulations choose to embed and to
                  exclude.</quote> The close reading of code by non-coders can act as a critical
               intervention into the simulation gap. Code exposes the guts of the simulation.
               Reading code exposes the gaps of the simulation. While the manual may explain
               processes and playing may set them in motion, neither provides the kind of traction
               gained by seeing the code. Reading the code turns the simulation into a textual
               object. And as a textual object, it can be taken apart, even tweaked and recompiled
               with our own algorithms. </p>
         </div>
         <div>
            <head>Comments in Code</head>
            <p>When we crack open the code like this, we may well find surprises that playing the
               game or reading the manual will not tell us. Remember that though code does what it
               says, it also says things it does not do. Marino calls this characteristic of code
               its <quote rend="inline" source="#marino2006">extra-functional significance</quote> —
               meaning-making that goes beyond the purely utilitarian commands in the code <ptr
                  target="#marino2006"/>. Extra-functional significance means the code participates
               in a system of signs beyond those executable by the machine. This extra-functional
               significance may arise in the layout of the code, which forms meaningful patterns
               recognizable to the human eye but which are irrelevant to the program’s interpreter.
               Or perhaps in the developers’ choice of variable names, such as the <title
                  rend="quotes">FeministWhore</title> variable that was discovered in a piece of
               code in the Steam version of the zombie survival horror game <title rend="italic"
                  >Dead Island</title>
               <ptr target="#john2011"/>. Or, quite likely, in the comments developers leave in
               code.</p>
            <p> Returning to the example of <title rend="italic">SimCity</title> and <title
                  rend="italic">Micropolis</title>, consider the code for disasters.cpp. Anyone with
               a passing familiarity with <title rend="italic">SimCity </title>might be able to
               guess what disasters.cpp does. It’s the routine that determines which random
               disasters will strike a player’s city. The entire 408 line routine is worth looking
               at, but to illustrate the extra-functional significance of comments in code, examine
               the section that begins at line 109, where the probability of the different possible
               disasters is defined:</p>
            <eg> 109 if (!getRandom(DisChance[x])) { 110 switch (getRandom(8)) { 111 case 0: 112
               case 1: 113 setFire(); // 2/9 chance a fire breaks out 114 break; 115 case 2: 116
               case 3: 117 makeFlood(); // 2/9 chance for a flood 118 break; 119 case 4: 120 // 1/9
               chance nothing happens (was airplane crash, 121 // which EA removed after 9/11, and
               requested it be 122 // removed from this code) 123 break; 124 case 5: 125
               makeTornado(); // 1/9 chance tornado 126 break; 127 case 6: 128 makeEarthquake(); //
               1/9 chance earthquake 129 break; 130 case 7: 131 case 8: 132 // 2/9 chance a scary
               monster arrives in a dirty town 133 if (pollutionAverage &gt; /* 80 */ 60) { 134
               makeMonster(); 135 } 136 break; </eg>
            <p>In the midst of rather generic biblical disasters (22% chance of fire in line 113 and
               22% chance of flood in line 117), there is a startling excision of code, the trace of
               which is only visible in the programmer’s comments. These full-line comments in lines
               119–123 can be identified by the double slashes that precede them:</p>
            <eg> case 4: // 1/9 chance nothing happens (was airplane crash, // which EA removed
               after 9/11, and requested it be // removed from this code) break; </eg>

            <p>These comments reveal that in the original <title rend="italic">SimCity</title> there
               was a 1 out of 9 chance that an airplane would crash into the city. After 9/11 this
               disaster was removed from the code at the request of Electronic Arts.</p>
            <p>Playing <title rend="italic">Micropolis</title>, say, perhaps as one of the children
               in the OLPC program, this erasure would likely escape notice. It escapes notice
               because the machine doesn’t notice — the comment stands outside the algorithms of the
               game. It’s only visible when we read the code, a clear argument for treating code as
               a textual document rife with non-performative functions. We could raise any number of
               questions about this decision to elide 9/11 from <title rend="italic"
                  >Micropolis</title>. There are questions, for example, about the way the code is
               commented. None of the other disasters have any kind of contextual,
               historically-rooted comment, the effect of which is that the other disasters are
               naturalized, even the human-made disasters like the Godzilla-like monster that
               terrorizes an over-polluted city in <q>case 8</q> (line 131). There are questions
               about the One Laptop Per Child program and the white-washing of American history for
               global audiences. There are questions about the relationship between simulation,
               disaster, and history that call to mind Don DeLillo’s <title rend="italic">White
                  Noise</title>, where one character tells another, <cit>
                  <quote rend="inline" source="#delillo1985">The more we rehearse disaster, the
                     safer we’ll be from the real thing….There is no substitute for a planned
                     simulation</quote>
                  <ptr target="#delillo1985" loc="196"/>
               </cit>.</p>
            <p>And finally, there are questions about corporate influence and censorship — was EA's
               request to remove the airplane crash really a request, or more of a condition? How
               does this relate to EA’s more recent decision in October of 2010 to remove the
               Taliban from the latest version of <title rend="italic">Medal of Honor</title>? In
               this case, a controversy erupted when word leaked out that <title rend="italic">Medal
                  of Honor</title> players would be able to assume the role of the Taliban in the
               multiplayer game. After weeks of holding out, EA ended up changing all references to
               the Taliban to the generic and unimaginative <cit>
                  <quote rend="inline" source="#bogost2010a">Opposing Force</quote>
                  <ptr target="#bogost2010a"/>
               </cit>. At least twice, then, EA — and by proxy, the videogame industry in general —
               has erased history, making it more palatable, or as a cynic might see it, more
               marketable.</p>
         </div>
         <div>
            <head>Approaching Comments in Code</head>
            <p>While these social and historical questions are exactly the kind that critical code
               studies seeks to ask, it’s important to step back and consider the epistemological
               status of comments in code as well. Comments are ignored by the machine interpreter
               and readable by humans, but not exactly legible. They are visible only if one is able
               to view the source code. They are not intended for the end-user, but with the right
               tools, the end-user might find them. Comments in code thus exemplify McGann’s notion
               of the social private text — and although McGann is primarily discussing poetry, his
               definition of a text as a <quote rend="inline" source="#mcgann1991">laced network of
                  linguistic and bibliographic codes</quote> would certainly include computer code
                  <ptr target="#mcgann1991" loc="13"/>. <quote rend="inline" source="#mcgann1991"
                  >Texts are produced and reproduced under specific social and institutional
                  conditions,</quote> McGann explains, <cit>
                  <quote rend="inline" source="#mcgann1991">and hence that every text, including
                     those that may appear to be purely private, is a social text</quote>
                  <ptr target="#mcgann1991" loc="21"/>
               </cit>. Code is certainly produced in a specific social and institutional context,
               one might even say regime — for example, as a developer for Electronic Arts, coding
               eight hours a day, six days a week <ptr target="#wark2007" loc="44"/>. </p>
            <p>Code is a social text, even the comments that no one other than another developer is
               meant to see. Questions of <emph>voice</emph> (who speaks), <emph>address</emph> (to
               whom), and <emph>intention </emph>(and why) all arise, and because these questions
               have similarly occupied literary scholars, it’s tempting to transpose lessons from
               narratology onto the study of code and comments in code. Even early considerations by
               computer scientists of the role of comments in code acknowledged the centrality of
               these narratological questions. A 1976 study of the practice of commenting in code
               observes that comments require the programmer to approach the program from at least
               two simultaneous points of view — the coder and the documentor. This study divides
               comments into two categories of intention: <quote rend="inline" source="#sachs1976"
                  >functional comments</quote> that describe what a piece of code does and <quote
                  rend="inline" source="#sachs1976">operational comments</quote> that explain how
               the code performs the function <ptr target="#sachs1976"/>.</p>
            <p>More recently Jeremy Douglass has convincingly characterized comments in code as a
               type of paratext, <quote rend="inline" source="#douglass2010">continuous with and yet
                  set apart from the source</quote> code. Douglass likens code that is commented to
               a <cit>
                  <quote rend="inline" source="#douglass2010">parenthesis for a different
                     reader</quote>
                  <ptr target="#douglass2010"/>
               </cit> — a typographical metaphor that underscores the essential textuality of
               comments. Summarizing the way software developers have tended to think about comments
               in code, Douglass notes that comments serve as either documentation, specification,
               or metadata. These are all ways of Taylorizing the process of software engineering.
               Yet with <title rend="italic">Micropolis</title>, it is clear that code comments can
               serve as either entry or exit points to the game, connecting it with social and
               historical contexts in a way that has nothing to do with software engineering. </p>
            <p>It is tempting to think of code comments as a kind of textual marginalia — the notes,
               corrections, and even doodles that authors and readers add in the margins of texts.
               Patrick Murray-John, a software developer who also holds a doctorate in Anglo-Saxon
               literature, has suggested that comments in computer code might have imperfect analogs
               in the medieval division of marginalia into separate categories. As Murray-John
               notes, medieval scholars distinguished between <term>lectio</term> and
                  <term>enarratio</term>
               <ptr target="#murray2011"/>. <term>Lectio </term>refers to aids for reading at the
               level of comprehension — notes and marks that help a reader make the text legible
               (originally for the purposes of reading aloud). <term>Enarratio </term>refers to
               marginalia that actually help readers interpret the text on a rhetorical and symbolic
               level — or, to extrapolate to the world of software engineering, on a procedural
               level. To <term>lectio </term>and <term>enarratio </term>we might also add, as
               Whitney Trettien suggests <ptr target="#trettien2011"/>, <term>emendatio</term>,
               comments that correct or even offer improvements to the existing text (such as might
               be found in an open-source project, with one developer making suggestions on another
               developer’s code). These medieval categories of textual annotation do not map
               perfectly onto categories of comments in code, of course. More than a one-to-one
               correspondence, these categories can provide a starting point to begin to
               differentiate between kinds of comments in code. All comments in code are
               extra-functional, but not all comments in code are extra-functional in the same way.
               Categories such as <term>lectio</term>, <term>enarratio</term>, and <term>emendatio
               </term>can highlight the range of extra-functional significance found in code
               comments. This range is exemplified in the code of <title rend="italic">JFK:
                  Reloaded</title>, a game that perfectly embodies the contradictions between the
               playable algorithms of a game and the internal and usually invisible signifying
               structures of code.</p>
         </div>
         <div>
            <head>Rhetorical Excess in <title rend="italic">JFK: Reloaded</title>
            </head>
            <p>Traffic’s 2004 <title rend="italic">JFK: Reloaded </title>is premised upon a player’s
               ready resignation (to use Turkle’s terminology) to the simulated world, in this case
               Dallas, 1963. The game is rooted soundly in an identifiable — and for many of its
               outraged detractors — experienced event: the assassination of President Kennedy. The
               videogame is a first-person shooter in which that first-person happens to be Lee
               Harvey Oswald. The goal of <title rend="italic">JFK: Reloaded</title> is to reenact
               the shooting at Dealey Plaza with as much fidelity as possible to the findings of the
               Warren Commission Report (i.e. Oswald acted alone, firing three bullets from a single
               rifle, from the sixth floor of the Texas School Book Depository).</p>
            <p>Upon its release in 2004, Traffic labeled <title rend="italic">JFK: Reloaded
               </title>a <soCalled>docugame</soCalled> and most critical readings of the game
               continue to see it as some form of interactive documentary. Tracy Fullerton places
               the game squarely within Michael Renov’s classic definition of documentary media, as
               the game <quote rend="inline" source="#fullerton2008">interrogates</quote> the past
                  <ptr target="#fullerton2008"/>. More recently, Bogost, Ferrari, and Schweizer
               suggest in <title rend="italic">Newsgames </title>that <title rend="italic">JFK:
                  Reloaded </title>is a very specific kind of documentary. Bogost et al. describe
               three different <quote rend="inline" source="#bogost2010b">playable realities</quote>
               that documentary videogames can simulate in the name of experiencing or understanding
               the past: a spatial reality, in which players explore the physical environment of a
               historical event (a recent example would be Osama Bin Laden’s Abbottabad compound,
               modeled in <title rend="italic">Counter Strike: Source</title>); an operational
               reality, which recreates specific events, hewing to the historical record; and a
               procedural reality, which models <cit>
                  <quote rend="inline" source="#bogost2010b">the behaviors underlying a situation,
                     rather than merely telling stories of their effects</quote>
                  <ptr target="#bogost2010b" loc="69"/>
               </cit>.</p>
            <p>According to this framework, <title rend="italic">JFK: Reloaded </title>presents an
               operational reality. Players recreate in a structured, limited way (and guided by
               their own knowledge of the assassination) the essential operations of the
               assassination: waiting for the motorcade from a hidden perch, sighting the rifle onto
               Dealey Plaza, and firing into the presidential motorcade. However, as Bogost notes in
                  <title rend="italic">Persuasive Games</title>, a work that precedes <title
                  rend="italic">Newsgames</title>, there is more to <title rend="italic">JFK:
                  Reloaded </title>than the simple attempted recreation of a historical event. It is
               nearly impossible to <quote rend="inline" source="#bogost2007">win</quote> the game,
               by which I mean match the Warren Commission findings. This impossibility, Bogost
               suggests, contributes to the game’s procedural rhetoric, a kind of procedural reality
               layered upon (or beneath) the more explicit operational reality. As Bogost puts it, <cit>
                  <quote rend="inline" source="#bogost2007">the developer’s stated goal [of
                     reaffirming the Warren Commission Report] was a ruse</quote>
                  <ptr target="#bogost2007" loc="132–133"/>
               </cit>. And in fact, I would add, the game highlights its proclaimed goal’s exact
               opposite — the improbability of the Warren Commission’s findings.</p>
            <p>Whether or not the procedural rhetoric of <title rend="italic">JFK: Reloaded
               </title>supports or refutes the Warren Commission Report, it’s possible to find
               traces of another narrative by examining the code of the game. To be more precise,
               consider the comments that appear in one of the two WAD files that comprise <title
                  rend="italic">JFK: Reloaded</title>’s game assets. An acronym for Where’s All the
               Data?, a WAD file is a collection of individual sounds, sprites, level information,
               NPC (non-playable character) behavior, and other often customizable game data.
               Originally used in id Software’s <title rend="italic">Doom </title>(1993), WADs or
               similar composite files are now commonplace in many PC games.</p>
            <p>In the case of <title rend="italic">JFK: Reloaded</title>, opening up the core000.wad
               in a text editor reveals mostly binary codes that look like junk (because they ought
               to be opened in a hexadecimal editor rather than a plain text editor). But beginning
               with line 224,070, there is a chunk of plain text code that resembles XML structured
               data, accompanied by full-line programmer comments.<note> Credit for discovering the
                  chunks of legible code in the <title rend="italic">JFK: Reloaded </title>WAD files
                  goes to an internet forum user known by the name BrooksMarlin, who first noticed
                  them in 2004. Nobody to my knowledge has ever read these comments against the game
                  itself and against the existing scholarship on the game. See <ref
                     target="http://everything2.com/user/BrooksMarlin/writeups/JFK+Reloaded.BrooksMarlin"
                     >BrooksMarlin</ref> 2004.</note> For example, the following lines specify the
               actions that should occur when a generic character is fatally hit by Oswald’s
               rifle:</p>

            <eg> // Generic character’s killed action // —————————————————————- // This is the
               action that a character takes when they should die if // they’ve got no special
               animation for it // —————————————————————- [ACTION] &lt;NAME&gt; PersonKilled
               &lt;DIE&gt; 0 0 &lt;RAGDOLL&gt; </eg>

            <p>The code comments — the marginalia — in <title rend="italic">JFK: Reloaded</title>’s
               WAD file at first blush resemble <term>enarratio</term>, not only helping readers to
               make sense of the individual lines of code that follow the comment, but also offering
               an interpretative gloss on the code. But quickly the comments move from
                  <term>enarratio </term>into a perverse reworking of the fourth category of
               medieval annotation — <term>judicium</term>, or judgments upon the <cit>
                  <quote rend="inline" source="#parkes1999">aesthetic qualities or the moral and
                     philosophical value of the text</quote>
                  <ptr target="#parkes1999" loc="90"/>
               </cit>. For example, in the following snippet, Jackie Kennedy’s actions are
               defined:</p>
            <eg> // ————————————————————————— // Jackie cradling JFK before the money shot //
               ————————————————————————— [ACTION] &lt;NAME&gt; JackieCradleJFK &lt;CONCERNED&gt; 0 0 </eg>


            <p>The comment provides the context for these lines of code (<term>enarratio</term>) but
               the casual use of the overtly sexual phrase <q>money shot</q> is an implicit judgment
                  (<term>judicium</term>) not on the code, but on the historical event itself. A
               phrase inexorably linked to pornography, <q>the money shot</q> comment is sudden,
               unsettling, and, like all comments in code, extra-functional. While it’s tempting to
               suggest that the comment sheds some light on the developers’ attitude toward the
               subject matter (what we’d call the author’s <soCalled>tone</soCalled> in literary
               studies), it is not necessary to do so. The comment is structurally unnecessary, but
               that doesn’t mean it doesn’t <emph>mean</emph>. Its rhetorical excess spills over,
               making this supposedly private text palpably social. A money shot commonly refers to
               the climactic scene of male ejaculation in a pornographic film, so named by the
               pornography industry because it’s typically the most expensive scene to shoot. It is
               also, as Linda Williams argues, the <quote rend="inline" source="#williams1999">most
                  representative instance of phallic power and pleasure</quote> in a hard-core film
                  <ptr target="#williams1999" loc="95"/>. Williams positions the money shot as a
               dense collision point between commodity fetishism, visual desire, and anxiety over
               women’s <cit>
                  <quote rend="inline" source="#williams1999">invisible and unquantifiable
                     pleasure</quote>
                  <ptr target="#williams1999" loc="113"/>
               </cit>. In more ways than one, the money shot is <cit>
                  <quote rend="inline" source="#williams1999">a substitute for what cannot be
                     seen</quote>
                  <ptr target="#williams1999" loc="95"/>
               </cit>. </p>
            <p> The money shot comment in <title rend="italic">JFK: Reloaded </title>reenacts this
               substitution and reverses it. Consider the comment closely: <q>Jackie cradling JFK
                  before the money shot.</q> While Kennedy is nominally the target in <title
                  rend="italic">JFK: Reloaded</title>, describing the fatal gunshot as a money shot
               substitutes Jackie as the intended target. In heteronormative pornography, it is the
               man who delivers the money shot and a woman who receives it. Jackie thus becomes an
               unwilling participant in a death scene that is pornographic in nature, while the
               player is given license to fulfill the role of the male performer in a pornographic
               film. In other words, imagining Oswald’s bull’s-eye as a money shot makes it okay to
                  <emph>try</emph> to hit Jackie. Jackie Kennedy is not collateral damage but in
               fact <emph>was the target all along</emph>. Furthermore, like a money shot in a
               hard-core film, the event is commodified and repeatable. Yet the programmer’s comment
               also reverses the usual dynamic of a money shot, which makes visible (ejaculation)
               what would otherwise be hidden in intercourse. In the case of <title rend="italic"
                  >JFK: Reloaded</title>, though, it is the money shot comment itself that is meant
               to be hidden, off limits to the player. But it’s still there. It means something. It
               cannot not mean something. </p>
            <p>A textual imagination must reckon with the comment. Once it is known, it cannot be
               unknown. To ignore the comment means overlooking the kind of evidence that historians
               and textual scholars have long used to create a more complex understanding of our
               cultural heritage. At the very least — the very, very least — the strictly objective
               perspective that we falsely associate with documentary media dissolves here. The
               misogynistic tone of the comments becomes even more troubling in the following
               snippet of code, which defines Nellie Connally’s actions when her husband, Texas
               Governor John Connally, is shot:</p>
            <eg> // ————————————————————————— // Nelly shoving Connally’s bonce down into her minge,
               // in a last desparate attempt to get oral sex out of // him before he croaks //
               ————————————————————————— [ACTION] &lt;NAME&gt; NellyShoveConnally &lt;CONCERNED&gt;
               0 0 </eg>
            <p>In three lines of code commentary, the developers at Traffic absolutely undermine the
               entire stated pedagogical project of their docu-game. Their outwardly respectful
                  <q>interactive reconstruction of John F. Kennedy’s assassination</q> is undone by
               inaccuracies (the suggestion that Connally <q>croaks</q>) and misspellings (Nelly for
               Nellie, <q>desparate</q>) but even more so by the explicitly pornographic and
               misogynistic reframing of this traumatic event. This comment marks the second time a
               grieving woman protecting her injured husband is portrayed in <title rend="italic"
                  >JFK: Reloaded</title> as transgressively sexual in a moment of pain and
               suffering. While the &lt;concerned&gt; variable initiates an in-game routine
               appropriate for the situation, the hidden code retells the story almost as a snuff
               film. The governor’s critical wound is met with arousal, and Nellie’s desperation is
               sexual, not emotional. Simulating the direst of situations — a national tragedy but
               also a personal one — this first-person shooter collapses sex onto violence. They are
               indistinguishable from each other, but only in the comments.</p>
         </div>
         <div>
            <head>Code and Paracode</head>
            <p>Given the rhetorical excess of these comments, it’s worth thinking about them as more
               than paratext. I want to suggest the idea of <emph>paracode</emph>. In textual
               studies, of course, para-, as in paratext, is what Genette calls the <quote
                  rend="inline" source="#genette1997">threshold</quote> of the text, the <cit>
                  <quote rend="inline" source="#genette1997">zone between text and off-text</quote>
                  <ptr target="#genette1997"/>
               </cit>. Paratext includes all the textual apparatus at the edge of a book — indices,
               acknowledgments, and so on. <title rend="italic">Paracode</title> likewise includes
               the apparatus at the edge of code, the comments chief among them. But there’s another
               meaning of <soCalled>para</soCalled> I want to evoke. It comes from the idea of
               paracinema, introduced by the film theorist Jeffrey Sconce. Paracinema is a kind of
                  <quote rend="inline" source="#sconce1995">reading protocol</quote> that valorizes
               what most audiences would otherwise consider to be cinematic trash <ptr
                  target="#sconce1995"/>. The paracinematic aesthetic redeems films that are so bad
               that they actually become worth watching. Following Sconce’s work, the videogame
               theorist Jesper Juul has wondered if there can be such a thing as paragames —
               illogical, improbable, and unreasonably bad games. Such games, Juul suggests, might
               teach us about our tastes and playing habits, and what the limits of those tastes are
                  <ptr target="#juul2009"/>. Along the same lines, <title rend="italic"
                  >paracode</title> is code so excessive or remarkable that it becomes productive to
               fully engage with it. The example of the missing airline disaster in <title
                  rend="italic">Micropolis</title> is a noteworthy example. The algorithm for the
               disaster is there, present in the code, but commented out, in a kind of Derridean
               erasure. The paracode leaks out from the code, and it is up to cultural critics to
               make sense of it.</p>
            <p>The paracode of <title rend="italic">JFK: Reloaded </title>is even more startling. In
               addition to undermining Traffic’s official rationale for the game, the paracode
               complicates the arguments of the critics who defended the game. Access to the code
               allows us to write a revisionist history of <title rend="italic">JFK:
                  Reloaded</title>. Some might argue that the marginalia of the game, which was
               never intended to be available to the player, should not guide our interpretation of
               the game. But this is precisely why code must become a site of engagement for
               humanists. Recall McPherson’s argument that not only is code a hidden marker of
               social relations, code hides the means by which itself operates. As I have
               demonstrated here, approaching code on a textual level as opposed to a procedural
               level exposes some of these transparent dynamics. In the final analysis, my
               exploration of this particular pair of games — <title rend="italic">Micropolis
               </title>and <title rend="italic">JFK: Reloaded</title> — is secondary to the broader
               questions of critical code studies. What does an attentiveness to code, or even
               comments in code, mean for literary scholars and cultural historians who study
               digital artifacts? Code is too important to be left to coders, and it will
               increasingly be necessary for humanists to develop some degree of what Michael Mateas
               has called <quote rend="inline" source="#mateas2008">procedural literacy.</quote> An
               accomplished new media designer himself, Mateas describes procedural literacy as <cit>
                  <quote rend="inline" source="#mateas2008">the ability to read and write processes,
                     to engage procedural representation and aesthetics, to understand the interplay
                     between the culturally-embedded practices of human meaning-making and
                     technically-mediated processes</quote>
                  <ptr target="#mateas2008" loc="1"/>
               </cit>. Like any reading literacy, procedural literacy has different thresholds, each
               requiring greater proficiency. I have argued elsewhere for the notion of
               computational competency over literacy <ptr target="#sample2012"/>, but the point
               remains: even the most modest efforts to <quote rend="inline" source="#sample2012"
                  >engage procedural representation</quote> can yield rewarding results. In the
               examples of <title rend="italic">Micropolis </title>and <title rend="italic">JFK:
                  Reloaded</title> we encounter programmer comments that in no way help us to
               understand what Bogost would call the procedural rhetoric of the games. Yet, they do
               help us to develop an understanding of the games as cultural objects and of coding
               itself as a cultural practice. Especially in the case of <title rend="italic">JFK:
                  Reloaded</title>, the comments are an expression of the male-dominated,
               conquest-driven <foreign>milieu </foreign>of contemporary gaming and coding. At the
               very least, they show that the <soCalled>inside</soCalled> of software does not
               always match the <soCalled>outside.</soCalled> And ultimately, a thorough engagement
               with the textual condition of software reveals that procedural literacy must not be
               strictly limited to reading or writing code, but must also extend outward to language
               and cultural practices.</p>
         </div>
      </body>
      <back>
         <listBibl>
            <bibl label="Aarseth 2004" xml:id="aarseth2004" key="aarseth2004">Aarseth, E. <title
                  rend="quotes">Genre Trouble.</title>
               <title rend="italic">Electronic Book Review</title>. 2004. Accessed 16 February 2009.
                  <ref target="http://www.electronicbookreview.com/thread/firstperson/vigilant"
                  >http://www.electronicbookreview.com/thread/firstperson/vigilant</ref>.</bibl>
            <bibl label="Bleecker 1995" xml:id="bleecker1995" key="bleecker1995">Bleecker, J. <title
                  rend="quotes">Urban Crisis: Past, Present, and Virtual.</title>
               <title rend="italic">Socialist Review</title> 24 (1995), 189–221.</bibl>
            <bibl label="Bogost 2010" xml:id="bogost2010a" key="bogost2010a">Bogost, I. <title
                  rend="quotes">Free Speech is Not a Marketing Plan.</title>
               <title rend="italic">Gamasutra</title>. 2010. Accessed 6 November 2011.
               http://www.gamasutra.com/view/feature/6158/persuasive_games_free_speech_is_.php.</bibl>
            <bibl label="Bogost 2007" xml:id="bogost2007" key="bogost2007">Bogost, I. <title
                  rend="italic">Persuasive Games: The Expressive Power of Videogames</title>.
               Cambridge: MIT Press, 2007.</bibl>
            <bibl label="Bogost 2009" xml:id="bogost2009a" key="bogost2009a">Bogost, I. <title
                  rend="quotes">The Proceduralist Style.</title>
               <title rend="italic">Gamasutra</title>. 2009. Accessed 1 February 2009. <ref
                  target="http://www.gamasutra.com/view/feature/3909/persuasive_games_the_.php?print=1"
                  >http://www.gamasutra.com/view/feature/3909/persuasive_games_the_.php?print=1</ref>.</bibl>
            <bibl label="Bogost 2006" xml:id="bogost2006" key="bogost2006">Bogost, I. <title
                  rend="italic">Unit operations: An Approach to Videogame Criticism</title>.
               Cambridge: MIT Press, 2006.</bibl>
            <bibl label="Bogost et al. 2010" xml:id="bogost2010b" key="bogost2010b">Bogost, I., S.
               Ferrari, &amp; B. Schweizer. <title rend="italic">Newsgames: Journalism at
                  Play</title>. Cambridge: MIT Press, 2010.</bibl>
            <bibl label="Bogost &amp; Montfort 2009" xml:id="bogost2009b" key="bogost2009b"> Bogost,
               I. &amp; N. Montfort. <title rend="quotes">Platform Studies: Frequently Questioned
                  Answers.</title> Digital Arts and Culture. UC Irvine. 2009.
               http://escholarship.org/uc/item/01r0k9br.</bibl>
            <bibl label="Bremer 1993" xml:id="bremer1993" key="bremer1993">Bremer, M. <title
                  rend="italic">SimCity User Manual</title>. Orinda, CA: Maxis, 1993.</bibl>
            <bibl label="BrooksMarlin 2004" xml:id="brooksmarlin2004" key="brooksmarlin2004"
               >BrooksMarlin. <title rend="quotes">JFK Reloaded (thing).</title>
               <title rend="italic">Everything2.</title> 23 November 2004. <ref
                  target="http://everything2.com/user/BrooksMarlin/writeups/JFK+Reloaded"
                  >http://everything2.com/user/BrooksMarlin/writeups/JFK+Reloaded</ref>.</bibl>
            <bibl label="DeLillo 1985" xml:id="delillo1985" key="delillo1985">DeLillo, D. <title
                  rend="italic">White Noise</title>. New York: Penguin, 1985.</bibl>
            <bibl label="Douglass 2010" xml:id="douglass2010" key="douglass2010">Douglass, J. <title
                  rend="quotes">Comments on Comments in Code.</title> Critical Code Studies 2010
               Conference Proceedings. Accessed 18 August 2011.
               http://thoughtmesh.net/publish/369.php.</bibl>
            <bibl label="Eskelinen 2001" xml:id="eskelinen2001" key="eskelinen2001">Eskelinen, M.
                  <title rend="quotes">The Gaming Situation.</title>
               <title rend="italic">Game Studies</title> 1:1 (2001). Accessed 22 January 2009.
               http://gamestudies.org/0101/eskelinen/.</bibl>
            <bibl label="Friedman 1995" xml:id="friedman1995" key="friedman1995">Friedman, T. <title
                  rend="quotes">Making Sense of Software: Computer Games and Interactive
                  Textuality.</title>
               <title rend="italic">CyberSociety: Computer-Mediated Communication and Community
               </title>ed. S. G. Jones, 73–89. Thousand Oaks, CA: Sage Publications, 1995. Accessed
               5 November 2011. <ref target="http://www.duke.edu/~tlove/simcity.htm"
                  >http://www.duke.edu/~tlove/simcity.htm</ref>.</bibl>
            <bibl label="Fullerton 2008" xml:id="fullerton2008" key="fullerton2008">Fullerton, T.
                  <title rend="quotes">Documentary Games: Putting the Player in the Path of
                  History.</title>
               <title rend="italic">Playing the Past: Nostalgia in Video Games and Electronic
                  Literature </title>eds. Z. Whalen &amp; L.N. Taylor. Nashville: Vanderbilt
               University Press, 2008.</bibl>
            <bibl label="Galloway 2006" xml:id="galloway2006" key="galloway2006a">Galloway, A.R.
                  <title rend="italic">Gaming: Essays on Algorithmic Culture</title>. Minneapolis:
               University of Minnesota Press, 2006.</bibl>
            <bibl label="Genette 1997" xml:id="genette1997" key="genette1997">Genette, G. <title
                  rend="italic">Paratexts: Thresholds of Interpretation</title>. Cambridge:
               Cambridge University Press, 1997.</bibl>
            <bibl label="Hayles 2004" xml:id="hayles2004" key="hayles2004">Hayles, N.K. <title
                  rend="quotes">Print is Flat, Code is Deep: The Importance of Media-Specific
                  Analysis.</title>
               <title rend="italic">Poetics Today</title> 25:1 (2004), 67–90.</bibl>
            <bibl label="Hopkins 2007a" xml:id="hopkins2007a" key="hopkins2007a">Hopkins, D. <title
                  rend="quotes">History and Future of OLPC SimCity / Micropolis.</title>
               <title rend="italic">Don Hopkins.</title> 2007. Accessed 5 November 2011. <ref
                  target="http://www.donhopkins.com/drupal/taxonomy_menu/4/49/66"
                  >http://www.donhopkins.com/drupal/taxonomy_menu/4/49/66</ref>.</bibl>
            <bibl label="Hopkins 2007b" xml:id="hopkins2007b" key="hopkins2007b">Hopkins, D. <title
                  rend="quotes">SimCity Rules.</title>
               <title rend="italic">Don Hopkins.</title> Accessed 2 December 2011. <ref
                  target="http://www.donhopkins.com/drupal/node/145"
                  >http://www.donhopkins.com/drupal/node/145</ref>.</bibl>
            <bibl label="Jenkins 2004" xml:id="jenkins2004" key="jenkins2004">Jenkins, H. <title
                  rend="quotes">Game Design as Narrative Architecture.</title>
               <title rend="italic">First Person: New Media as Story, Performance, and Game
               </title>eds. N. Wardrip-Fruin &amp; P. Harrigan, 118–130. Cambridge: MIT Press, 2004. </bibl>
            <bibl label="John 2011" xml:id="john2011" key="john2011">John, T. <title rend="quotes"
                  >Misogyny in code is still misogyny.</title>
               <title rend="italic">Tracey Writes Stuff.</title> 2011. Accessed May 22, 2012. <ref
                  target="http://traceyjohn.blogspot.com/2011/09/misogyny-in-code-is-still-misogyny.html"
                  >http://traceyjohn.blogspot.com/2011/09/misogyny-in-code-is-still-misogyny.html</ref>.</bibl>
            <bibl label="Juul 2009" xml:id="juul2009" key="juul2009">Juul, J. <title rend="quotes"
                  >Paragaming: Good Fun with Bad Games.</title>
               <title rend="italic">The Ludologist</title>. 2009. Accessed 15 March 2011. <ref
                  target="http://www.jesperjuul.net/ludologist/?p=732"
                  >http://www.jesperjuul.net/ludologist/?p=732</ref>.</bibl>
            <bibl label="Kay 2007" xml:id="kay2007" key="kay2007">Kay, A. Email to Don Hopkins.
               2007. Accessed 26 January 2011. <ref
                  target="http://www.donhopkins.com/drupal/node/134"
                  >http://www.donhopkins.com/drupal/node/134</ref>.</bibl>
            <bibl label="Kelty 2008" xml:id="kelty2008" key="kelty2008">Kelty, C.M. <title
                  rend="italic">Two Bits: The Cultural Significance of Free Software</title>.
               Durham, NC: Duke University Press, 2008. <ref target="http://twobits.net/"
                  >http://twobits.net/</ref>.</bibl>
            <bibl label="Kirschenbaum 2008" xml:id="kirschenbaum2008" key="kirschenbaum2008"
               >Kirschenbaum, M. <title rend="italic">Mechanisms: New Media and the Forensic
                  Imagination</title>. Cambridge: MIT Press, 2008.</bibl>
            <bibl label="Manovich 2001" xml:id="manovich2001" key="manovich2001">Manovich, L. <title
                  rend="italic">The Language of New Media</title>. Cambridge: MIT Press,
               2001.</bibl>
            <bibl label="Marino 2006" xml:id="marino2006" key="marino2006">Marino, M.C. <title
                  rend="quotes">Critical Code Studies.</title>
               <title rend="italic">Electronic Book Review</title>. 2006. Accessed 23 August 2011.
                  <ref target="http://www.electronicbookreview.com/thread/electropoetics/codology"
                  >http://www.electronicbookreview.com/thread/electropoetics/codology</ref>.</bibl>
            <bibl label="Mateas 2008" xml:id="mateas2008" key="mateas2008"> Mateas, M. <title
                  rend="quotes">Procedural Literacy: Educating the New Media Practitioner.</title>
               <title rend="italic">Beyond Fun: Serious Games and Media</title> ed. D. Davidson,
               67–83. Pittsburgh: ETC Press, 2008.</bibl>
            <bibl label="McGann 1991" xml:id="mcgann1991" key="mcgann1991">McGann, J.J. <title
                  rend="italic">The Textual Condition</title>. Princeton, NJ: Princeton University
               Press, 1991.</bibl>
            <bibl label="McPherson 2012" xml:id="mcpherson2012" key="mcpherson2012a">McPherson, T.
                  <title rend="quotes">U.S. Operating Systems at Mid-Century: The Intertwining of
                  Race and UNIX.</title>
               <title rend="italic">Race after the Internet </title>eds. L. Nakamura &amp; P.
               Chow-White, 21–37. New York: Routledge, 2012.</bibl>
            <bibl label="Montfort 2004" xml:id="montfort2004" key="montfort2004c">Montfort, N.
                  <title rend="quotes">Continuous Paper: The Early Materiality and Workings of
                  Electronic Literature.</title> Talk given at the Modern Language Association
               Convention, 28 December 2004, Philadelphia, PA. <ref
                  target="http://nickm.com/writing/essays/continuous_paper_mla.html"
                  >http://nickm.com/writing/essays/continuous_paper_mla.html</ref>.</bibl>
            <bibl label="Montfort &amp; Bogost 2009" xml:id="montfort2009" key="montfort2009a"
               >Montfort, N. &amp; I. Bogost. <title rend="italic">Racing the Beam: The Atari Video
                  Computer System</title>. Cambridge: MIT Press, 2009.</bibl>
            <bibl label="Murray-John 2011" xml:id="murray2011" key="murray2011">Murray-John, P.
               Reply to @samplereality. <title rend="italic">Twitter</title>. 2011. Accessed 6
               November 2011. https://twitter.com/#!/patrick_mj/status/71568034640306176.</bibl>
            <bibl label="Parkes 1999" xml:id="parkes1999" key="parkes1999">Parkes, M.B. <title
                  rend="quotes">Reading, Copy, and Interpreting a Text in the Early Middle
                  Ages.</title>
               <title rend="italic">A History of Reading in the West </title>eds. G. Cavallo &amp;
               R. Chartier, 90–102. Amherst: University of Massachusetts Press, 1999. </bibl>
            <bibl label="Raley 2006" xml:id="raley2006" key="raley2006">Raley, R. <title
                  rend="quotes">Code.surface || Code.depth.</title>
               <title rend="italic">Dichtung-Digital</title> 36 (2006). Accessed 23 August 2011.
                  <ref target="http://www.dichtung-digital.org/2006/1-Raley.htm"
                  >http://www.dichtung-digital.org/2006/1-Raley.htm</ref>. </bibl>
            <bibl label="Sachs 1976" xml:id="sachs1976" key="sachs1976">Sachs, J. <title
                  rend="quotes">Some comments on comments.</title>
               <title rend="italic">ACM SIGDOC Asterisk Journal of Computer Documentation</title>
               3:7 (1976), 7–14.</bibl>
            <bibl label="Salen &amp; Zimmerman 2004" xml:id="salen2004" key="salen2004">Salen, K.
               &amp; E. Zimmerman. <title rend="italic">Rules of Play: Game Design
                  Fundamentals</title>. Cambridge: MIT Press, 2004.</bibl>
            <bibl label="Sample 2012" xml:id="sample2012" key="sample2012">Sample, M. <title
                  rend="quotes">5 BASIC Statements on Computational Literacy.</title>
               <title rend="italic">SAMPLE REALITY</title>. 2012. Accessed 23 May 2012. <ref
                  target="http://www.samplereality.com/2012/05/19/5-basic-statements-on-computational-literacy/"
                  >http://www.samplereality.com/2012/05/19/5-basic-statements-on-computational-literacy/</ref>.</bibl>
            <bibl label="Sconce 1995" xml:id="sconce1995" key="sconce1995">Sconce, J. <title
                  rend="quotes">‘Trashing’ the academy: taste, excess, and an emerging politics of
                  cinematic style.</title>
               <title rend="italic">Screen</title> 36:4 (1995), 371–393.</bibl>
            <bibl label="Trettien 2011" xml:id="trettien2011" key="trettien2011">Trettien, W. Reply
               to @samplereality. <title rend="italic">Twitter</title>. 2011. Accessed 6 November
               2011. <ref target="https://twitter.com/#!/whitneytrettien/status/71575703077916673"
                  >https://twitter.com/#!/whitneytrettien/status/71575703077916673</ref>.</bibl>
            <bibl label="Turkle 1995" xml:id="turkle1995" key="turkle1995">Turkle, S. <title
                  rend="italic">Life on the Screen: Identity in the Age of the Internet</title>. New
               York: Simon &amp; Schuster, 1995.</bibl>
            <bibl label="Wark 2007" xml:id="wark2007" key="wark2007">Wark, M. <title rend="italic"
                  >Gamer Theory</title>. Cambridge: Harvard University Press, 2007.</bibl>
            <bibl label="Williams 1999" xml:id="williams1999" key="williams1999">Williams, L. <title
                  rend="italic">Hard Core: Power, Pleasure, and the <title rend="quotes">Frenzy of
                     the Visible.</title>
               </title> Berkeley: University of California Press, 1999.</bibl>
         </listBibl>

      </back>
   </text>
</TEI>
